<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/de/fampopprol/dhbwhorb/ui/screen/LoginScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/de/fampopprol/dhbwhorb/ui/screen/LoginScreen.kt" />
              <option name="originalContent" value="/*&#10; * SPDX-FileCopyrightText: 2024 Joinside &lt;suitor-fall-life@duck.com&gt;&#10; *&#10; * SPDX-License-Identifier: AGPL-3.0-or-later&#10; */&#10;&#10;package de.fampopprol.dhbwhorb.ui.screen&#10;&#10;import android.util.Log&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Lock&#10;import androidx.compose.material.icons.filled.Person&#10;import androidx.compose.material.icons.filled.Visibility&#10;import androidx.compose.material.icons.filled.VisibilityOff&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import de.fampopprol.dhbwhorb.R&#10;import androidx.compose.material3.CircularProgressIndicator&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.OutlinedTextField&#10;import androidx.compose.material3.Text&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Lock&#10;import androidx.compose.material.icons.filled.Person&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.input.KeyboardType&#10;import androidx.compose.ui.text.input.PasswordVisualTransformation&#10;import androidx.compose.ui.text.input.VisualTransformation&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.material.icons.filled.Visibility&#10;import androidx.compose.material.icons.filled.VisibilityOff&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.CircularProgressIndicator&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.OutlinedTextField&#10;import androidx.compose.material3.Text&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Lock&#10;import androidx.compose.material.icons.filled.Person&#10;import androidx.compose.material.icons.filled.Visibility&#10;import androidx.compose.material.icons.filled.VisibilityOff&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.Card&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.input.KeyboardType&#10;import androidx.compose.ui.text.input.PasswordVisualTransformation&#10;        // Login Card with Material 3 elevated surface&#10;        Card(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            colors = CardDefaults.cardColors(&#10;                containerColor = MaterialTheme.colorScheme.surfaceContainer&#10;            ),&#10;            elevation = CardDefaults.cardElevation(defaultElevation = 8.dp)&#10;        ) {&#10;            Column(&#10;                modifier = Modifier.padding(24.dp),&#10;                horizontalAlignment = Alignment.CenterHorizontally&#10;            ) {&#10;                // Enhanced title with Material 3 typography&#10;                Text(&#10;                    text = stringResource(R.string.login_title),&#10;                    style = MaterialTheme.typography.headlineMedium,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = MaterialTheme.colorScheme.primary,&#10;                    textAlign = TextAlign.Center,&#10;                    modifier = Modifier.padding(bottom = 8.dp)&#10;                )&#10;&#10;                Text(&#10;                    text = stringResource(R.string.app_name),&#10;                    style = MaterialTheme.typography.bodyLarge,&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                    textAlign = TextAlign.Center,&#10;                    modifier = Modifier.padding(bottom = 32.dp)&#10;                )&#10;&#10;                // Enhanced username field with leading icon&#10;                OutlinedTextField(&#10;                    value = username,&#10;                    onValueChange = {&#10;                        username = it&#10;                        errorMessage = null // Clear error when user types&#10;                    },&#10;                    label = { Text(stringResource(R.string.username)) },&#10;                    leadingIcon = {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Person,&#10;                            contentDescription = null,&#10;                            tint = MaterialTheme.colorScheme.onSurfaceVariant&#10;                        )&#10;                    },&#10;                    singleLine = true,&#10;                    enabled = !isLoading,&#10;                    isError = errorMessage != null,&#10;                    modifier = Modifier.fillMaxWidth()&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                // Enhanced password field with visibility toggle&#10;                OutlinedTextField(&#10;                    value = password,&#10;                    onValueChange = {&#10;                        password = it&#10;                        errorMessage = null // Clear error when user types&#10;                    },&#10;                    label = { Text(stringResource(R.string.password)) },&#10;                    leadingIcon = {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Lock,&#10;                            contentDescription = null,&#10;                            tint = MaterialTheme.colorScheme.onSurfaceVariant&#10;                        )&#10;                    },&#10;                    trailingIcon = {&#10;                        IconButton(onClick = { passwordVisible = !passwordVisible }) {&#10;                            Icon(&#10;                                imageVector = if (passwordVisible) Icons.Filled.VisibilityOff else Icons.Filled.Visibility,&#10;                                contentDescription = if (passwordVisible) &quot;Hide password&quot; else &quot;Show password&quot;&#10;                            )&#10;                        }&#10;                    },&#10;                    singleLine = true,&#10;                    enabled = !isLoading,&#10;                    isError = errorMessage != null,&#10;                    visualTransformation = if (passwordVisible) VisualTransformation.None else PasswordVisualTransformation(),&#10;                    keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Password),&#10;                    modifier = Modifier.fillMaxWidth()&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(24.dp))&#10;import androidx.compose.material3.OutlinedTextField&#10;                // Enhanced login button with loading state&#10;                Button(&#10;                    onClick = {&#10;                        isLoading = true&#10;                        errorMessage = null&#10;                        scope.launch {&#10;                            dualisService.login(username, password) { result -&gt;&#10;                                isLoading = false&#10;                                if (result != null) {&#10;                                    scope.launch {&#10;                                        // Always save credentials on successful login&#10;                                        credentialManager.saveCredentials(username, password)&#10;                                        onLoginSuccess()&#10;                                        Log.d(&quot;LoginScreen&quot;, &quot;Login successful, credentials saved&quot;)&#10;                                    }&#10;                                } else {&#10;                                    errorMessage = &quot;Login failed. Please check your credentials.&quot;&#10;                                    Log.e(&quot;LoginScreen&quot;, &quot;Login failed&quot;)&#10;                                }&#10;                            }&#10;                        }&#10;                    },&#10;                    enabled = !isLoading &amp;&amp; username.isNotBlank() &amp;&amp; password.isNotBlank(),&#10;                    modifier = Modifier.fillMaxWidth()&#10;                ) {&#10;                    if (isLoading) {&#10;                        CircularProgressIndicator(&#10;                            modifier = Modifier&#10;                                .height(20.dp)&#10;                                .width(20.dp),&#10;                            strokeWidth = 2.dp,&#10;                            color = MaterialTheme.colorScheme.onPrimary&#10;                        )&#10;                        Spacer(modifier = Modifier.width(8.dp))&#10;                    }&#10;                    Text(&#10;                        text = if (isLoading) stringResource(R.string.logging_in) else stringResource(&#10;                            R.string.login&#10;                        ),&#10;                        style = MaterialTheme.typography.labelLarge&#10;                    )&#10;                }&#10;import androidx.compose.ui.text.font.FontWeight&#10;                // Error message with better styling&#10;                errorMessage?.let { error -&gt;&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;                    Card(&#10;                        colors = CardDefaults.cardColors(&#10;                            containerColor = MaterialTheme.colorScheme.errorContainer&#10;                        ),&#10;                        modifier = Modifier.fillMaxWidth()&#10;                    ) {&#10;                        Text(&#10;                            text = error,&#10;                            color = MaterialTheme.colorScheme.onErrorContainer,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            textAlign = TextAlign.Center,&#10;                            modifier = Modifier.padding(12.dp)&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;import androidx.compose.material3.OutlinedTextField&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.rememberCoroutineScope&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;        // Login Card with Material 3 elevated surface&#10;        Card(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            colors = CardDefaults.cardColors(&#10;                containerColor = MaterialTheme.colorScheme.surfaceContainer&#10;            ),&#10;            elevation = CardDefaults.cardElevation(defaultElevation = 8.dp)&#10;        ) {&#10;            Column(&#10;                modifier = Modifier.padding(24.dp),&#10;                horizontalAlignment = Alignment.CenterHorizontally&#10;            ) {&#10;                // Enhanced title with Material 3 typography&#10;                Text(&#10;                    text = stringResource(R.string.login_title),&#10;                    style = MaterialTheme.typography.headlineMedium,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = MaterialTheme.colorScheme.primary,&#10;                    textAlign = TextAlign.Center,&#10;                    modifier = Modifier.padding(bottom = 8.dp)&#10;                )&#10;&#10;                Text(&#10;                    text = stringResource(R.string.app_name),&#10;                    style = MaterialTheme.typography.bodyLarge,&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                    textAlign = TextAlign.Center,&#10;                    modifier = Modifier.padding(bottom = 32.dp)&#10;                )&#10;&#10;                // Enhanced username field with leading icon&#10;                OutlinedTextField(&#10;                    value = username,&#10;                    onValueChange = {&#10;                        username = it&#10;                        errorMessage = null // Clear error when user types&#10;                    },&#10;                    label = { Text(stringResource(R.string.username)) },&#10;                    leadingIcon = {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Person,&#10;                            contentDescription = null,&#10;                            tint = MaterialTheme.colorScheme.onSurfaceVariant&#10;                        )&#10;                    },&#10;                    singleLine = true,&#10;                    enabled = !isLoading,&#10;                    isError = errorMessage != null,&#10;                    modifier = Modifier.fillMaxWidth()&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                // Enhanced password field with visibility toggle&#10;                OutlinedTextField(&#10;                    value = password,&#10;                    onValueChange = {&#10;                        password = it&#10;                        errorMessage = null // Clear error when user types&#10;                    },&#10;                    label = { Text(stringResource(R.string.password)) },&#10;                    leadingIcon = {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Lock,&#10;                            contentDescription = null,&#10;                            tint = MaterialTheme.colorScheme.onSurfaceVariant&#10;                        )&#10;                    },&#10;                    trailingIcon = {&#10;                        IconButton(onClick = { passwordVisible = !passwordVisible }) {&#10;                            Icon(&#10;                                imageVector = if (passwordVisible) Icons.Filled.VisibilityOff else Icons.Filled.Visibility,&#10;                                contentDescription = if (passwordVisible) &quot;Hide password&quot; else &quot;Show password&quot;&#10;                            )&#10;                        }&#10;                    },&#10;                    singleLine = true,&#10;                    enabled = !isLoading,&#10;                    isError = errorMessage != null,&#10;                    visualTransformation = if (passwordVisible) VisualTransformation.None else PasswordVisualTransformation(),&#10;                    keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Password),&#10;                    modifier = Modifier.fillMaxWidth()&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(24.dp))&#10;&#10;                // Enhanced login button with loading state&#10;                Button(&#10;                    onClick = {&#10;                        isLoading = true&#10;                        errorMessage = null&#10;                        scope.launch {&#10;                            dualisService.login(username, password) { result -&gt;&#10;                                isLoading = false&#10;                                if (result != null) {&#10;                                    scope.launch {&#10;                                        // Always save credentials on successful login&#10;                                        credentialManager.saveCredentials(username, password)&#10;                                        onLoginSuccess()&#10;                                        Log.d(&quot;LoginScreen&quot;, &quot;Login successful, credentials saved&quot;)&#10;                                    }&#10;                                } else {&#10;                                    errorMessage = &quot;Login failed. Please check your credentials.&quot;&#10;                                    Log.e(&quot;LoginScreen&quot;, &quot;Login failed&quot;)&#10;                                }&#10;                            }&#10;                        }&#10;                    },&#10;                    enabled = !isLoading &amp;&amp; username.isNotBlank() &amp;&amp; password.isNotBlank(),&#10;                    modifier = Modifier.fillMaxWidth()&#10;                ) {&#10;                    if (isLoading) {&#10;                        CircularProgressIndicator(&#10;                            modifier = Modifier&#10;                                .height(20.dp)&#10;                                .width(20.dp),&#10;                            strokeWidth = 2.dp,&#10;                            color = MaterialTheme.colorScheme.onPrimary&#10;                        )&#10;                        Spacer(modifier = Modifier.width(8.dp))&#10;                    }&#10;                    Text(&#10;                        text = if (isLoading) stringResource(R.string.logging_in) else stringResource(&#10;                            R.string.login&#10;                        ),&#10;                        style = MaterialTheme.typography.labelLarge&#10;                    )&#10;                }&#10;&#10;                // Error message with better styling&#10;                errorMessage?.let { error -&gt;&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;                    Card(&#10;                        colors = CardDefaults.cardColors(&#10;                            containerColor = MaterialTheme.colorScheme.errorContainer&#10;                        ),&#10;                        modifier = Modifier.fillMaxWidth()&#10;                    ) {&#10;                        Text(&#10;                            text = error,&#10;                            color = MaterialTheme.colorScheme.onErrorContainer,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            textAlign = TextAlign.Center,&#10;                            modifier = Modifier.padding(12.dp)&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;                OutlinedTextField(&#10;                    value = username,&#10;                    onValueChange = {&#10;                        username = it&#10;                        errorMessage = null // Clear error when user types&#10;                    },&#10;                    label = { Text(stringResource(R.string.username)) },&#10;                    leadingIcon = {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Person,&#10;                            contentDescription = null,&#10;                            tint = MaterialTheme.colorScheme.onSurfaceVariant&#10;                        )&#10;                    },&#10;                    singleLine = true,&#10;                    enabled = !isLoading,&#10;                    isError = errorMessage != null,&#10;                    modifier = Modifier.fillMaxWidth()&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                // Enhanced password field with visibility toggle&#10;                OutlinedTextField(&#10;                    value = password,&#10;                    onValueChange = {&#10;                        password = it&#10;                        errorMessage = null // Clear error when user types&#10;                    },&#10;                    label = { Text(stringResource(R.string.password)) },&#10;                    leadingIcon = {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Lock,&#10;                            contentDescription = null,&#10;                            tint = MaterialTheme.colorScheme.onSurfaceVariant&#10;                        )&#10;                    },&#10;                    trailingIcon = {&#10;                        IconButton(onClick = { passwordVisible = !passwordVisible }) {&#10;                            Icon(&#10;                                imageVector = if (passwordVisible) Icons.Filled.VisibilityOff else Icons.Filled.Visibility,&#10;                                contentDescription = if (passwordVisible) &quot;Hide password&quot; else &quot;Show password&quot;&#10;                            )&#10;                        }&#10;                    },&#10;                    singleLine = true,&#10;                    enabled = !isLoading,&#10;                    isError = errorMessage != null,&#10;                    visualTransformation = if (passwordVisible) VisualTransformation.None else PasswordVisualTransformation(),&#10;                    keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Password),&#10;                    modifier = Modifier.fillMaxWidth()&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(24.dp))&#10;&#10;                // Enhanced login button with loading state&#10;                Button(&#10;                    onClick = {&#10;                        isLoading = true&#10;                        errorMessage = null&#10;                        scope.launch {&#10;                            dualisService.login(username, password) { result -&gt;&#10;                                isLoading = false&#10;                                if (result != null) {&#10;                                    scope.launch {&#10;                                        // Always save credentials on successful login&#10;                                        credentialManager.saveCredentials(username, password)&#10;                                        onLoginSuccess()&#10;                                        Log.d(&quot;LoginScreen&quot;, &quot;Login successful, credentials saved&quot;)&#10;                                    }&#10;                                } else {&#10;                                    errorMessage = &quot;Login failed. Please check your credentials.&quot;&#10;                                    Log.e(&quot;LoginScreen&quot;, &quot;Login failed&quot;)&#10;                                }&#10;                            }&#10;                        }&#10;                    },&#10;                    enabled = !isLoading &amp;&amp; username.isNotBlank() &amp;&amp; password.isNotBlank(),&#10;                    modifier = Modifier.fillMaxWidth()&#10;                ) {&#10;                    if (isLoading) {&#10;                        CircularProgressIndicator(&#10;                            modifier = Modifier&#10;                                .height(20.dp)&#10;                                .width(20.dp),&#10;                            strokeWidth = 2.dp,&#10;                            color = MaterialTheme.colorScheme.onPrimary&#10;                        )&#10;                        Spacer(modifier = Modifier.width(8.dp))&#10;                    }&#10;                    Text(&#10;                        text = if (isLoading) stringResource(R.string.logging_in) else stringResource(&#10;                            R.string.login&#10;                        ),&#10;                        style = MaterialTheme.typography.labelLarge&#10;                    )&#10;                }&#10;&#10;                // Error message with better styling&#10;                errorMessage?.let { error -&gt;&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;                    Card(&#10;                        colors = CardDefaults.cardColors(&#10;                            containerColor = MaterialTheme.colorScheme.errorContainer&#10;                        ),&#10;                        modifier = Modifier.fillMaxWidth()&#10;                    ) {&#10;                        Text(&#10;                            text = error,&#10;                            color = MaterialTheme.colorScheme.onErrorContainer,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            textAlign = TextAlign.Center,&#10;                            modifier = Modifier.padding(12.dp)&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    Column(&#10;        modifier = modifier&#10;            .fillMaxSize()&#10;            .padding(24.dp),&#10;        verticalArrangement = Arrangement.Center,&#10;        horizontalAlignment = Alignment.CenterHorizontally&#10;    ) {&#10;        // Login Card with Material 3 elevated surface&#10;        Card(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            colors = CardDefaults.cardColors(&#10;                containerColor = MaterialTheme.colorScheme.surfaceContainer&#10;            ),&#10;            elevation = CardDefaults.cardElevation(defaultElevation = 8.dp)&#10;        ) {&#10;            Column(&#10;                modifier = Modifier.padding(24.dp),&#10;                horizontalAlignment = Alignment.CenterHorizontally&#10;            ) {&#10;                // Enhanced title with Material 3 typography&#10;                Text(&#10;                    text = stringResource(R.string.login_title),&#10;                    style = MaterialTheme.typography.headlineMedium,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = MaterialTheme.colorScheme.primary,&#10;                    textAlign = TextAlign.Center,&#10;                    modifier = Modifier.padding(bottom = 8.dp)&#10;                )&#10;&#10;                Text(&#10;                    text = stringResource(R.string.app_name),&#10;                    style = MaterialTheme.typography.bodyLarge,&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                    textAlign = TextAlign.Center,&#10;                    modifier = Modifier.padding(bottom = 32.dp)&#10;                )&#10;&#10;                // Enhanced username field with leading icon&#10;                OutlinedTextField(&#10;                    value = username,&#10;                    onValueChange = {&#10;                        username = it&#10;                        errorMessage = null // Clear error when user types&#10;                    },&#10;                    label = { Text(stringResource(R.string.username)) },&#10;                    leadingIcon = {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Person,&#10;                            contentDescription = null,&#10;                            tint = MaterialTheme.colorScheme.onSurfaceVariant&#10;                        )&#10;                    },&#10;                    singleLine = true,&#10;                    enabled = !isLoading,&#10;                    isError = errorMessage != null,&#10;                    modifier = Modifier.fillMaxWidth()&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                // Enhanced password field with visibility toggle&#10;                OutlinedTextField(&#10;                    value = password,&#10;                    onValueChange = {&#10;                        password = it&#10;                        errorMessage = null // Clear error when user types&#10;                    },&#10;                    label = { Text(stringResource(R.string.password)) },&#10;                    leadingIcon = {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Lock,&#10;                            contentDescription = null,&#10;                            tint = MaterialTheme.colorScheme.onSurfaceVariant&#10;                        )&#10;                    },&#10;                    trailingIcon = {&#10;                        IconButton(onClick = { passwordVisible = !passwordVisible }) {&#10;                            Icon(&#10;                                imageVector = if (passwordVisible) Icons.Filled.VisibilityOff else Icons.Filled.Visibility,&#10;                                contentDescription = if (passwordVisible) &quot;Hide password&quot; else &quot;Show password&quot;&#10;                            )&#10;                        }&#10;                    },&#10;                    singleLine = true,&#10;                    enabled = !isLoading,&#10;                    isError = errorMessage != null,&#10;                    visualTransformation = if (passwordVisible) VisualTransformation.None else PasswordVisualTransformation(),&#10;                    keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Password),&#10;                    modifier = Modifier.fillMaxWidth()&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(24.dp))&#10;&#10;                // Enhanced login button with loading state&#10;                Button(&#10;                    onClick = {&#10;                        isLoading = true&#10;                        errorMessage = null&#10;                        scope.launch {&#10;                            dualisService.login(username, password) { result -&gt;&#10;                                isLoading = false&#10;                                if (result != null) {&#10;                                    scope.launch {&#10;                                        // Always save credentials on successful login&#10;                                        credentialManager.saveCredentials(username, password)&#10;                                        onLoginSuccess()&#10;                                        Log.d(&quot;LoginScreen&quot;, &quot;Login successful, credentials saved&quot;)&#10;                                    }&#10;                                } else {&#10;                                    errorMessage = &quot;Login failed. Please check your credentials.&quot;&#10;                                    Log.e(&quot;LoginScreen&quot;, &quot;Login failed&quot;)&#10;                                }&#10;                            }&#10;                        }&#10;                    },&#10;                    enabled = !isLoading &amp;&amp; username.isNotBlank() &amp;&amp; password.isNotBlank(),&#10;                    modifier = Modifier.fillMaxWidth()&#10;                ) {&#10;                    if (isLoading) {&#10;                        CircularProgressIndicator(&#10;                            modifier = Modifier&#10;                                .height(20.dp)&#10;                                .width(20.dp),&#10;                            strokeWidth = 2.dp,&#10;                            color = MaterialTheme.colorScheme.onPrimary&#10;                        )&#10;                        Spacer(modifier = Modifier.width(8.dp))&#10;                    }&#10;                    Text(&#10;                        text = if (isLoading) stringResource(R.string.logging_in) else stringResource(&#10;                            R.string.login&#10;                        ),&#10;                        style = MaterialTheme.typography.labelLarge&#10;                    )&#10;                }&#10;&#10;                // Error message with better styling&#10;                errorMessage?.let { error -&gt;&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;                    Card(&#10;                        colors = CardDefaults.cardColors(&#10;                            containerColor = MaterialTheme.colorScheme.errorContainer&#10;                        ),&#10;                        modifier = Modifier.fillMaxWidth()&#10;                    ) {&#10;                        Text(&#10;                            text = error,&#10;                            color = MaterialTheme.colorScheme.onErrorContainer,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            textAlign = TextAlign.Center,&#10;                            modifier = Modifier.padding(12.dp)&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="/*&#10; * SPDX-FileCopyrightText: 2024 Joinside &lt;suitor-fall-life@duck.com&gt;&#10; *&#10; * SPDX-License-Identifier: AGPL-3.0-or-later&#10; */&#10;&#10;package de.fampopprol.dhbwhorb.ui.screen&#10;&#10;import android.util.Log&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.rememberCoroutineScope&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;import de.fampopprol.dhbwhorb.data.dualis.network.DualisService&#10;import de.fampopprol.dhbwhorb.data.security.CredentialManager&#10;import de.fampopprol.dhbwhorb.ui.screen.loginScreen.LoginCard&#10;import kotlinx.coroutines.launch&#10;&#10;@Composable&#10;fun LoginScreen(&#10;    dualisService: DualisService,&#10;    credentialManager: CredentialManager,&#10;    onLoginSuccess: () -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    val scope = rememberCoroutineScope()&#10;    var username by remember { mutableStateOf(&quot;&quot;) }&#10;    var password by remember { mutableStateOf(&quot;&quot;) }&#10;    var passwordVisible by remember { mutableStateOf(false) }&#10;    var isLoading by remember { mutableStateOf(false) }&#10;    var errorMessage by remember { mutableStateOf&lt;String?&gt;(null) }&#10;&#10;    LaunchedEffect(credentialManager) {&#10;        credentialManager.usernameFlow.collect { storedUsername -&gt;&#10;            if (storedUsername != null) {&#10;                username = storedUsername&#10;            }&#10;        }&#10;    }&#10;&#10;    // Auto-fill password if credentials are stored&#10;    LaunchedEffect(credentialManager) {&#10;        val storedPassword = credentialManager.getPassword()&#10;        if (storedPassword != null) {&#10;            password = storedPassword&#10;        }&#10;    }&#10;&#10;    Column(&#10;        modifier = modifier&#10;            .fillMaxSize()&#10;            .padding(24.dp),&#10;        verticalArrangement = Arrangement.Center,&#10;        horizontalAlignment = Alignment.CenterHorizontally&#10;    ) {&#10;        LoginCard(&#10;            username = username,&#10;            password = password,&#10;            passwordVisible = passwordVisible,&#10;            isLoading = isLoading,&#10;            errorMessage = errorMessage,&#10;            onUsernameChange = { &#10;                username = it&#10;                errorMessage = null // Clear error when user types&#10;            },&#10;            onPasswordChange = { &#10;                password = it&#10;                errorMessage = null // Clear error when user types&#10;            },&#10;            onPasswordVisibilityToggle = { passwordVisible = !passwordVisible },&#10;            onLoginClick = {&#10;                isLoading = true&#10;                errorMessage = null&#10;                scope.launch {&#10;                    dualisService.login(username, password) { result -&gt;&#10;                        isLoading = false&#10;                        if (result != null) {&#10;                            scope.launch {&#10;                                // Always save credentials on successful login&#10;                                credentialManager.saveCredentials(username, password)&#10;                                onLoginSuccess()&#10;                                Log.d(&quot;LoginScreen&quot;, &quot;Login successful, credentials saved&quot;)&#10;                            }&#10;                        } else {&#10;                            errorMessage = &quot;Login failed. Please check your credentials.&quot;&#10;                            Log.e(&quot;LoginScreen&quot;, &quot;Login failed&quot;)&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/de/fampopprol/dhbwhorb/ui/screen/NotificationSettingsScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/de/fampopprol/dhbwhorb/ui/screen/NotificationSettingsScreen.kt" />
              <option name="originalContent" value="/*&#10; * SPDX-FileCopyrightText: 2024 Joinside &lt;suitor-fall-life@duck.com&gt;&#10; *&#10; * SPDX-License-Identifier: AGPL-3.0-or-later&#10; */&#10;&#10;package de.fampopprol.dhbwhorb.ui.screen&#10;&#10;import android.os.Build&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Notifications&#10;import androidx.compose.material.icons.filled.NotificationsOff&#10;import androidx.compose.material.icons.filled.AccessTime&#10;import androidx.compose.material.icons.filled.DateRange&#10;import androidx.compose.material.icons.filled.Star&#10;import androidx.compose.material.icons.filled.Palette&#10;import androidx.compose.material.icons.filled.DarkMode&#10;import androidx.compose.material.icons.filled.LightMode&#10;import androidx.compose.material.icons.filled.Settings&#10;import androidx.compose.material.icons.automirrored.filled.ExitToApp&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.ButtonDefaults&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.DropdownMenu&#10;import androidx.compose.material3.DropdownMenuItem&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Switch&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.rememberCoroutineScope&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import de.fampopprol.dhbwhorb.R&#10;import de.fampopprol.dhbwhorb.data.dualis.network.DualisService&#10;import de.fampopprol.dhbwhorb.data.notification.DHBWNotificationManager&#10;import de.fampopprol.dhbwhorb.data.notification.NotificationPreferencesManager&#10;import de.fampopprol.dhbwhorb.data.notification.NotificationScheduler&#10;import de.fampopprol.dhbwhorb.data.security.CredentialManager&#10;import de.fampopprol.dhbwhorb.data.theme.ThemePreferencesManager&#10;import de.fampopprol.dhbwhorb.ui.theme.ThemeMode&#10;import kotlinx.coroutines.launch&#10;&#10;@Composable&#10;fun NotificationSettingsScreen(&#10;    dualisService: DualisService,&#10;    notificationScheduler: NotificationScheduler,&#10;    notificationPreferencesManager: NotificationPreferencesManager,&#10;    credentialManager: CredentialManager, // Add CredentialManager&#10;    onLogout: () -&gt; Unit, // Add onLogout callback&#10;    modifier: Modifier = Modifier&#10;) {&#10;    val scope = rememberCoroutineScope()&#10;    val context = LocalContext.current&#10;&#10;    // Theme preferences&#10;    val themePreferencesManager = remember { ThemePreferencesManager(context) }&#10;    val materialYouEnabled by themePreferencesManager.materialYouEnabled.collectAsState(initial = true)&#10;    val themeMode by themePreferencesManager.themeMode.collectAsState(initial = ThemeMode.SYSTEM)&#10;&#10;    val notificationsEnabled by notificationPreferencesManager.notificationsEnabled.collectAsState(initial = true)&#10;    val timetableNotificationsEnabled by notificationPreferencesManager.timetableNotificationsEnabled.collectAsState(initial = true)&#10;    val gradeNotificationsEnabled by notificationPreferencesManager.gradeNotificationsEnabled.collectAsState(initial = true)&#10;    val classReminderNotificationsEnabled by notificationPreferencesManager.classReminderNotificationsEnabled.collectAsState(initial = false)&#10;    val classReminderTimeMinutes by notificationPreferencesManager.classReminderTimeMinutes.collectAsState(initial = 30)&#10;&#10;    // Check if we're in demo mode&#10;    val isDemoMode = dualisService.isDemoMode()&#10;&#10;    Column(&#10;        modifier = modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp)&#10;            .verticalScroll(rememberScrollState()),&#10;        verticalArrangement = Arrangement.spacedBy(16.dp)&#10;    ) {&#10;        // ===== ALLGEMEINE EINSTELLUNGEN (GENERAL SETTINGS) SECTION =====&#10;        // General Settings Header&#10;        Row(&#10;            verticalAlignment = Alignment.CenterVertically,&#10;            horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;        ) {&#10;            Icon(&#10;                imageVector = Icons.Default.Settings,&#10;                contentDescription = null,&#10;                tint = MaterialTheme.colorScheme.primary&#10;            )&#10;            Text(&#10;                text = stringResource(R.string.general_settings),&#10;                style = MaterialTheme.typography.headlineMedium,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;&#10;        // Material You Theming Toggle (only show on Android 12+)&#10;        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.S) {&#10;            Card(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(16.dp),&#10;                    verticalArrangement = Arrangement.spacedBy(8.dp)&#10;                ) {&#10;                    Row(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        horizontalArrangement = Arrangement.SpaceBetween,&#10;                        verticalAlignment = Alignment.CenterVertically&#10;                    ) {&#10;                        Column(modifier = Modifier.weight(1f)) {&#10;                            Text(&#10;                                text = stringResource(R.string.material_you_theming),&#10;                                style = MaterialTheme.typography.titleMedium,&#10;                                fontWeight = FontWeight.SemiBold&#10;                            )&#10;                            Text(&#10;                                text = stringResource(R.string.material_you_description),&#10;                                style = MaterialTheme.typography.bodyMedium,&#10;                                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                            )&#10;                        }&#10;                        Switch(&#10;                            checked = materialYouEnabled,&#10;                            onCheckedChange = { enabled -&gt;&#10;                                scope.launch {&#10;                                    themePreferencesManager.setMaterialYouEnabled(enabled)&#10;                                }&#10;                            }&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        // Theme Mode Selection&#10;        Card(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)&#10;        ) {&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(16.dp),&#10;                verticalArrangement = Arrangement.spacedBy(12.dp)&#10;            ) {&#10;                Row(&#10;                    verticalAlignment = Alignment.CenterVertically,&#10;                    horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;                ) {&#10;                    Icon(&#10;                        imageVector = when (themeMode) {&#10;                            ThemeMode.LIGHT -&gt; Icons.Default.LightMode&#10;                            ThemeMode.DARK -&gt; Icons.Default.DarkMode&#10;                            ThemeMode.SYSTEM -&gt; Icons.Default.Palette&#10;                        },&#10;                        contentDescription = null,&#10;                        tint = MaterialTheme.colorScheme.primary&#10;                    )&#10;                    Column(modifier = Modifier.weight(1f)) {&#10;                        Text(&#10;                            text = stringResource(R.string.theme_mode),&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            fontWeight = FontWeight.SemiBold&#10;                        )&#10;                        Text(&#10;                            text = stringResource(R.string.theme_mode_description),&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                        )&#10;                    }&#10;                }&#10;&#10;                // Theme mode selection buttons&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;                ) {&#10;                    ThemeMode.entries.forEach { mode -&gt;&#10;                        val isSelected = themeMode == mode&#10;                        Card(&#10;                            modifier = Modifier&#10;                                .weight(1f)&#10;                                .clickable {&#10;                                    scope.launch {&#10;                                        themePreferencesManager.setThemeMode(mode)&#10;                                    }&#10;                                },&#10;                            colors = CardDefaults.cardColors(&#10;                                containerColor = if (isSelected)&#10;                                    MaterialTheme.colorScheme.primaryContainer&#10;                                else&#10;                                    MaterialTheme.colorScheme.surfaceVariant&#10;                            )&#10;                        ) {&#10;                            Column(&#10;                                modifier = Modifier&#10;                                    .fillMaxWidth()&#10;                                    .padding(12.dp),&#10;                                horizontalAlignment = Alignment.CenterHorizontally,&#10;                                verticalArrangement = Arrangement.spacedBy(4.dp)&#10;                            ) {&#10;                                Icon(&#10;                                    imageVector = when (mode) {&#10;                                        ThemeMode.LIGHT -&gt; Icons.Default.LightMode&#10;                                        ThemeMode.DARK -&gt; Icons.Default.DarkMode&#10;                                        ThemeMode.SYSTEM -&gt; Icons.Default.Palette&#10;                                    },&#10;                                    contentDescription = null,&#10;                                    tint = if (isSelected)&#10;                                        MaterialTheme.colorScheme.onPrimaryContainer&#10;                                    else&#10;                                        MaterialTheme.colorScheme.onSurfaceVariant&#10;                                )&#10;                                Text(&#10;                                    text = stringResource(when (mode) {&#10;                                        ThemeMode.LIGHT -&gt; R.string.theme_light&#10;                                        ThemeMode.DARK -&gt; R.string.theme_dark&#10;                                        ThemeMode.SYSTEM -&gt; R.string.theme_system&#10;                                    }),&#10;                                    style = MaterialTheme.typography.bodySmall,&#10;                                    fontWeight = if (isSelected) FontWeight.SemiBold else FontWeight.Normal,&#10;                                    color = if (isSelected)&#10;                                        MaterialTheme.colorScheme.onPrimaryContainer&#10;                                    else&#10;                                        MaterialTheme.colorScheme.onSurfaceVariant&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        // ===== NOTIFICATION SETTINGS SECTION =====&#10;        // Notification Settings Header&#10;        Row(&#10;            verticalAlignment = Alignment.CenterVertically,&#10;            horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;        ) {&#10;            Icon(&#10;                imageVector = if (notificationsEnabled) Icons.Default.Notifications else Icons.Default.NotificationsOff,&#10;                contentDescription = null,&#10;                tint = MaterialTheme.colorScheme.primary&#10;            )&#10;            Text(&#10;                text = stringResource(R.string.notification_settings),&#10;                style = MaterialTheme.typography.headlineMedium,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;&#10;        // Master notification toggle&#10;        Card(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;        ) {&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(16.dp),&#10;                verticalArrangement = Arrangement.spacedBy(8.dp)&#10;            ) {&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.SpaceBetween,&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Column(modifier = Modifier.weight(1f)) {&#10;                        Text(&#10;                            text = stringResource(R.string.enable_notifications),&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            fontWeight = FontWeight.SemiBold&#10;                        )&#10;                        Text(&#10;                            text = stringResource(R.string.enable_notifications_description),&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                        )&#10;                    }&#10;                    Switch(&#10;                        checked = notificationsEnabled,&#10;                        onCheckedChange = { enabled -&gt;&#10;                            scope.launch {&#10;                                notificationPreferencesManager.setNotificationsEnabled(enabled)&#10;                                if (enabled) {&#10;                                    notificationScheduler.schedulePeriodicNotifications()&#10;                                } else {&#10;                                    notificationScheduler.cancelPeriodicNotifications()&#10;                                }&#10;                            }&#10;                        }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;&#10;        // Timetable notifications&#10;        Card(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)&#10;        ) {&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(16.dp),&#10;                verticalArrangement = Arrangement.spacedBy(8.dp)&#10;            ) {&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.SpaceBetween,&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Column(modifier = Modifier.weight(1f)) {&#10;                        Text(&#10;                            text = stringResource(R.string.timetable_changes),&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            fontWeight = FontWeight.Medium&#10;                        )&#10;                        Text(&#10;                            text = stringResource(R.string.timetable_changes_description),&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                        )&#10;                    }&#10;                    Switch(&#10;                        checked = timetableNotificationsEnabled,&#10;                        enabled = notificationsEnabled,&#10;                        onCheckedChange = { enabled -&gt;&#10;                            scope.launch {&#10;                                notificationPreferencesManager.setTimetableNotificationsEnabled(enabled)&#10;                            }&#10;                        }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;&#10;        // Grade notifications&#10;        Card(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)&#10;        ) {&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(16.dp),&#10;                verticalArrangement = Arrangement.spacedBy(8.dp)&#10;            ) {&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.SpaceBetween,&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Column(modifier = Modifier.weight(1f)) {&#10;                        Text(&#10;                            text = stringResource(R.string.new_grades),&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            fontWeight = FontWeight.Medium&#10;                        )&#10;                        Text(&#10;                            text = stringResource(R.string.new_grades_description),&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                        )&#10;                    }&#10;                    Switch(&#10;                        checked = gradeNotificationsEnabled,&#10;                        enabled = notificationsEnabled,&#10;                        onCheckedChange = { enabled -&gt;&#10;                            scope.launch {&#10;                                notificationPreferencesManager.setGradeNotificationsEnabled(enabled)&#10;                            }&#10;                        }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;&#10;        // Class reminder notifications&#10;        Card(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)&#10;        ) {&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(16.dp),&#10;                verticalArrangement = Arrangement.spacedBy(12.dp)&#10;            ) {&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.SpaceBetween,&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Column(modifier = Modifier.weight(1f)) {&#10;                        Text(&#10;                            text = stringResource(R.string.class_reminders),&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            fontWeight = FontWeight.Medium&#10;                        )&#10;                        Text(&#10;                            text = stringResource(R.string.class_reminders_description),&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                        )&#10;                    }&#10;                    Switch(&#10;                        checked = classReminderNotificationsEnabled,&#10;                        enabled = notificationsEnabled,&#10;                        onCheckedChange = { enabled -&gt;&#10;                            scope.launch {&#10;                                notificationPreferencesManager.setClassReminderNotificationsEnabled(enabled)&#10;                                if (enabled) {&#10;                                    notificationScheduler.scheduleClassReminders()&#10;                                } else {&#10;                                    notificationScheduler.cancelClassReminders()&#10;                                }&#10;                            }&#10;                        }&#10;                    )&#10;                }&#10;&#10;                // Time picker for reminder timing&#10;                if (classReminderNotificationsEnabled &amp;&amp; notificationsEnabled) {&#10;                    var showDropdown by remember { mutableStateOf(false) }&#10;                    val timeOptions = listOf(5, 10, 15, 30, 45, 60, 90, 120)&#10;&#10;                    Card(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .clickable { showDropdown = true },&#10;                        colors = CardDefaults.cardColors(&#10;                            containerColor = MaterialTheme.colorScheme.surfaceVariant&#10;                        )&#10;                    ) {&#10;                        Row(&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .padding(12.dp),&#10;                            horizontalArrangement = Arrangement.SpaceBetween,&#10;                            verticalAlignment = Alignment.CenterVertically&#10;                        ) {&#10;                            Row(&#10;                                verticalAlignment = Alignment.CenterVertically,&#10;                                horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;                            ) {&#10;                                Icon(&#10;                                    imageVector = Icons.Default.AccessTime,&#10;                                    contentDescription = null,&#10;                                    tint = MaterialTheme.colorScheme.onSurfaceVariant&#10;                                )&#10;                                Column {&#10;                                    Text(&#10;                                        text = stringResource(R.string.reminder_time),&#10;                                        style = MaterialTheme.typography.bodyMedium,&#10;                                        fontWeight = FontWeight.Medium&#10;                                    )&#10;                                    Text(&#10;                                        text = stringResource(R.string.minutes_before_class, classReminderTimeMinutes),&#10;                                        style = MaterialTheme.typography.bodySmall,&#10;                                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                                    )&#10;                                }&#10;                            }&#10;                        }&#10;&#10;                        DropdownMenu(&#10;                            expanded = showDropdown,&#10;                            onDismissRequest = { showDropdown = false }&#10;                        ) {&#10;                            timeOptions.forEach { minutes -&gt;&#10;                                DropdownMenuItem(&#10;                                    text = {&#10;                                        Text(&#10;                                            text = if (minutes == 1) stringResource(R.string.one_minute) else stringResource(R.string.x_minutes, minutes),&#10;                                            color = if (minutes == classReminderTimeMinutes)&#10;                                                MaterialTheme.colorScheme.primary&#10;                                            else MaterialTheme.colorScheme.onSurface&#10;                                        )&#10;                                    },&#10;                                    onClick = {&#10;                                        scope.launch {&#10;                                            notificationPreferencesManager.setClassReminderTimeMinutes(minutes)&#10;                                            notificationScheduler.scheduleClassReminders() // Reschedule with new time&#10;                                        }&#10;                                        showDropdown = false&#10;                                    }&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        // Demo notification test buttons (only show in demo mode)&#10;        if (isDemoMode) {&#10;            Card(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                elevation = CardDefaults.cardElevation(defaultElevation = 4.dp),&#10;                colors = CardDefaults.cardColors(&#10;                    containerColor = MaterialTheme.colorScheme.tertiaryContainer&#10;                )&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(16.dp),&#10;                    verticalArrangement = Arrangement.spacedBy(12.dp)&#10;                ) {&#10;                    Row(&#10;                        verticalAlignment = Alignment.CenterVertically,&#10;                        horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Notifications,&#10;                            contentDescription = null,&#10;                            tint = MaterialTheme.colorScheme.onTertiaryContainer&#10;                        )&#10;                        Text(&#10;                            text = stringResource(R.string.demo_mode_test_notifications),&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            fontWeight = FontWeight.SemiBold,&#10;                            color = MaterialTheme.colorScheme.onTertiaryContainer&#10;                        )&#10;                    }&#10;&#10;                    Text(&#10;                        text = stringResource(R.string.test_notifications_description),&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        color = MaterialTheme.colorScheme.onTertiaryContainer.copy(alpha = 0.8f)&#10;                    )&#10;&#10;                    // Test Timetable Change Notification Button&#10;                    Button(&#10;                        onClick = {&#10;                            val notificationManager = DHBWNotificationManager(context)&#10;                            val demoChanges = listOf(&#10;                                &quot;Software Engineering moved to room HOR-120&quot;,&#10;                                &quot;Database Systems time changed to 10:00-11:30&quot;&#10;                            )&#10;                            notificationManager.showTimetableChangeNotification(demoChanges)&#10;                        },&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        colors = ButtonDefaults.buttonColors(&#10;                            containerColor = MaterialTheme.colorScheme.primary&#10;                        )&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.DateRange,&#10;                            contentDescription = null,&#10;                            modifier = Modifier.padding(end = 8.dp)&#10;                        )&#10;                        Text(stringResource(R.string.test_timetable_change))&#10;                    }&#10;&#10;                    // Test Grade Change Notification Button&#10;                    Button(&#10;                        onClick = {&#10;                            val notificationManager = DHBWNotificationManager(context)&#10;                            val demoGrades = listOf(&#10;                                &quot;New grade available: Software Engineering - 1.3&quot;,&#10;                                &quot;New grade available: Database Systems - 1.7&quot;&#10;                            )&#10;                            notificationManager.showGradeChangeNotification(demoGrades)&#10;                        },&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        colors = ButtonDefaults.buttonColors(&#10;                            containerColor = MaterialTheme.colorScheme.secondary&#10;                        )&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Star,&#10;                            contentDescription = null,&#10;                            modifier = Modifier.padding(end = 8.dp)&#10;                        )&#10;                        Text(stringResource(R.string.test_grade_change))&#10;                    }&#10;&#10;                    // Test Class Reminder Notification Button&#10;                    Button(&#10;                        onClick = {&#10;                            val notificationManager = DHBWNotificationManager(context)&#10;                            val reminderText = &quot;Software Engineering starts in 30 minutes in room HOR-120&quot;&#10;                            notificationManager.showClassReminderNotification(reminderText, 3001)&#10;                        },&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        colors = ButtonDefaults.buttonColors(&#10;                            containerColor = MaterialTheme.colorScheme.tertiary&#10;                        )&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.AccessTime,&#10;                            contentDescription = null,&#10;                            modifier = Modifier.padding(end = 8.dp)&#10;                        )&#10;                        Text(stringResource(R.string.test_class_reminder))&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        // Information card&#10;        Card(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            colors = CardDefaults.cardColors(&#10;                containerColor = MaterialTheme.colorScheme.surfaceVariant&#10;            )&#10;        ) {&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(16.dp),&#10;                verticalArrangement = Arrangement.spacedBy(8.dp)&#10;            ) {&#10;                Text(&#10;                    text = stringResource(R.string.how_it_works),&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.SemiBold,&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                )&#10;                Text(&#10;                    text = stringResource(R.string.how_it_works_description),&#10;                    style = MaterialTheme.typography.bodyMedium,&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                )&#10;            }&#10;        }&#10;&#10;        // Logout Button&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;        Button(&#10;            onClick = {&#10;                scope.launch {&#10;                    credentialManager.logout()&#10;                    onLogout()&#10;                }&#10;            },&#10;            modifier = Modifier.fillMaxWidth(),&#10;            colors = ButtonDefaults.buttonColors(&#10;                containerColor = MaterialTheme.colorScheme.errorContainer,&#10;                contentColor = MaterialTheme.colorScheme.onErrorContainer&#10;            )&#10;        ) {&#10;            Icon(&#10;                imageVector = Icons.AutoMirrored.Filled.ExitToApp,&#10;                contentDescription = null,&#10;                modifier = Modifier.padding(end = 8.dp)&#10;            )&#10;            Text(stringResource(R.string.logout))&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="/*&#10; * SPDX-FileCopyrightText: 2024 Joinside &lt;suitor-fall-life@duck.com&gt;&#10; *&#10; * SPDX-License-Identifier: AGPL-3.0-or-later&#10; */&#10;&#10;package de.fampopprol.dhbwhorb.ui.screen&#10;&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.unit.dp&#10;import de.fampopprol.dhbwhorb.data.dualis.network.DualisService&#10;import de.fampopprol.dhbwhorb.data.notification.NotificationPreferencesManager&#10;import de.fampopprol.dhbwhorb.data.notification.NotificationScheduler&#10;import de.fampopprol.dhbwhorb.data.security.CredentialManager&#10;import de.fampopprol.dhbwhorb.data.theme.ThemePreferencesManager&#10;import de.fampopprol.dhbwhorb.ui.screen.notificationSettingsScreen.ClassReminderSettingsSection&#10;import de.fampopprol.dhbwhorb.ui.screen.notificationSettingsScreen.DemoModeTestSection&#10;import de.fampopprol.dhbwhorb.ui.screen.notificationSettingsScreen.GeneralSettingsSection&#10;import de.fampopprol.dhbwhorb.ui.screen.notificationSettingsScreen.LogoutSection&#10;import de.fampopprol.dhbwhorb.ui.screen.notificationSettingsScreen.NotificationSettingsSection&#10;&#10;@Composable&#10;fun NotificationSettingsScreen(&#10;    dualisService: DualisService,&#10;    notificationScheduler: NotificationScheduler,&#10;    notificationPreferencesManager: NotificationPreferencesManager,&#10;    credentialManager: CredentialManager,&#10;    onLogout: () -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    val context = LocalContext.current&#10;    val themePreferencesManager = remember { ThemePreferencesManager(context) }&#10;&#10;    val notificationsEnabled by notificationPreferencesManager.notificationsEnabled.collectAsState(initial = true)&#10;    val isDemoMode = dualisService.isDemoMode()&#10;&#10;    Column(&#10;        modifier = modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp)&#10;            .verticalScroll(rememberScrollState()),&#10;        verticalArrangement = Arrangement.spacedBy(16.dp)&#10;    ) {&#10;        // General Settings Section&#10;        GeneralSettingsSection(&#10;            themePreferencesManager = themePreferencesManager&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        // Notification Settings Section&#10;        NotificationSettingsSection(&#10;            notificationPreferencesManager = notificationPreferencesManager,&#10;            notificationScheduler = notificationScheduler&#10;        )&#10;&#10;        // Class Reminder Settings Section&#10;        ClassReminderSettingsSection(&#10;            notificationPreferencesManager = notificationPreferencesManager,&#10;            notificationScheduler = notificationScheduler,&#10;            notificationsEnabled = notificationsEnabled&#10;        )&#10;&#10;        // Demo Mode Test Section (only show in demo mode)&#10;        if (isDemoMode) {&#10;            DemoModeTestSection()&#10;        }&#10;&#10;        // Logout Section&#10;        LogoutSection(&#10;            credentialManager = credentialManager,&#10;            onLogout = onLogout&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/de/fampopprol/dhbwhorb/ui/screen/gradesScreen/GradesAuthManager.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/de/fampopprol/dhbwhorb/ui/screen/gradesScreen/GradesAuthManager.kt" />
              <option name="updatedContent" value="/*&#10; * SPDX-FileCopyrightText: 2024 Joinside &lt;suitor-fall-life@duck.com&gt;&#10; *&#10; * SPDX-License-Identifier: AGPL-3.0-or-later&#10; */&#10;&#10;package de.fampopprol.dhbwhorb.ui.screen.gradesScreen&#10;&#10;import android.util.Log&#10;import de.fampopprol.dhbwhorb.data.dualis.network.DualisService&#10;import de.fampopprol.dhbwhorb.data.security.CredentialManager&#10;import kotlinx.coroutines.CoroutineScope&#10;import kotlinx.coroutines.launch&#10;&#10;/**&#10; * Handles authentication logic for the grades screen&#10; */&#10;class GradesAuthManager(&#10;    private val dualisService: DualisService,&#10;    private val credentialManager: CredentialManager?,&#10;    private val scope: CoroutineScope&#10;) {&#10;    &#10;    enum class AuthResult {&#10;        SUCCESS,&#10;        FAILED,&#10;        NO_CREDENTIALS,&#10;        NO_STORED_CREDENTIALS&#10;    }&#10;&#10;    /**&#10;     * Ensures the user is authenticated before proceeding with data operations&#10;     * @param onResult Callback with the authentication result&#10;     */&#10;    fun ensureAuthentication(onResult: (AuthResult) -&gt; Unit) {&#10;        // If already authenticated, return success immediately&#10;        if (dualisService.isAuthenticated()) {&#10;            onResult(AuthResult.SUCCESS)&#10;            return&#10;        }&#10;&#10;        // Check if we have stored credentials to re-authenticate&#10;        if (credentialManager == null) {&#10;            onResult(AuthResult.NO_CREDENTIALS)&#10;            return&#10;        }&#10;&#10;        scope.launch {&#10;            val hasStoredCredentials = credentialManager.hasStoredCredentialsBlocking()&#10;            if (hasStoredCredentials) {&#10;                val username = credentialManager.getUsernameBlocking()&#10;                val password = credentialManager.getPassword()&#10;&#10;                if (username != null &amp;&amp; password != null) {&#10;                    Log.d(&quot;GradesAuthManager&quot;, &quot;Re-authenticating with stored credentials&quot;)&#10;                    dualisService.login(username, password) { result -&gt;&#10;                        if (result != null) {&#10;                            Log.d(&quot;GradesAuthManager&quot;, &quot;Re-authentication successful&quot;)&#10;                            onResult(AuthResult.SUCCESS)&#10;                        } else {&#10;                            Log.e(&quot;GradesAuthManager&quot;, &quot;Re-authentication failed&quot;)&#10;                            onResult(AuthResult.FAILED)&#10;                        }&#10;                    }&#10;                } else {&#10;                    Log.e(&quot;GradesAuthManager&quot;, &quot;No valid stored credentials found&quot;)&#10;                    onResult(AuthResult.NO_STORED_CREDENTIALS)&#10;                }&#10;            } else {&#10;                Log.e(&quot;GradesAuthManager&quot;, &quot;No stored credentials available&quot;)&#10;                onResult(AuthResult.NO_STORED_CREDENTIALS)&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/de/fampopprol/dhbwhorb/ui/screen/notificationSettingsScreen/ClassReminderSettingsSection.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/de/fampopprol/dhbwhorb/ui/screen/notificationSettingsScreen/ClassReminderSettingsSection.kt" />
              <option name="updatedContent" value="/*&#10; * SPDX-FileCopyrightText: 2024 Joinside &lt;suitor-fall-life@duck.com&gt;&#10; *&#10; * SPDX-License-Identifier: AGPL-3.0-or-later&#10; */&#10;&#10;package de.fampopprol.dhbwhorb.ui.screen.notificationSettingsScreen&#10;&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.AccessTime&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.DropdownMenu&#10;import androidx.compose.material3.DropdownMenuItem&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Switch&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.rememberCoroutineScope&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import de.fampopprol.dhbwhorb.R&#10;import de.fampopprol.dhbwhorb.data.notification.NotificationPreferencesManager&#10;import de.fampopprol.dhbwhorb.data.notification.NotificationScheduler&#10;import kotlinx.coroutines.launch&#10;&#10;@Composable&#10;fun ClassReminderSettingsSection(&#10;    notificationPreferencesManager: NotificationPreferencesManager,&#10;    notificationScheduler: NotificationScheduler,&#10;    notificationsEnabled: Boolean,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    val scope = rememberCoroutineScope()&#10;    val classReminderNotificationsEnabled by notificationPreferencesManager.classReminderNotificationsEnabled.collectAsState(initial = false)&#10;    val classReminderTimeMinutes by notificationPreferencesManager.classReminderTimeMinutes.collectAsState(initial = 30)&#10;&#10;    Card(&#10;        modifier = modifier.fillMaxWidth(),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            verticalArrangement = Arrangement.spacedBy(12.dp)&#10;        ) {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Column(modifier = Modifier.weight(1f)) {&#10;                    Text(&#10;                        text = stringResource(R.string.class_reminders),&#10;                        style = MaterialTheme.typography.titleMedium,&#10;                        fontWeight = FontWeight.Medium&#10;                    )&#10;                    Text(&#10;                        text = stringResource(R.string.class_reminders_description),&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                }&#10;                Switch(&#10;                    checked = classReminderNotificationsEnabled,&#10;                    enabled = notificationsEnabled,&#10;                    onCheckedChange = { enabled -&gt;&#10;                        scope.launch {&#10;                            notificationPreferencesManager.setClassReminderNotificationsEnabled(enabled)&#10;                            if (enabled) {&#10;                                notificationScheduler.scheduleClassReminders()&#10;                            } else {&#10;                                notificationScheduler.cancelClassReminders()&#10;                            }&#10;                        }&#10;                    }&#10;                )&#10;            }&#10;&#10;            // Time picker for reminder timing&#10;            if (classReminderNotificationsEnabled &amp;&amp; notificationsEnabled) {&#10;                var showDropdown by remember { mutableStateOf(false) }&#10;                val timeOptions = listOf(5, 10, 15, 30, 45, 60, 90, 120)&#10;&#10;                Card(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .clickable { showDropdown = true },&#10;                    colors = CardDefaults.cardColors(&#10;                        containerColor = MaterialTheme.colorScheme.surfaceVariant&#10;                    )&#10;                ) {&#10;                    Row(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .padding(12.dp),&#10;                        horizontalArrangement = Arrangement.SpaceBetween,&#10;                        verticalAlignment = Alignment.CenterVertically&#10;                    ) {&#10;                        Row(&#10;                            verticalAlignment = Alignment.CenterVertically,&#10;                            horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.AccessTime,&#10;                                contentDescription = null,&#10;                                tint = MaterialTheme.colorScheme.onSurfaceVariant&#10;                            )&#10;                            Column {&#10;                                Text(&#10;                                    text = stringResource(R.string.reminder_time),&#10;                                    style = MaterialTheme.typography.bodyMedium,&#10;                                    fontWeight = FontWeight.Medium&#10;                                )&#10;                                Text(&#10;                                    text = stringResource(R.string.minutes_before_class, classReminderTimeMinutes),&#10;                                    style = MaterialTheme.typography.bodySmall,&#10;                                    color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                    DropdownMenu(&#10;                        expanded = showDropdown,&#10;                        onDismissRequest = { showDropdown = false }&#10;                    ) {&#10;                        timeOptions.forEach { minutes -&gt;&#10;                            DropdownMenuItem(&#10;                                text = {&#10;                                    Text(&#10;                                        text = if (minutes == 1) stringResource(R.string.one_minute) else stringResource(R.string.x_minutes, minutes),&#10;                                        color = if (minutes == classReminderTimeMinutes)&#10;                                            MaterialTheme.colorScheme.primary&#10;                                        else MaterialTheme.colorScheme.onSurface&#10;                                    )&#10;                                },&#10;                                onClick = {&#10;                                    scope.launch {&#10;                                        notificationPreferencesManager.setClassReminderTimeMinutes(minutes)&#10;                                        notificationScheduler.scheduleClassReminders() // Reschedule with new time&#10;                                    }&#10;                                    showDropdown = false&#10;                                }&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/de/fampopprol/dhbwhorb/ui/screen/notificationSettingsScreen/DemoModeTestSection.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/de/fampopprol/dhbwhorb/ui/screen/notificationSettingsScreen/DemoModeTestSection.kt" />
              <option name="updatedContent" value="/*&#10; * SPDX-FileCopyrightText: 2024 Joinside &lt;suitor-fall-life@duck.com&gt;&#10; *&#10; * SPDX-License-Identifier: AGPL-3.0-or-later&#10; */&#10;&#10;package de.fampopprol.dhbwhorb.ui.screen.notificationSettingsScreen&#10;&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.DateRange&#10;import androidx.compose.material.icons.filled.Notifications&#10;import androidx.compose.material.icons.filled.Star&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.ButtonDefaults&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import de.fampopprol.dhbwhorb.R&#10;import de.fampopprol.dhbwhorb.data.notification.DHBWNotificationManager&#10;&#10;@Composable&#10;fun DemoModeTestSection(&#10;    modifier: Modifier = Modifier&#10;) {&#10;    val context = LocalContext.current&#10;&#10;    Card(&#10;        modifier = modifier.fillMaxWidth(),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = MaterialTheme.colorScheme.tertiaryContainer&#10;        )&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            verticalArrangement = Arrangement.spacedBy(12.dp)&#10;        ) {&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.Default.Notifications,&#10;                    contentDescription = null,&#10;                    tint = MaterialTheme.colorScheme.onTertiaryContainer&#10;                )&#10;                Text(&#10;                    text = stringResource(R.string.demo_mode_test_notifications),&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.SemiBold,&#10;                    color = MaterialTheme.colorScheme.onTertiaryContainer&#10;                )&#10;            }&#10;&#10;            Text(&#10;                text = stringResource(R.string.test_notifications_description),&#10;                style = MaterialTheme.typography.bodyMedium,&#10;                color = MaterialTheme.colorScheme.onTertiaryContainer.copy(alpha = 0.8f)&#10;            )&#10;&#10;            // Test Timetable Change Notification Button&#10;            Button(&#10;                onClick = {&#10;                    val notificationManager = DHBWNotificationManager(context)&#10;                    val demoChanges = listOf(&#10;                        &quot;Software Engineering moved to room HOR-120&quot;,&#10;                        &quot;Database Systems time changed to 10:00-11:30&quot;&#10;                    )&#10;                    notificationManager.showTimetableChangeNotification(demoChanges)&#10;                },&#10;                modifier = Modifier.fillMaxWidth(),&#10;                colors = ButtonDefaults.buttonColors(&#10;                    containerColor = MaterialTheme.colorScheme.primary&#10;                )&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.Default.DateRange,&#10;                    contentDescription = null,&#10;                    modifier = Modifier.padding(end = 8.dp)&#10;                )&#10;                Text(stringResource(R.string.test_timetable_change))&#10;            }&#10;&#10;            // Test Grade Change Notification Button&#10;            Button(&#10;                onClick = {&#10;                    val notificationManager = DHBWNotificationManager(context)&#10;                    val demoGrades = listOf(&#10;                        &quot;New grade available: Software Engineering - 1.3&quot;,&#10;                        &quot;New grade available: Database Systems - 1.7&quot;&#10;                    )&#10;                    notificationManager.showGradeChangeNotification(demoGrades)&#10;                },&#10;                modifier = Modifier.fillMaxWidth(),&#10;                colors = ButtonDefaults.buttonColors(&#10;                    containerColor = MaterialTheme.colorScheme.secondary&#10;                )&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.Default.Star,&#10;                    contentDescription = null,&#10;                    modifier = Modifier.padding(end = 8.dp)&#10;                )&#10;                Text(stringResource(R.string.test_grade_change))&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/de/fampopprol/dhbwhorb/ui/screen/notificationSettingsScreen/GeneralSettingsSection.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/de/fampopprol/dhbwhorb/ui/screen/notificationSettingsScreen/GeneralSettingsSection.kt" />
              <option name="updatedContent" value="/*&#10; * SPDX-FileCopyrightText: 2024 Joinside &lt;suitor-fall-life@duck.com&gt;&#10; *&#10; * SPDX-License-Identifier: AGPL-3.0-or-later&#10; */&#10;&#10;package de.fampopprol.dhbwhorb.ui.screen.notificationSettingsScreen&#10;&#10;import android.os.Build&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.DarkMode&#10;import androidx.compose.material.icons.filled.LightMode&#10;import androidx.compose.material.icons.filled.Palette&#10;import androidx.compose.material.icons.filled.Settings&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Switch&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.rememberCoroutineScope&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import de.fampopprol.dhbwhorb.R&#10;import de.fampopprol.dhbwhorb.data.theme.ThemePreferencesManager&#10;import de.fampopprol.dhbwhorb.ui.theme.ThemeMode&#10;import kotlinx.coroutines.launch&#10;&#10;@Composable&#10;fun GeneralSettingsSection(&#10;    themePreferencesManager: ThemePreferencesManager,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    val scope = rememberCoroutineScope()&#10;    val materialYouEnabled by themePreferencesManager.materialYouEnabled.collectAsState(initial = true)&#10;    val themeMode by themePreferencesManager.themeMode.collectAsState(initial = ThemeMode.SYSTEM)&#10;&#10;    Column(&#10;        modifier = modifier,&#10;        verticalArrangement = Arrangement.spacedBy(16.dp)&#10;    ) {&#10;        // General Settings Header&#10;        Row(&#10;            verticalAlignment = Alignment.CenterVertically,&#10;            horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;        ) {&#10;            Icon(&#10;                imageVector = Icons.Default.Settings,&#10;                contentDescription = null,&#10;                tint = MaterialTheme.colorScheme.primary&#10;            )&#10;            Text(&#10;                text = stringResource(R.string.general_settings),&#10;                style = MaterialTheme.typography.headlineMedium,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;&#10;        // Material You Theming Toggle (only show on Android 12+)&#10;        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.S) {&#10;            Card(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(16.dp),&#10;                    verticalArrangement = Arrangement.spacedBy(8.dp)&#10;                ) {&#10;                    Row(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        horizontalArrangement = Arrangement.SpaceBetween,&#10;                        verticalAlignment = Alignment.CenterVertically&#10;                    ) {&#10;                        Column(modifier = Modifier.weight(1f)) {&#10;                            Text(&#10;                                text = stringResource(R.string.material_you_theming),&#10;                                style = MaterialTheme.typography.titleMedium,&#10;                                fontWeight = FontWeight.SemiBold&#10;                            )&#10;                            Text(&#10;                                text = stringResource(R.string.material_you_description),&#10;                                style = MaterialTheme.typography.bodyMedium,&#10;                                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                            )&#10;                        }&#10;                        Switch(&#10;                            checked = materialYouEnabled,&#10;                            onCheckedChange = { enabled -&gt;&#10;                                scope.launch {&#10;                                    themePreferencesManager.setMaterialYouEnabled(enabled)&#10;                                }&#10;                            }&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        // Theme Mode Selection&#10;        Card(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)&#10;        ) {&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(16.dp),&#10;                verticalArrangement = Arrangement.spacedBy(12.dp)&#10;            ) {&#10;                Row(&#10;                    verticalAlignment = Alignment.CenterVertically,&#10;                    horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;                ) {&#10;                    Icon(&#10;                        imageVector = when (themeMode) {&#10;                            ThemeMode.LIGHT -&gt; Icons.Default.LightMode&#10;                            ThemeMode.DARK -&gt; Icons.Default.DarkMode&#10;                            ThemeMode.SYSTEM -&gt; Icons.Default.Palette&#10;                        },&#10;                        contentDescription = null,&#10;                        tint = MaterialTheme.colorScheme.primary&#10;                    )&#10;                    Column(modifier = Modifier.weight(1f)) {&#10;                        Text(&#10;                            text = stringResource(R.string.theme_mode),&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            fontWeight = FontWeight.SemiBold&#10;                        )&#10;                        Text(&#10;                            text = stringResource(R.string.theme_mode_description),&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                        )&#10;                    }&#10;                }&#10;&#10;                // Theme mode selection buttons&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;                ) {&#10;                    ThemeMode.entries.forEach { mode -&gt;&#10;                        val isSelected = themeMode == mode&#10;                        Card(&#10;                            modifier = Modifier&#10;                                .weight(1f)&#10;                                .clickable {&#10;                                    scope.launch {&#10;                                        themePreferencesManager.setThemeMode(mode)&#10;                                    }&#10;                                },&#10;                            colors = CardDefaults.cardColors(&#10;                                containerColor = if (isSelected)&#10;                                    MaterialTheme.colorScheme.primaryContainer&#10;                                else&#10;                                    MaterialTheme.colorScheme.surfaceVariant&#10;                            )&#10;                        ) {&#10;                            Column(&#10;                                modifier = Modifier&#10;                                    .fillMaxWidth()&#10;                                    .padding(12.dp),&#10;                                horizontalAlignment = Alignment.CenterHorizontally,&#10;                                verticalArrangement = Arrangement.spacedBy(4.dp)&#10;                            ) {&#10;                                Icon(&#10;                                    imageVector = when (mode) {&#10;                                        ThemeMode.LIGHT -&gt; Icons.Default.LightMode&#10;                                        ThemeMode.DARK -&gt; Icons.Default.DarkMode&#10;                                        ThemeMode.SYSTEM -&gt; Icons.Default.Palette&#10;                                    },&#10;                                    contentDescription = null,&#10;                                    tint = if (isSelected)&#10;                                        MaterialTheme.colorScheme.onPrimaryContainer&#10;                                    else&#10;                                        MaterialTheme.colorScheme.onSurfaceVariant&#10;                                )&#10;                                Text(&#10;                                    text = stringResource(when (mode) {&#10;                                        ThemeMode.LIGHT -&gt; R.string.theme_light&#10;                                        ThemeMode.DARK -&gt; R.string.theme_dark&#10;                                        ThemeMode.SYSTEM -&gt; R.string.theme_system&#10;                                    }),&#10;                                    style = MaterialTheme.typography.bodySmall,&#10;                                    fontWeight = if (isSelected) FontWeight.SemiBold else FontWeight.Normal,&#10;                                    color = if (isSelected)&#10;                                        MaterialTheme.colorScheme.onPrimaryContainer&#10;                                    else&#10;                                        MaterialTheme.colorScheme.onSurfaceVariant&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/de/fampopprol/dhbwhorb/ui/screen/notificationSettingsScreen/LogoutSection.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/de/fampopprol/dhbwhorb/ui/screen/notificationSettingsScreen/LogoutSection.kt" />
              <option name="originalContent" value="/*&#10; * SPDX-FileCopyrightText: 2024 Joinside &lt;suitor-fall-life@duck.com&gt;&#10; *&#10; * SPDX-License-Identifier: AGPL-3.0-or-later&#10; */&#10;&#10;package de.fampopprol.dhbwhorb.ui.screen.notificationSettingsScreen&#10;&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ExitToApp&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.ButtonDefaults&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.rememberCoroutineScope&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import de.fampopprol.dhbwhorb.R&#10;import de.fampopprol.dhbwhorb.data.security.CredentialManager&#10;import kotlinx.coroutines.launch&#10;&#10;@Composable&#10;fun LogoutSection(&#10;    credentialManager: CredentialManager,&#10;    onLogout: () -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    val scope = rememberCoroutineScope()&#10;&#10;    Card(&#10;        modifier = modifier.fillMaxWidth(),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = MaterialTheme.colorScheme.errorContainer&#10;        )&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            verticalArrangement = Arrangement.spacedBy(12.dp)&#10;        ) {&#10;            Text(&#10;                text = stringResource(R.string.general_settings), // Using existing string resource&#10;                style = MaterialTheme.typography.titleMedium,&#10;                fontWeight = FontWeight.SemiBold,&#10;                color = MaterialTheme.colorScheme.onErrorContainer&#10;            )&#10;&#10;            Text(&#10;                text = stringResource(R.string.enable_notifications_description), // Using existing string resource as placeholder&#10;                style = MaterialTheme.typography.bodyMedium,&#10;                color = MaterialTheme.colorScheme.onErrorContainer.copy(alpha = 0.8f)&#10;            )&#10;&#10;            Button(&#10;                onClick = {&#10;                    scope.launch {&#10;                        credentialManager.clearStoredCredentials() // Using correct method name&#10;                        onLogout()&#10;                    }&#10;                },&#10;                modifier = Modifier.fillMaxWidth(),&#10;                colors = ButtonDefaults.buttonColors(&#10;                    containerColor = MaterialTheme.colorScheme.error&#10;                )&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.AutoMirrored.Filled.ExitToApp,&#10;                    contentDescription = null,&#10;                    modifier = Modifier.padding(end = 8.dp)&#10;                )&#10;                Text(&#10;                    text = stringResource(R.string.general_settings), // Using existing string resource as placeholder&#10;                    color = MaterialTheme.colorScheme.onError&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="/*&#10; * SPDX-FileCopyrightText: 2024 Joinside &lt;suitor-fall-life@duck.com&gt;&#10; *&#10; * SPDX-License-Identifier: AGPL-3.0-or-later&#10; */&#10;&#10;package de.fampopprol.dhbwhorb.ui.screen.notificationSettingsScreen&#10;&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ExitToApp&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.ButtonDefaults&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.rememberCoroutineScope&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import de.fampopprol.dhbwhorb.R&#10;import de.fampopprol.dhbwhorb.data.security.CredentialManager&#10;import kotlinx.coroutines.launch&#10;&#10;@Composable&#10;fun LogoutSection(&#10;    credentialManager: CredentialManager,&#10;    onLogout: () -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    val scope = rememberCoroutineScope()&#10;&#10;    Card(&#10;        modifier = modifier.fillMaxWidth(),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = MaterialTheme.colorScheme.errorContainer&#10;        )&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            verticalArrangement = Arrangement.spacedBy(12.dp)&#10;        ) {&#10;            Text(&#10;                text = stringResource(R.string.general_settings), // Using existing string resource&#10;                style = MaterialTheme.typography.titleMedium,&#10;                fontWeight = FontWeight.SemiBold,&#10;                color = MaterialTheme.colorScheme.onErrorContainer&#10;            )&#10;&#10;            Text(&#10;                text = stringResource(R.string.enable_notifications_description), // Using existing string resource as placeholder&#10;                style = MaterialTheme.typography.bodyMedium,&#10;                color = MaterialTheme.colorScheme.onErrorContainer.copy(alpha = 0.8f)&#10;            )&#10;&#10;            Button(&#10;                onClick = {&#10;                    scope.launch {&#10;                        credentialManager.clearAllCredentials() // Using correct method name&#10;                        onLogout()&#10;                    }&#10;                },&#10;                modifier = Modifier.fillMaxWidth(),&#10;                colors = ButtonDefaults.buttonColors(&#10;                    containerColor = MaterialTheme.colorScheme.error&#10;                )&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.AutoMirrored.Filled.ExitToApp,&#10;                    contentDescription = null,&#10;                    modifier = Modifier.padding(end = 8.dp)&#10;                )&#10;                Text(&#10;                    text = stringResource(R.string.general_settings), // Using existing string resource as placeholder&#10;                    color = MaterialTheme.colorScheme.onError&#10;                )&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/de/fampopprol/dhbwhorb/ui/screen/notificationSettingsScreen/NotificationSettingsSection.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/de/fampopprol/dhbwhorb/ui/screen/notificationSettingsScreen/NotificationSettingsSection.kt" />
              <option name="updatedContent" value="/*&#10; * SPDX-FileCopyrightText: 2024 Joinside &lt;suitor-fall-life@duck.com&gt;&#10; *&#10; * SPDX-License-Identifier: AGPL-3.0-or-later&#10; */&#10;&#10;package de.fampopprol.dhbwhorb.ui.screen.notificationSettingsScreen&#10;&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Notifications&#10;import androidx.compose.material.icons.filled.NotificationsOff&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Switch&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.rememberCoroutineScope&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import de.fampopprol.dhbwhorb.R&#10;import de.fampopprol.dhbwhorb.data.notification.NotificationPreferencesManager&#10;import de.fampopprol.dhbwhorb.data.notification.NotificationScheduler&#10;import kotlinx.coroutines.launch&#10;&#10;@Composable&#10;fun NotificationSettingsSection(&#10;    notificationPreferencesManager: NotificationPreferencesManager,&#10;    notificationScheduler: NotificationScheduler,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    val scope = rememberCoroutineScope()&#10;    val notificationsEnabled by notificationPreferencesManager.notificationsEnabled.collectAsState(initial = true)&#10;    val timetableNotificationsEnabled by notificationPreferencesManager.timetableNotificationsEnabled.collectAsState(initial = true)&#10;    val gradeNotificationsEnabled by notificationPreferencesManager.gradeNotificationsEnabled.collectAsState(initial = true)&#10;&#10;    Column(&#10;        modifier = modifier,&#10;        verticalArrangement = Arrangement.spacedBy(16.dp)&#10;    ) {&#10;        // Notification Settings Header&#10;        Row(&#10;            verticalAlignment = Alignment.CenterVertically,&#10;            horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;        ) {&#10;            Icon(&#10;                imageVector = if (notificationsEnabled) Icons.Default.Notifications else Icons.Default.NotificationsOff,&#10;                contentDescription = null,&#10;                tint = MaterialTheme.colorScheme.primary&#10;            )&#10;            Text(&#10;                text = stringResource(R.string.notification_settings),&#10;                style = MaterialTheme.typography.headlineMedium,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;&#10;        // Master notification toggle&#10;        Card(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;        ) {&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(16.dp),&#10;                verticalArrangement = Arrangement.spacedBy(8.dp)&#10;            ) {&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.SpaceBetween,&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Column(modifier = Modifier.weight(1f)) {&#10;                        Text(&#10;                            text = stringResource(R.string.enable_notifications),&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            fontWeight = FontWeight.SemiBold&#10;                        )&#10;                        Text(&#10;                            text = stringResource(R.string.enable_notifications_description),&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                        )&#10;                    }&#10;                    Switch(&#10;                        checked = notificationsEnabled,&#10;                        onCheckedChange = { enabled -&gt;&#10;                            scope.launch {&#10;                                notificationPreferencesManager.setNotificationsEnabled(enabled)&#10;                                if (enabled) {&#10;                                    notificationScheduler.schedulePeriodicNotifications()&#10;                                } else {&#10;                                    notificationScheduler.cancelPeriodicNotifications()&#10;                                }&#10;                            }&#10;                        }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;&#10;        // Timetable notifications&#10;        Card(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)&#10;        ) {&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(16.dp),&#10;                verticalArrangement = Arrangement.spacedBy(8.dp)&#10;            ) {&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.SpaceBetween,&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Column(modifier = Modifier.weight(1f)) {&#10;                        Text(&#10;                            text = stringResource(R.string.timetable_changes),&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            fontWeight = FontWeight.Medium&#10;                        )&#10;                        Text(&#10;                            text = stringResource(R.string.timetable_changes_description),&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                        )&#10;                    }&#10;                    Switch(&#10;                        checked = timetableNotificationsEnabled,&#10;                        enabled = notificationsEnabled,&#10;                        onCheckedChange = { enabled -&gt;&#10;                            scope.launch {&#10;                                notificationPreferencesManager.setTimetableNotificationsEnabled(enabled)&#10;                            }&#10;                        }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;&#10;        // Grade notifications&#10;        Card(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)&#10;        ) {&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(16.dp),&#10;                verticalArrangement = Arrangement.spacedBy(8.dp)&#10;            ) {&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.SpaceBetween,&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Column(modifier = Modifier.weight(1f)) {&#10;                        Text(&#10;                            text = stringResource(R.string.new_grades),&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            fontWeight = FontWeight.Medium&#10;                        )&#10;                        Text(&#10;                            text = stringResource(R.string.new_grades_description),&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                        )&#10;                    }&#10;                    Switch(&#10;                        checked = gradeNotificationsEnabled,&#10;                        enabled = notificationsEnabled,&#10;                        onCheckedChange = { enabled -&gt;&#10;                            scope.launch {&#10;                                notificationPreferencesManager.setGradeNotificationsEnabled(enabled)&#10;                            }&#10;                        }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/de/fampopprol/dhbwhorb/ui/screen/settingsScreen/ClassReminderSettingsSection.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/de/fampopprol/dhbwhorb/ui/screen/settingsScreen/ClassReminderSettingsSection.kt" />
              <option name="originalContent" value="/*&#10; * SPDX-FileCopyrightText: 2024 Joinside &lt;suitor-fall-life@duck.com&gt;&#10; *&#10; * SPDX-License-Identifier: AGPL-3.0-or-later&#10; */&#10;&#10;package de.fampopprol.dhbwhorb.ui.screen.settingsScreen&#10;&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.AccessTime&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.DropdownMenu&#10;import androidx.compose.material3.DropdownMenuItem&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Switch&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.rememberCoroutineScope&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import de.fampopprol.dhbwhorb.R&#10;import de.fampopprol.dhbwhorb.data.notification.NotificationPreferencesManager&#10;import de.fampopprol.dhbwhorb.data.notification.NotificationScheduler&#10;import kotlinx.coroutines.launch&#10;&#10;@Composable&#10;fun ClassReminderSettingsSection(&#10;    notificationPreferencesManager: NotificationPreferencesManager,&#10;    notificationScheduler: NotificationScheduler,&#10;    notificationsEnabled: Boolean,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    val scope = rememberCoroutineScope()&#10;    val classReminderNotificationsEnabled by notificationPreferencesManager.classReminderNotificationsEnabled.collectAsState(initial = false)&#10;    val classReminderTimeMinutes by notificationPreferencesManager.classReminderTimeMinutes.collectAsState(initial = 30)&#10;&#10;    Card(&#10;        modifier = modifier.fillMaxWidth(),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            verticalArrangement = Arrangement.spacedBy(12.dp)&#10;        ) {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Column(modifier = Modifier.weight(1f)) {&#10;                    Text(&#10;                        text = stringResource(R.string.class_reminders),&#10;                        style = MaterialTheme.typography.titleMedium,&#10;                        fontWeight = FontWeight.Medium&#10;                    )&#10;                    Text(&#10;                        text = stringResource(R.string.class_reminders_description),&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                }&#10;                Switch(&#10;                    checked = classReminderNotificationsEnabled,&#10;                    enabled = notificationsEnabled,&#10;                    onCheckedChange = { enabled -&gt;&#10;                        scope.launch {&#10;                            notificationPreferencesManager.setClassReminderNotificationsEnabled(enabled)&#10;                            if (enabled) {&#10;                                notificationScheduler.scheduleClassReminders()&#10;                            } else {&#10;                                notificationScheduler.cancelClassReminders()&#10;                            }&#10;                        }&#10;                    }&#10;                )&#10;            }&#10;&#10;            // Time picker for reminder timing&#10;            if (classReminderNotificationsEnabled &amp;&amp; notificationsEnabled) {&#10;                var showDropdown by remember { mutableStateOf(false) }&#10;                val timeOptions = listOf(5, 10, 15, 30, 45, 60, 90, 120)&#10;&#10;                Card(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .clickable { showDropdown = true },&#10;                    colors = CardDefaults.cardColors(&#10;                        containerColor = MaterialTheme.colorScheme.surfaceVariant&#10;                    )&#10;                ) {&#10;                    Row(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .padding(12.dp),&#10;                        horizontalArrangement = Arrangement.SpaceBetween,&#10;                        verticalAlignment = Alignment.CenterVertically&#10;                    ) {&#10;                        Row(&#10;                            verticalAlignment = Alignment.CenterVertically,&#10;                            horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.AccessTime,&#10;                                contentDescription = null,&#10;                                tint = MaterialTheme.colorScheme.onSurfaceVariant&#10;                            )&#10;                            Column {&#10;                                Text(&#10;                                    text = stringResource(R.string.reminder_time),&#10;                                    style = MaterialTheme.typography.bodyMedium,&#10;                                    fontWeight = FontWeight.Medium&#10;                                )&#10;                                Text(&#10;                                    text = stringResource(R.string.minutes_before_class, classReminderTimeMinutes),&#10;                                    style = MaterialTheme.typography.bodySmall,&#10;                                    color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                    DropdownMenu(&#10;                        expanded = showDropdown,&#10;                        onDismissRequest = { showDropdown = false }&#10;                    ) {&#10;                        timeOptions.forEach { minutes -&gt;&#10;                            DropdownMenuItem(&#10;                                text = {&#10;                                    Text(&#10;                                        text = if (minutes == 1) stringResource(R.string.one_minute) else stringResource(R.string.x_minutes, minutes),&#10;                                        color = if (minutes == classReminderTimeMinutes)&#10;                                            MaterialTheme.colorScheme.primary&#10;                                        else MaterialTheme.colorScheme.onSurface&#10;                                    )&#10;                                },&#10;                                onClick = {&#10;                                    scope.launch {&#10;                                        notificationPreferencesManager.setClassReminderTimeMinutes(minutes)&#10;                                        notificationScheduler.scheduleClassReminders() // Reschedule with new time&#10;                                    }&#10;                                    showDropdown = false&#10;                                }&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="/*&#10; * SPDX-FileCopyrightText: 2024 Joinside &lt;suitor-fall-life@duck.com&gt;&#10; *&#10; * SPDX-License-Identifier: AGPL-3.0-or-later&#10; */&#10;&#10;package de.fampopprol.dhbwhorb.ui.screen.settingsScreen&#10;&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;import de.fampopprol.dhbwhorb.data.notification.NotificationPreferencesManager&#10;import de.fampopprol.dhbwhorb.data.notification.NotificationScheduler&#10;import de.fampopprol.dhbwhorb.ui.screen.settingsScreen.classReminderSection.ClassReminderTimePicker&#10;import de.fampopprol.dhbwhorb.ui.screen.settingsScreen.classReminderSection.ClassReminderToggle&#10;&#10;@Composable&#10;fun ClassReminderSettingsSection(&#10;    notificationPreferencesManager: NotificationPreferencesManager,&#10;    notificationScheduler: NotificationScheduler,&#10;    notificationsEnabled: Boolean,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    val classReminderNotificationsEnabled by notificationPreferencesManager.classReminderNotificationsEnabled.collectAsState(initial = false)&#10;    val classReminderTimeMinutes by notificationPreferencesManager.classReminderTimeMinutes.collectAsState(initial = 30)&#10;&#10;    Card(&#10;        modifier = modifier.fillMaxWidth(),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            verticalArrangement = Arrangement.spacedBy(12.dp)&#10;        ) {&#10;            ClassReminderToggle(&#10;                notificationPreferencesManager = notificationPreferencesManager,&#10;                notificationScheduler = notificationScheduler,&#10;                classReminderNotificationsEnabled = classReminderNotificationsEnabled,&#10;                notificationsEnabled = notificationsEnabled&#10;            )&#10;&#10;            // Show time picker only when reminders are enabled and notifications are allowed&#10;            if (classReminderNotificationsEnabled &amp;&amp; notificationsEnabled) {&#10;                ClassReminderTimePicker(&#10;                    notificationPreferencesManager = notificationPreferencesManager,&#10;                    notificationScheduler = notificationScheduler,&#10;                    classReminderTimeMinutes = classReminderTimeMinutes&#10;                )&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/de/fampopprol/dhbwhorb/ui/screen/settingsScreen/GeneralSettingsSection.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/de/fampopprol/dhbwhorb/ui/screen/settingsScreen/GeneralSettingsSection.kt" />
              <option name="originalContent" value="/*&#10; * SPDX-FileCopyrightText: 2024 Joinside &lt;suitor-fall-life@duck.com&gt;&#10; *&#10; * SPDX-License-Identifier: AGPL-3.0-or-later&#10; */&#10;&#10;package de.fampopprol.dhbwhorb.ui.screen.settingsScreen&#10;&#10;import android.os.Build&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.DarkMode&#10;import androidx.compose.material.icons.filled.LightMode&#10;import androidx.compose.material.icons.filled.Palette&#10;import androidx.compose.material.icons.filled.Settings&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Switch&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.rememberCoroutineScope&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import de.fampopprol.dhbwhorb.R&#10;import de.fampopprol.dhbwhorb.data.theme.ThemePreferencesManager&#10;import de.fampopprol.dhbwhorb.ui.theme.ThemeMode&#10;import kotlinx.coroutines.launch&#10;&#10;@Composable&#10;fun GeneralSettingsSection(&#10;    themePreferencesManager: ThemePreferencesManager,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    val scope = rememberCoroutineScope()&#10;    val materialYouEnabled by themePreferencesManager.materialYouEnabled.collectAsState(initial = true)&#10;    val themeMode by themePreferencesManager.themeMode.collectAsState(initial = ThemeMode.SYSTEM)&#10;&#10;    Column(&#10;        modifier = modifier,&#10;        verticalArrangement = Arrangement.spacedBy(16.dp)&#10;    ) {&#10;        // General Settings Header&#10;        Row(&#10;            verticalAlignment = Alignment.CenterVertically,&#10;            horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;        ) {&#10;            Icon(&#10;                imageVector = Icons.Default.Settings,&#10;                contentDescription = null,&#10;                tint = MaterialTheme.colorScheme.primary&#10;            )&#10;            Text(&#10;                text = stringResource(R.string.general_settings),&#10;                style = MaterialTheme.typography.headlineMedium,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;&#10;        // Material You Theming Toggle (only show on Android 12+)&#10;        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.S) {&#10;            Card(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(16.dp),&#10;                    verticalArrangement = Arrangement.spacedBy(8.dp)&#10;                ) {&#10;                    Row(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        horizontalArrangement = Arrangement.SpaceBetween,&#10;                        verticalAlignment = Alignment.CenterVertically&#10;                    ) {&#10;                        Column(modifier = Modifier.weight(1f)) {&#10;                            Text(&#10;                                text = stringResource(R.string.material_you_theming),&#10;                                style = MaterialTheme.typography.titleMedium,&#10;                                fontWeight = FontWeight.SemiBold&#10;                            )&#10;                            Text(&#10;                                text = stringResource(R.string.material_you_description),&#10;                                style = MaterialTheme.typography.bodyMedium,&#10;                                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                            )&#10;                        }&#10;                        Switch(&#10;                            checked = materialYouEnabled,&#10;                            onCheckedChange = { enabled -&gt;&#10;                                scope.launch {&#10;                                    themePreferencesManager.setMaterialYouEnabled(enabled)&#10;                                }&#10;                            }&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        // Theme Mode Selection&#10;        Card(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)&#10;        ) {&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(16.dp),&#10;                verticalArrangement = Arrangement.spacedBy(12.dp)&#10;            ) {&#10;                Row(&#10;                    verticalAlignment = Alignment.CenterVertically,&#10;                    horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;                ) {&#10;                    Icon(&#10;                        imageVector = when (themeMode) {&#10;                            ThemeMode.LIGHT -&gt; Icons.Default.LightMode&#10;                            ThemeMode.DARK -&gt; Icons.Default.DarkMode&#10;                            ThemeMode.SYSTEM -&gt; Icons.Default.Palette&#10;                        },&#10;                        contentDescription = null,&#10;                        tint = MaterialTheme.colorScheme.primary&#10;                    )&#10;                    Column(modifier = Modifier.weight(1f)) {&#10;                        Text(&#10;                            text = stringResource(R.string.theme_mode),&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            fontWeight = FontWeight.SemiBold&#10;                        )&#10;                        Text(&#10;                            text = stringResource(R.string.theme_mode_description),&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                        )&#10;                    }&#10;                }&#10;&#10;                // Theme mode selection buttons&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;                ) {&#10;                    ThemeMode.entries.forEach { mode -&gt;&#10;                        val isSelected = themeMode == mode&#10;                        Card(&#10;                            modifier = Modifier&#10;                                .weight(1f)&#10;                                .clickable {&#10;                                    scope.launch {&#10;                                        themePreferencesManager.setThemeMode(mode)&#10;                                    }&#10;                                },&#10;                            colors = CardDefaults.cardColors(&#10;                                containerColor = if (isSelected)&#10;                                    MaterialTheme.colorScheme.primaryContainer&#10;                                else&#10;                                    MaterialTheme.colorScheme.surfaceVariant&#10;                            )&#10;                        ) {&#10;                            Column(&#10;                                modifier = Modifier&#10;                                    .fillMaxWidth()&#10;                                    .padding(12.dp),&#10;                                horizontalAlignment = Alignment.CenterHorizontally,&#10;                                verticalArrangement = Arrangement.spacedBy(4.dp)&#10;                            ) {&#10;                                Icon(&#10;                                    imageVector = when (mode) {&#10;                                        ThemeMode.LIGHT -&gt; Icons.Default.LightMode&#10;                                        ThemeMode.DARK -&gt; Icons.Default.DarkMode&#10;                                        ThemeMode.SYSTEM -&gt; Icons.Default.Palette&#10;                                    },&#10;                                    contentDescription = null,&#10;                                    tint = if (isSelected)&#10;                                        MaterialTheme.colorScheme.onPrimaryContainer&#10;                                    else&#10;                                        MaterialTheme.colorScheme.onSurfaceVariant&#10;                                )&#10;                                Text(&#10;                                    text = stringResource(&#10;                                        when (mode) {&#10;                                            ThemeMode.LIGHT -&gt; R.string.theme_light&#10;                                            ThemeMode.DARK -&gt; R.string.theme_dark&#10;                                            ThemeMode.SYSTEM -&gt; R.string.theme_system&#10;                                        }&#10;                                    ),&#10;                                    style = MaterialTheme.typography.bodySmall,&#10;                                    fontWeight = if (isSelected) FontWeight.SemiBold else FontWeight.Normal,&#10;                                    color = if (isSelected)&#10;                                        MaterialTheme.colorScheme.onPrimaryContainer&#10;                                    else&#10;                                        MaterialTheme.colorScheme.onSurfaceVariant&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="/*&#10; * SPDX-FileCopyrightText: 2024 Joinside &lt;suitor-fall-life@duck.com&gt;&#10; *&#10; * SPDX-License-Identifier: AGPL-3.0-or-later&#10; */&#10;&#10;package de.fampopprol.dhbwhorb.ui.screen.settingsScreen&#10;&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;import de.fampopprol.dhbwhorb.data.theme.ThemePreferencesManager&#10;import de.fampopprol.dhbwhorb.ui.screen.settingsScreen.generalSettingsSection.GeneralSettingsHeader&#10;import de.fampopprol.dhbwhorb.ui.screen.settingsScreen.generalSettingsSection.MaterialYouToggle&#10;import de.fampopprol.dhbwhorb.ui.screen.settingsScreen.generalSettingsSection.ThemeModeSelector&#10;import de.fampopprol.dhbwhorb.ui.theme.ThemeMode&#10;&#10;@Composable&#10;fun GeneralSettingsSection(&#10;    themePreferencesManager: ThemePreferencesManager,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    val materialYouEnabled by themePreferencesManager.materialYouEnabled.collectAsState(initial = true)&#10;    val themeMode by themePreferencesManager.themeMode.collectAsState(initial = ThemeMode.SYSTEM)&#10;&#10;    Column(&#10;        modifier = modifier,&#10;        verticalArrangement = Arrangement.spacedBy(16.dp)&#10;    ) {&#10;        GeneralSettingsHeader()&#10;&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;&#10;        MaterialYouToggle(&#10;            themePreferencesManager = themePreferencesManager,&#10;            materialYouEnabled = materialYouEnabled&#10;        )&#10;&#10;        ThemeModeSelector(&#10;            themePreferencesManager = themePreferencesManager,&#10;            themeMode = themeMode&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/de/fampopprol/dhbwhorb/ui/screen/settingsScreen/classReminderSection/ClassReminderTimePicker.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/de/fampopprol/dhbwhorb/ui/screen/settingsScreen/classReminderSection/ClassReminderTimePicker.kt" />
              <option name="updatedContent" value="/*&#10; * SPDX-FileCopyrightText: 2024 Joinside &lt;suitor-fall-life@duck.com&gt;&#10; *&#10; * SPDX-License-Identifier: AGPL-3.0-or-later&#10; */&#10;&#10;package de.fampopprol.dhbwhorb.ui.screen.settingsScreen.classReminderSection&#10;&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.AccessTime&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.DropdownMenu&#10;import androidx.compose.material3.DropdownMenuItem&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.rememberCoroutineScope&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import de.fampopprol.dhbwhorb.R&#10;import de.fampopprol.dhbwhorb.data.notification.NotificationPreferencesManager&#10;import de.fampopprol.dhbwhorb.data.notification.NotificationScheduler&#10;import kotlinx.coroutines.launch&#10;&#10;@Composable&#10;fun ClassReminderTimePicker(&#10;    notificationPreferencesManager: NotificationPreferencesManager,&#10;    notificationScheduler: NotificationScheduler,&#10;    classReminderTimeMinutes: Int,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    val scope = rememberCoroutineScope()&#10;    var showDropdown by remember { mutableStateOf(false) }&#10;    val timeOptions = listOf(5, 10, 15, 30, 45, 60, 90, 120)&#10;&#10;    Card(&#10;        modifier = modifier&#10;            .fillMaxWidth()&#10;            .clickable { showDropdown = true },&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = MaterialTheme.colorScheme.surfaceVariant&#10;        )&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(12.dp),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.Default.AccessTime,&#10;                    contentDescription = null,&#10;                    tint = MaterialTheme.colorScheme.onSurfaceVariant&#10;                )&#10;                Column {&#10;                    Text(&#10;                        text = stringResource(R.string.reminder_time),&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        fontWeight = FontWeight.Medium&#10;                    )&#10;                    Text(&#10;                        text = stringResource(R.string.minutes_before_class, classReminderTimeMinutes),&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                }&#10;            }&#10;        }&#10;&#10;        DropdownMenu(&#10;            expanded = showDropdown,&#10;            onDismissRequest = { showDropdown = false }&#10;        ) {&#10;            timeOptions.forEach { minutes -&gt;&#10;                DropdownMenuItem(&#10;                    text = {&#10;                        Text(&#10;                            text = if (minutes == 1) stringResource(R.string.one_minute) else stringResource(R.string.x_minutes, minutes),&#10;                            color = if (minutes == classReminderTimeMinutes)&#10;                                MaterialTheme.colorScheme.primary&#10;                            else MaterialTheme.colorScheme.onSurface&#10;                        )&#10;                    },&#10;                    onClick = {&#10;                        scope.launch {&#10;                            notificationPreferencesManager.setClassReminderTimeMinutes(minutes)&#10;                            notificationScheduler.scheduleClassReminders() // Reschedule with new time&#10;                        }&#10;                        showDropdown = false&#10;                    }&#10;                )&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/de/fampopprol/dhbwhorb/ui/screen/settingsScreen/classReminderSection/ClassReminderToggle.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/de/fampopprol/dhbwhorb/ui/screen/settingsScreen/classReminderSection/ClassReminderToggle.kt" />
              <option name="updatedContent" value="/*&#10; * SPDX-FileCopyrightText: 2024 Joinside &lt;suitor-fall-life@duck.com&gt;&#10; *&#10; * SPDX-License-Identifier: AGPL-3.0-or-later&#10; */&#10;&#10;package de.fampopprol.dhbwhorb.ui.screen.settingsScreen.classReminderSection&#10;&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Switch&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.rememberCoroutineScope&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import de.fampopprol.dhbwhorb.R&#10;import de.fampopprol.dhbwhorb.data.notification.NotificationPreferencesManager&#10;import de.fampopprol.dhbwhorb.data.notification.NotificationScheduler&#10;import kotlinx.coroutines.launch&#10;&#10;@Composable&#10;fun ClassReminderToggle(&#10;    notificationPreferencesManager: NotificationPreferencesManager,&#10;    notificationScheduler: NotificationScheduler,&#10;    classReminderNotificationsEnabled: Boolean,&#10;    notificationsEnabled: Boolean,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    val scope = rememberCoroutineScope()&#10;&#10;    Row(&#10;        modifier = modifier.fillMaxWidth(),&#10;        horizontalArrangement = Arrangement.SpaceBetween,&#10;        verticalAlignment = Alignment.CenterVertically&#10;    ) {&#10;        Column(modifier = Modifier.weight(1f)) {&#10;            Text(&#10;                text = stringResource(R.string.class_reminders),&#10;                style = MaterialTheme.typography.titleMedium,&#10;                fontWeight = FontWeight.Medium&#10;            )&#10;            Text(&#10;                text = stringResource(R.string.class_reminders_description),&#10;                style = MaterialTheme.typography.bodyMedium,&#10;                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;            )&#10;        }&#10;        Switch(&#10;            checked = classReminderNotificationsEnabled,&#10;            enabled = notificationsEnabled,&#10;            onCheckedChange = { enabled -&gt;&#10;                scope.launch {&#10;                    notificationPreferencesManager.setClassReminderNotificationsEnabled(enabled)&#10;                    if (enabled) {&#10;                        notificationScheduler.scheduleClassReminders()&#10;                    } else {&#10;                        notificationScheduler.cancelClassReminders()&#10;                    }&#10;                }&#10;            }&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/de/fampopprol/dhbwhorb/ui/screen/settingsScreen/generalSettingsSection/GeneralSettingsHeader.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/de/fampopprol/dhbwhorb/ui/screen/settingsScreen/generalSettingsSection/GeneralSettingsHeader.kt" />
              <option name="updatedContent" value="/*&#10; * SPDX-FileCopyrightText: 2024 Joinside &lt;suitor-fall-life@duck.com&gt;&#10; *&#10; * SPDX-License-Identifier: AGPL-3.0-or-later&#10; */&#10;&#10;package de.fampopprol.dhbwhorb.ui.screen.settingsScreen.generalSettingsSection&#10;&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Settings&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import de.fampopprol.dhbwhorb.R&#10;&#10;@Composable&#10;fun GeneralSettingsHeader(&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Row(&#10;        modifier = modifier,&#10;        verticalAlignment = Alignment.CenterVertically,&#10;        horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;    ) {&#10;        Icon(&#10;            imageVector = Icons.Default.Settings,&#10;            contentDescription = null,&#10;            tint = MaterialTheme.colorScheme.primary&#10;        )&#10;        Text(&#10;            text = stringResource(R.string.general_settings),&#10;            style = MaterialTheme.typography.headlineMedium,&#10;            fontWeight = FontWeight.Bold&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/de/fampopprol/dhbwhorb/ui/screen/settingsScreen/generalSettingsSection/MaterialYouToggle.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/de/fampopprol/dhbwhorb/ui/screen/settingsScreen/generalSettingsSection/MaterialYouToggle.kt" />
              <option name="updatedContent" value="/*&#10; * SPDX-FileCopyrightText: 2024 Joinside &lt;suitor-fall-life@duck.com&gt;&#10; *&#10; * SPDX-License-Identifier: AGPL-3.0-or-later&#10; */&#10;&#10;package de.fampopprol.dhbwhorb.ui.screen.settingsScreen.generalSettingsSection&#10;&#10;import android.os.Build&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Switch&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.rememberCoroutineScope&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import de.fampopprol.dhbwhorb.R&#10;import de.fampopprol.dhbwhorb.data.theme.ThemePreferencesManager&#10;import kotlinx.coroutines.launch&#10;&#10;@Composable&#10;fun MaterialYouToggle(&#10;    themePreferencesManager: ThemePreferencesManager,&#10;    materialYouEnabled: Boolean,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    val scope = rememberCoroutineScope()&#10;&#10;    // Only show on Android 12+&#10;    if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.S) {&#10;        Card(&#10;            modifier = modifier.fillMaxWidth(),&#10;            elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;        ) {&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(16.dp),&#10;                verticalArrangement = Arrangement.spacedBy(8.dp)&#10;            ) {&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.SpaceBetween,&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Column(modifier = Modifier.weight(1f)) {&#10;                        Text(&#10;                            text = stringResource(R.string.material_you_theming),&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            fontWeight = FontWeight.SemiBold&#10;                        )&#10;                        Text(&#10;                            text = stringResource(R.string.material_you_description),&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                        )&#10;                    }&#10;                    Switch(&#10;                        checked = materialYouEnabled,&#10;                        onCheckedChange = { enabled -&gt;&#10;                            scope.launch {&#10;                                themePreferencesManager.setMaterialYouEnabled(enabled)&#10;                            }&#10;                        }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/de/fampopprol/dhbwhorb/ui/screen/settingsScreen/generalSettingsSection/ThemeModeButton.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/de/fampopprol/dhbwhorb/ui/screen/settingsScreen/generalSettingsSection/ThemeModeButton.kt" />
              <option name="updatedContent" value="/*&#10; * SPDX-FileCopyrightText: 2024 Joinside &lt;suitor-fall-life@duck.com&gt;&#10; *&#10; * SPDX-License-Identifier: AGPL-3.0-or-later&#10; */&#10;&#10;package de.fampopprol.dhbwhorb.ui.screen.settingsScreen.generalSettingsSection&#10;&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.DarkMode&#10;import androidx.compose.material.icons.filled.LightMode&#10;import androidx.compose.material.icons.filled.Palette&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import de.fampopprol.dhbwhorb.R&#10;import de.fampopprol.dhbwhorb.ui.theme.ThemeMode&#10;&#10;@Composable&#10;fun ThemeModeButton(&#10;    themeMode: ThemeMode,&#10;    isSelected: Boolean,&#10;    onClick: () -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Card(&#10;        modifier = modifier&#10;            .fillMaxWidth()&#10;            .clickable { onClick() },&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = if (isSelected)&#10;                MaterialTheme.colorScheme.primaryContainer&#10;            else&#10;                MaterialTheme.colorScheme.surfaceVariant&#10;        )&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(12.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally,&#10;            verticalArrangement = Arrangement.spacedBy(4.dp)&#10;        ) {&#10;            Icon(&#10;                imageVector = when (themeMode) {&#10;                    ThemeMode.LIGHT -&gt; Icons.Default.LightMode&#10;                    ThemeMode.DARK -&gt; Icons.Default.DarkMode&#10;                    ThemeMode.SYSTEM -&gt; Icons.Default.Palette&#10;                },&#10;                contentDescription = null,&#10;                tint = if (isSelected)&#10;                    MaterialTheme.colorScheme.onPrimaryContainer&#10;                else&#10;                    MaterialTheme.colorScheme.onSurfaceVariant&#10;            )&#10;            Text(&#10;                text = stringResource(&#10;                    when (themeMode) {&#10;                        ThemeMode.LIGHT -&gt; R.string.theme_light&#10;                        ThemeMode.DARK -&gt; R.string.theme_dark&#10;                        ThemeMode.SYSTEM -&gt; R.string.theme_system&#10;                    }&#10;                ),&#10;                style = MaterialTheme.typography.bodySmall,&#10;                fontWeight = if (isSelected) FontWeight.SemiBold else FontWeight.Normal,&#10;                color = if (isSelected)&#10;                    MaterialTheme.colorScheme.onPrimaryContainer&#10;                else&#10;                    MaterialTheme.colorScheme.onSurfaceVariant&#10;            )&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/de/fampopprol/dhbwhorb/ui/screen/settingsScreen/generalSettingsSection/ThemeModeButtonRow.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/de/fampopprol/dhbwhorb/ui/screen/settingsScreen/generalSettingsSection/ThemeModeButtonRow.kt" />
              <option name="updatedContent" value="/*&#10; * SPDX-FileCopyrightText: 2024 Joinside &lt;suitor-fall-life@duck.com&gt;&#10; *&#10; * SPDX-License-Identifier: AGPL-3.0-or-later&#10; */&#10;&#10;package de.fampopprol.dhbwhorb.ui.screen.settingsScreen.generalSettingsSection&#10;&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.rememberCoroutineScope&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;import de.fampopprol.dhbwhorb.data.theme.ThemePreferencesManager&#10;import de.fampopprol.dhbwhorb.ui.theme.ThemeMode&#10;import kotlinx.coroutines.launch&#10;&#10;@Composable&#10;fun ThemeModeButtonRow(&#10;    themePreferencesManager: ThemePreferencesManager,&#10;    currentThemeMode: ThemeMode,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    val scope = rememberCoroutineScope()&#10;&#10;    Row(&#10;        modifier = modifier.fillMaxWidth(),&#10;        horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;    ) {&#10;        ThemeMode.entries.forEach { mode -&gt;&#10;            ThemeModeButton(&#10;                themeMode = mode,&#10;                isSelected = currentThemeMode == mode,&#10;                onClick = {&#10;                    scope.launch {&#10;                        themePreferencesManager.setThemeMode(mode)&#10;                    }&#10;                },&#10;                modifier = Modifier.weight(1f)&#10;            )&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/de/fampopprol/dhbwhorb/ui/screen/settingsScreen/generalSettingsSection/ThemeModeHeader.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/de/fampopprol/dhbwhorb/ui/screen/settingsScreen/generalSettingsSection/ThemeModeHeader.kt" />
              <option name="updatedContent" value="/*&#10; * SPDX-FileCopyrightText: 2024 Joinside &lt;suitor-fall-life@duck.com&gt;&#10; *&#10; * SPDX-License-Identifier: AGPL-3.0-or-later&#10; */&#10;&#10;package de.fampopprol.dhbwhorb.ui.screen.settingsScreen.generalSettingsSection&#10;&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.DarkMode&#10;import androidx.compose.material.icons.filled.LightMode&#10;import androidx.compose.material.icons.filled.Palette&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import de.fampopprol.dhbwhorb.R&#10;import de.fampopprol.dhbwhorb.ui.theme.ThemeMode&#10;&#10;@Composable&#10;fun ThemeModeHeader(&#10;    currentThemeMode: ThemeMode,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Row(&#10;        modifier = modifier,&#10;        verticalAlignment = Alignment.CenterVertically,&#10;        horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;    ) {&#10;        Icon(&#10;            imageVector = when (currentThemeMode) {&#10;                ThemeMode.LIGHT -&gt; Icons.Default.LightMode&#10;                ThemeMode.DARK -&gt; Icons.Default.DarkMode&#10;                ThemeMode.SYSTEM -&gt; Icons.Default.Palette&#10;            },&#10;            contentDescription = null,&#10;            tint = MaterialTheme.colorScheme.primary&#10;        )&#10;        Column(modifier = Modifier.weight(1f)) {&#10;            Text(&#10;                text = stringResource(R.string.theme_mode),&#10;                style = MaterialTheme.typography.titleMedium,&#10;                fontWeight = FontWeight.SemiBold&#10;            )&#10;            Text(&#10;                text = stringResource(R.string.theme_mode_description),&#10;                style = MaterialTheme.typography.bodyMedium,&#10;                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;            )&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/de/fampopprol/dhbwhorb/ui/screen/timetableScreen/TimetableNavigationManager.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/de/fampopprol/dhbwhorb/ui/screen/timetableScreen/TimetableNavigationManager.kt" />
              <option name="updatedContent" value="/*&#10; * SPDX-FileCopyrightText: 2024 Joinside &lt;suitor-fall-life@duck.com&gt;&#10; *&#10; * SPDX-License-Identifier: AGPL-3.0-or-later&#10; */&#10;&#10;package de.fampopprol.dhbwhorb.ui.screen.timetableScreen&#10;&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.setValue&#10;import de.fampopprol.dhbwhorb.ui.components.CalendarViewMode&#10;import java.time.DayOfWeek&#10;import java.time.LocalDate&#10;import java.time.temporal.TemporalAdjusters&#10;&#10;class TimetableNavigationManager(&#10;    private val viewModel: TimetableViewModel&#10;) {&#10;    var currentDate by mutableStateOf(LocalDate.now())&#10;        private set&#10;&#10;    var currentWeekStart by mutableStateOf(&#10;        LocalDate.now().with(TemporalAdjusters.previousOrSame(DayOfWeek.MONDAY))&#10;    )&#10;        private set&#10;&#10;    // Function to handle week change (navigate to a different week)&#10;    fun changeWeek(weekStart: LocalDate) {&#10;        currentWeekStart = weekStart&#10;&#10;        // First try to load from cache immediately&#10;        val foundInCache = viewModel.loadCachedTimetable(weekStart)&#10;&#10;        // Then fetch from API to ensure data is fresh&#10;        viewModel.fetchTimetableFromApi(weekStart, isForced = !foundInCache)&#10;    }&#10;&#10;    // Week navigation functions&#10;    fun goToPreviousWeek() {&#10;        changeWeek(currentWeekStart.minusWeeks(1))&#10;    }&#10;&#10;    fun goToNextWeek() {&#10;        changeWeek(currentWeekStart.plusWeeks(1))&#10;    }&#10;&#10;    fun goToCurrentWeek() {&#10;        changeWeek(LocalDate.now().with(TemporalAdjusters.previousOrSame(DayOfWeek.MONDAY)))&#10;    }&#10;&#10;    // Daily view navigation functions&#10;    fun goToPreviousDay() {&#10;        val newDate = currentDate.minusDays(1)&#10;        // Skip weekends - only show Monday to Friday&#10;        currentDate = if (newDate.dayOfWeek == DayOfWeek.SATURDAY) {&#10;            newDate.minusDays(1) // Go to Friday&#10;        } else if (newDate.dayOfWeek == DayOfWeek.SUNDAY) {&#10;            newDate.minusDays(2) // Go to Friday&#10;        } else {&#10;            newDate&#10;        }&#10;&#10;        // Ensure we have data for the week containing this day&#10;        val weekStart = currentDate.with(TemporalAdjusters.previousOrSame(DayOfWeek.MONDAY))&#10;        if (weekStart != currentWeekStart) {&#10;            changeWeek(weekStart)&#10;        }&#10;    }&#10;&#10;    fun goToNextDay() {&#10;        val newDate = currentDate.plusDays(1)&#10;        // Skip weekends - only show Monday to Friday&#10;        currentDate = if (newDate.dayOfWeek == DayOfWeek.SATURDAY) {&#10;            newDate.plusDays(2) // Go to Monday&#10;        } else if (newDate.dayOfWeek == DayOfWeek.SUNDAY) {&#10;            newDate.plusDays(1) // Go to Monday&#10;        } else {&#10;            newDate&#10;        }&#10;&#10;        // Ensure we have data for the week containing this day&#10;        val weekStart = currentDate.with(TemporalAdjusters.previousOrSame(DayOfWeek.MONDAY))&#10;        if (weekStart != currentWeekStart) {&#10;            changeWeek(weekStart)&#10;        }&#10;    }&#10;&#10;    fun goToCurrentDay() {&#10;        currentDate = LocalDate.now()&#10;        val weekStart = currentDate.with(TemporalAdjusters.previousOrSame(DayOfWeek.MONDAY))&#10;        if (weekStart != currentWeekStart) {&#10;            changeWeek(weekStart)&#10;        }&#10;    }&#10;&#10;    // Function to refresh current data based on view mode&#10;    fun refreshCurrentData(currentViewMode: CalendarViewMode) {&#10;        android.util.Log.d(&quot;TimetableNavigationManager&quot;, &quot;Pull-to-refresh triggered&quot;)&#10;        viewModel.setRefreshing(true)&#10;        if (currentViewMode == CalendarViewMode.WEEKLY) {&#10;            viewModel.fetchTimetableFromApi(currentWeekStart, isForced = true)&#10;        } else {&#10;            val weekStart = currentDate.with(TemporalAdjusters.previousOrSame(DayOfWeek.MONDAY))&#10;            viewModel.fetchTimetableFromApi(weekStart, isForced = true)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/de/fampopprol/dhbwhorb/ui/screen/timetableScreen/TimetableScreenComposer.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/de/fampopprol/dhbwhorb/ui/screen/timetableScreen/TimetableScreenComposer.kt" />
              <option name="updatedContent" value="/*&#10; * SPDX-FileCopyrightText: 2024 Joinside &lt;suitor-fall-life@duck.com&gt;&#10; *&#10; * SPDX-License-Identifier: AGPL-3.0-or-later&#10; */&#10;&#10;package de.fampopprol.dhbwhorb.ui.screen.timetableScreen&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.LinearProgressIndicator&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.pulltorefresh.PullToRefreshBox&#10;import androidx.compose.material3.pulltorefresh.PullToRefreshState&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;import de.fampopprol.dhbwhorb.data.dualis.models.TimetableDay&#10;import de.fampopprol.dhbwhorb.ui.components.CalendarViewMode&#10;import de.fampopprol.dhbwhorb.ui.components.DailyCalendar&#10;import de.fampopprol.dhbwhorb.ui.components.DayNavigationBar&#10;import de.fampopprol.dhbwhorb.ui.components.WeekNavigationBar&#10;import de.fampopprol.dhbwhorb.ui.components.WeeklyCalendar&#10;&#10;class TimetableScreenComposer {&#10;    &#10;    @OptIn(ExperimentalMaterial3Api::class)&#10;    @Composable&#10;    fun TimetableContent(&#10;        timetable: List&lt;TimetableDay&gt;?,&#10;        isFetchingFromApi: Boolean,&#10;        errorMessage: String?,&#10;        isRefreshing: Boolean,&#10;        lastUpdated: String?,&#10;        currentViewMode: CalendarViewMode,&#10;        navigationManager: TimetableNavigationManager,&#10;        pullRefreshState: PullToRefreshState,&#10;        onRefresh: () -&gt; Unit,&#10;        onLogout: () -&gt; Unit,&#10;        onViewModeChanged: (CalendarViewMode) -&gt; Unit,&#10;        modifier: Modifier = Modifier&#10;    ) {&#10;        Box(&#10;            modifier = modifier&#10;                .fillMaxSize()&#10;                .background(MaterialTheme.colorScheme.background)&#10;        ) {&#10;            PullToRefreshBox(&#10;                state = pullRefreshState,&#10;                onRefresh = onRefresh,&#10;                isRefreshing = isRefreshing,&#10;                modifier = Modifier.fillMaxSize(),&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier.fillMaxSize()&#10;                ) {&#10;                    // Navigation bar based on current view mode&#10;                    if (currentViewMode == CalendarViewMode.WEEKLY) {&#10;                        WeekNavigationBar(&#10;                            currentWeekStart = navigationManager.currentWeekStart,&#10;                            onPreviousWeek = { navigationManager.goToPreviousWeek() },&#10;                            onNextWeek = { navigationManager.goToNextWeek() },&#10;                            onCurrentWeek = { navigationManager.goToCurrentWeek() },&#10;                            isLoading = isFetchingFromApi,&#10;                            lastUpdated = lastUpdated,&#10;                            modifier = Modifier.fillMaxWidth()&#10;                        )&#10;                    } else {&#10;                        DayNavigationBar(&#10;                            currentDate = navigationManager.currentDate,&#10;                            onPreviousDay = { navigationManager.goToPreviousDay() },&#10;                            onNextDay = { navigationManager.goToNextDay() },&#10;                            onCurrentDay = { navigationManager.goToCurrentDay() },&#10;                            isLoading = isFetchingFromApi,&#10;                            lastUpdated = lastUpdated,&#10;                            modifier = Modifier.fillMaxWidth()&#10;                        )&#10;                    }&#10;&#10;                    // Show loading indicator for API requests&#10;                    if (isFetchingFromApi) {&#10;                        LinearProgressIndicator(&#10;                            modifier = Modifier.fillMaxWidth()&#10;                        )&#10;                    } else {&#10;                        Spacer(modifier = Modifier.height(4.dp))&#10;                    }&#10;&#10;                    // Error handling&#10;                    errorMessage?.let { error -&gt;&#10;                        Box(&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .padding(16.dp),&#10;                            contentAlignment = Alignment.Center&#10;                        ) {&#10;                            Column(horizontalAlignment = Alignment.CenterHorizontally) {&#10;                                Text(&#10;                                    text = error,&#10;                                    color = MaterialTheme.colorScheme.error,&#10;                                    style = MaterialTheme.typography.bodyMedium&#10;                                )&#10;                                Spacer(modifier = Modifier.height(8.dp))&#10;                                Button(onClick = onLogout) {&#10;                                    Text(&quot;Go to Login&quot;)&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                    // Calendar content&#10;                    timetable?.let { scheduleData -&gt;&#10;                        if (currentViewMode == CalendarViewMode.WEEKLY) {&#10;                            WeeklyCalendar(&#10;                                timetable = scheduleData,&#10;                                onViewModeChanged = onViewModeChanged,&#10;                                modifier = Modifier.fillMaxSize()&#10;                            )&#10;                        } else {&#10;                            DailyCalendar(&#10;                                timetable = scheduleData,&#10;                                currentDate = navigationManager.currentDate,&#10;                                onViewModeChanged = onViewModeChanged,&#10;                                modifier = Modifier.fillMaxSize()&#10;                            )&#10;                        }&#10;                    } ?: run {&#10;                        if (!isFetchingFromApi &amp;&amp; errorMessage == null) {&#10;                            Box(&#10;                                modifier = Modifier.fillMaxSize(),&#10;                                contentAlignment = Alignment.Center&#10;                            ) {&#10;                                Text(&#10;                                    text = &quot;No timetable data available&quot;,&#10;                                    style = MaterialTheme.typography.bodyLarge&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/de/fampopprol/dhbwhorb/ui/screen/timetableScreen/TimetableViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/de/fampopprol/dhbwhorb/ui/screen/timetableScreen/TimetableViewModel.kt" />
              <option name="updatedContent" value="/*&#10; * SPDX-FileCopyrightText: 2024 Joinside &lt;suitor-fall-life@duck.com&gt;&#10; *&#10; * SPDX-License-Identifier: AGPL-3.0-or-later&#10; */&#10;&#10;package de.fampopprol.dhbwhorb.ui.screen.timetableScreen&#10;&#10;import android.util.Log&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.setValue&#10;import de.fampopprol.dhbwhorb.data.cache.TimetableCacheManager&#10;import de.fampopprol.dhbwhorb.data.dualis.models.TimetableDay&#10;import de.fampopprol.dhbwhorb.data.dualis.network.DualisService&#10;import de.fampopprol.dhbwhorb.data.security.CredentialManager&#10;import java.time.DayOfWeek&#10;import java.time.LocalDate&#10;import java.time.format.DateTimeFormatter&#10;import java.time.temporal.ChronoUnit&#10;import java.time.temporal.TemporalAdjusters&#10;&#10;class TimetableViewModel(&#10;    private val dualisService: DualisService,&#10;    private val credentialManager: CredentialManager,&#10;    private val timetableCacheManager: TimetableCacheManager&#10;) {&#10;    var timetable by mutableStateOf&lt;List&lt;TimetableDay&gt;?&gt;(null)&#10;        private set&#10;    &#10;    var isFetchingFromApi by mutableStateOf(false)&#10;        private set&#10;    &#10;    var errorMessage by mutableStateOf&lt;String?&gt;(null)&#10;        private set&#10;    &#10;    var isRefreshing by mutableStateOf(false)&#10;        private set&#10;    &#10;    var lastUpdated by mutableStateOf&lt;String?&gt;(null)&#10;        private set&#10;&#10;    // Function to update last updated timestamp&#10;    fun updateLastUpdatedTimestamp() {&#10;        val formatter = DateTimeFormatter.ofPattern(&quot;HH:mm&quot;)&#10;        lastUpdated = java.time.LocalDateTime.now().format(formatter)&#10;    }&#10;&#10;    // Function to load timetable data from cache&#10;    fun loadCachedTimetable(weekStart: LocalDate): Boolean {&#10;        val cachedTimetable = timetableCacheManager.loadTimetable(weekStart)&#10;        if (cachedTimetable != null) {&#10;            timetable = cachedTimetable&#10;            Log.d(&quot;TimetableViewModel&quot;, &quot;Displaying cached timetable for week: $weekStart&quot;)&#10;            return true&#10;        }&#10;        return false&#10;    }&#10;&#10;    // Function to fetch timetable from API&#10;    fun fetchTimetableFromApi(weekStart: LocalDate, isForced: Boolean = false) {&#10;        if (isFetchingFromApi &amp;&amp; !isForced) return&#10;&#10;        isFetchingFromApi = true&#10;        Log.d(&quot;TimetableViewModel&quot;, &quot;Fetching timetable from API for week starting: $weekStart (forced: $isForced)&quot;)&#10;&#10;        dualisService.getWeeklySchedule(weekStart) { fetchedTimetable -&gt;&#10;            isFetchingFromApi = false&#10;            isRefreshing = false&#10;&#10;            if (fetchedTimetable != null) {&#10;                Log.d(&quot;TimetableViewModel&quot;, &quot;Fetched Timetable for week starting $weekStart: $fetchedTimetable&quot;)&#10;&#10;                if (timetable != fetchedTimetable) {&#10;                    timetable = fetchedTimetable&#10;                    timetableCacheManager.saveTimetable(weekStart, fetchedTimetable)&#10;                    Log.d(&quot;TimetableViewModel&quot;, &quot;Timetable updated and cached for week: $weekStart&quot;)&#10;                } else {&#10;                    Log.d(&quot;TimetableViewModel&quot;, &quot;Fetched timetable is same as current for week: $weekStart&quot;)&#10;                }&#10;&#10;                updateLastUpdatedTimestamp()&#10;                errorMessage = null&#10;            } else {&#10;                Log.e(&quot;TimetableViewModel&quot;, &quot;Failed to fetch timetable from API for week starting $weekStart&quot;)&#10;                if (timetable == null) {&#10;                    errorMessage = &quot;Failed to load timetable. Please try logging in again.&quot;&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    fun setRefreshing(refreshing: Boolean) {&#10;        isRefreshing = refreshing&#10;    }&#10;&#10;    fun authenticateAndFetch(weekStart: LocalDate, onLogout: () -&gt; Unit) {&#10;        val needsRefresh = if (timetable == null) true else {&#10;            val today = LocalDate.now()&#10;            val lastCacheDay = if (timetable?.isNotEmpty() == true) {&#10;                try {&#10;                    val formatter = DateTimeFormatter.ofPattern(&quot;dd.MM.yyyy&quot;)&#10;                    LocalDate.parse(timetable!!.last().date, formatter)&#10;                } catch (e: Exception) {&#10;                    Log.e(&quot;TimetableViewModel&quot;, &quot;Error parsing last cache day&quot;, e)&#10;                    null&#10;                }&#10;            } else null&#10;&#10;            lastCacheDay == null || ChronoUnit.DAYS.between(lastCacheDay, today) &gt; 0&#10;        }&#10;&#10;        if (credentialManager.hasStoredCredentialsBlocking()) {&#10;            val username = credentialManager.getUsernameBlocking()&#10;            val password = credentialManager.getPassword()&#10;&#10;            if (username != null &amp;&amp; password != null) {&#10;                Log.d(&quot;TimetableViewModel&quot;, &quot;Re-authenticating with stored credentials&quot;)&#10;                dualisService.login(username, password) { result -&gt;&#10;                    if (result != null) {&#10;                        Log.d(&quot;TimetableViewModel&quot;, &quot;Re-authentication successful, fetching timetable&quot;)&#10;                        fetchTimetableFromApi(weekStart, isForced = needsRefresh)&#10;                    } else {&#10;                        Log.e(&quot;TimetableViewModel&quot;, &quot;Re-authentication failed&quot;)&#10;                        errorMessage = &quot;Authentication failed. Please log in again.&quot;&#10;                        if (timetable == null) {&#10;                            onLogout()&#10;                        }&#10;                    }&#10;                }&#10;            } else {&#10;                Log.e(&quot;TimetableViewModel&quot;, &quot;No stored credentials found&quot;)&#10;                errorMessage = &quot;No credentials found. Please log in.&quot;&#10;                if (timetable == null) {&#10;                    onLogout()&#10;                }&#10;            }&#10;        } else {&#10;            if (timetable == null) {&#10;                onLogout()&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/fastlane/metadata/android/de-DE/changelogs/10.txt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/fastlane/metadata/android/de-DE/changelogs/10.txt" />
              <option name="updatedContent" value="• Präzise Benachrichtigungsplanung für bessere Zuverlässigkeit behoben&#10;• Dualis-Notendienst mit dynamischem Semesterabruf und verbesserter Fehlerbehandlung erweitert&#10;• Verbesserte Anmeldeerfahrung mit automatischem Fokuswechsel zwischen Feldern und passenden Tastaturtypen&#10;• Benutzerdefinierte Benachrichtigungssymbole für bessere visuelle Identifizierung hinzugefügt&#10;• Erweiterte Klassendatenerfassung um vollständige Details von einzelnen Veranstaltungsseiten&#10;• Umfangreiche Code-Refaktorierung für verbesserte Wartbarkeit und Leistung&#10;• Bessere Fehlerbehandlung und Fallback-Mechanismen in der gesamten App" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/fastlane/metadata/android/en-US/changelogs/10.txt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/fastlane/metadata/android/en-US/changelogs/10.txt" />
              <option name="updatedContent" value="• Fixed precise notification scheduling for better reliability&#10;• Enhanced Dualis grades service with dynamic semester fetching and better error handling&#10;• Improved login experience with automatic focus movement between fields and appropriate keyboard types&#10;• Added custom notification icons for better visual identification&#10;• Expanded class data fetching to include full details from individual event pages&#10;• Major code refactoring for improved maintainability and performance&#10;• Better error handling and fallback mechanisms throughout the app" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>