<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/build.gradle.kts" />
              <option name="originalContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.kotlin.android)&#10;    alias(libs.plugins.kotlin.compose)&#10;}&#10;&#10;android {&#10;    namespace = &quot;de.fampopprol.dhbwhorb&quot;&#10;    compileSdk = 36&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;de.fampopprol.dhbwhorb&quot;&#10;        minSdk = 26&#10;        targetSdk = 36&#10;        versionCode = 10&#10;        versionName = &quot;v1.1.0&quot;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            // Enables code-related app optimization.&#10;            isMinifyEnabled = true&#10;&#10;            // Enables resource shrinking.&#10;            isShrinkResources = true&#10;&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;            signingConfig = signingConfigs.getByName(&quot;debug&quot;)&#10;            // signingConfig = signingConfigs.getByName(&quot;debug&quot;)&#10;&#10;            ndk {&#10;                // Enables R8 to optimize native code.&#10;                debugSymbolLevel = &quot;FULL&quot;&#10;            }&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;11&quot;&#10;    }&#10;    buildFeatures {&#10;        compose = true&#10;    }&#10;    dependenciesInfo {&#10;        // Disables dependency metadata when building APKs (for IzzyOnDroid/F-Droid)&#10;        includeInApk = false&#10;        // Disables dependency metadata when building Android App Bundles (for Google Play)&#10;        includeInBundle = false&#10;    }&#10;}&#10;&#10;dependencies {&#10;&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#10;    implementation(libs.androidx.activity.compose)&#10;    implementation(platform(libs.androidx.compose.bom))&#10;    implementation(libs.androidx.ui)&#10;    implementation(libs.androidx.ui.graphics)&#10;    implementation(libs.androidx.ui.tooling.preview)&#10;    implementation(libs.androidx.material3)&#10;    implementation(libs.androidx.material.icons.extended)&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(libs.androidx.espresso.core)&#10;    androidTestImplementation(platform(libs.androidx.compose.bom))&#10;    androidTestImplementation(libs.androidx.ui.test.junit4)&#10;    debugImplementation(libs.androidx.ui.tooling)&#10;    debugImplementation(libs.androidx.ui.test.manifest)&#10;&#10;    implementation(libs.okhttp)&#10;    implementation(libs.okhttp.logging.interceptor)&#10;    implementation(libs.okhttp.urlconnection)&#10;    implementation(libs.jsoup)&#10;    implementation(libs.androidx.datastore.preferences)&#10;&#10;    // Security library for encrypted storage&#10;    implementation(libs.androidx.security.crypto)&#10;    implementation(libs.gson)&#10;&#10;    // Navigation dependencies&#10;    implementation(libs.androidx.navigation.compose)&#10;&#10;    // WorkManager for background tasks&#10;    implementation(libs.androidx.work.runtime.ktx)&#10;}" />
              <option name="updatedContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.kotlin.android)&#10;    alias(libs.plugins.kotlin.compose)&#10;}&#10;&#10;android {&#10;    namespace = &quot;de.fampopprol.dhbwhorb&quot;&#10;    compileSdk = 36&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;de.fampopprol.dhbwhorb&quot;&#10;        minSdk = 26&#10;        targetSdk = 36&#10;        versionCode = 10&#10;        versionName = &quot;v1.1.0&quot;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            // Enables code-related app optimization.&#10;            isMinifyEnabled = true&#10;&#10;            // Enables resource shrinking.&#10;            isShrinkResources = true&#10;&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;            signingConfig = signingConfigs.getByName(&quot;debug&quot;)&#10;            // signingConfig = signingConfigs.getByName(&quot;debug&quot;)&#10;&#10;            ndk {&#10;                // Enables R8 to optimize native code.&#10;                debugSymbolLevel = &quot;FULL&quot;&#10;            }&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;11&quot;&#10;    }&#10;    buildFeatures {&#10;        compose = true&#10;    }&#10;    dependenciesInfo {&#10;        // Disables dependency metadata when building APKs (for IzzyOnDroid/F-Droid)&#10;        includeInApk = false&#10;        // Disables dependency metadata when building Android App Bundles (for Google Play)&#10;        includeInBundle = false&#10;    }&#10;}&#10;&#10;dependencies {&#10;&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#10;    implementation(libs.androidx.activity.compose)&#10;    implementation(libs.androidx.activity.ktx)&#10;    implementation(platform(libs.androidx.compose.bom))&#10;    implementation(libs.androidx.ui)&#10;    implementation(libs.androidx.ui.graphics)&#10;    implementation(libs.androidx.ui.tooling.preview)&#10;    implementation(libs.androidx.material3)&#10;    implementation(libs.androidx.material.icons.extended)&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(libs.androidx.espresso.core)&#10;    androidTestImplementation(platform(libs.androidx.compose.bom))&#10;    androidTestImplementation(libs.androidx.ui.test.junit4)&#10;    debugImplementation(libs.androidx.ui.tooling)&#10;    debugImplementation(libs.androidx.ui.test.manifest)&#10;&#10;    implementation(libs.okhttp)&#10;    implementation(libs.okhttp.logging.interceptor)&#10;    implementation(libs.okhttp.urlconnection)&#10;    implementation(libs.jsoup)&#10;    implementation(libs.androidx.datastore.preferences)&#10;&#10;    // Security library for encrypted storage&#10;    implementation(libs.androidx.security.crypto)&#10;    implementation(libs.gson)&#10;&#10;    // Navigation dependencies&#10;    implementation(libs.androidx.navigation.compose)&#10;&#10;    // WorkManager for background tasks&#10;    implementation(libs.androidx.work.runtime.ktx)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/de/fampopprol/dhbwhorb/data/security/CredentialManager.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/de/fampopprol/dhbwhorb/data/security/CredentialManager.kt" />
              <option name="originalContent" value="/*&#10; * SPDX-FileCopyrightText: 2024 Joinside &lt;suitor-fall-life@duck.com&gt;&#10; *&#10; * SPDX-License-Identifier: AGPL-3.0-or-later&#10; */&#10;&#10;package de.fampopprol.dhbwhorb.data.security&#10;&#10;import android.content.Context&#10;import android.util.Log&#10;import androidx.core.content.edit&#10;import androidx.datastore.preferences.core.booleanPreferencesKey&#10;import androidx.datastore.preferences.core.edit&#10;import androidx.datastore.preferences.core.emptyPreferences&#10;import androidx.datastore.preferences.core.stringPreferencesKey&#10;import androidx.security.crypto.EncryptedSharedPreferences&#10;import androidx.security.crypto.MasterKey&#10;import de.fampopprol.dhbwhorb.data.datastore.dataStore&#10;import kotlinx.coroutines.flow.Flow&#10;import kotlinx.coroutines.flow.catch&#10;import kotlinx.coroutines.flow.first&#10;import kotlinx.coroutines.flow.map&#10;import kotlinx.coroutines.runBlocking&#10;import java.io.IOException&#10;&#10;/**&#10; * CredentialManager handles secure storage of user credentials using encrypted storage.&#10; *&#10; * Note: This class uses EncryptedSharedPreferences and MasterKey which are currently deprecated&#10; * but remain the recommended approach until a stable replacement is available.&#10; */&#10;@Suppress(&quot;DEPRECATION&quot;)&#10;class CredentialManager(context: Context) {&#10;&#10;    private val dataStore = context.dataStore&#10;&#10;    @Suppress(&quot;DEPRECATION&quot;)&#10;    private val masterKey = MasterKey.Builder(context)&#10;        .setKeyScheme(MasterKey.KeyScheme.AES256_GCM)&#10;        .build()&#10;&#10;    @Suppress(&quot;DEPRECATION&quot;)&#10;    private val encryptedSharedPreferences = EncryptedSharedPreferences.create(&#10;        context,&#10;        &quot;secure_credentials&quot;,&#10;        masterKey,&#10;        EncryptedSharedPreferences.PrefKeyEncryptionScheme.AES256_SIV,&#10;        EncryptedSharedPreferences.PrefValueEncryptionScheme.AES256_GCM&#10;    )&#10;&#10;    companion object {&#10;        private const val KEY_PASSWORD = &quot;password&quot;&#10;        private const val TAG = &quot;CredentialManager&quot;&#10;&#10;        private val KEY_USERNAME_DATASTORE = stringPreferencesKey(&quot;username&quot;)&#10;        private val KEY_IS_LOGGED_IN_DATASTORE = booleanPreferencesKey(&quot;is_logged_in&quot;)&#10;    }&#10;&#10;    /**&#10;     * Save credentials persistently (when user checks &quot;Remember me&quot;)&#10;     */&#10;    suspend fun saveCredentials(username: String, password: String) {&#10;        try {&#10;            encryptedSharedPreferences.edit {&#10;                putString(KEY_PASSWORD, password)&#10;            }&#10;            dataStore.edit { prefs -&gt;&#10;                prefs[KEY_USERNAME_DATASTORE] = username&#10;                prefs[KEY_IS_LOGGED_IN_DATASTORE] = true&#10;            }&#10;            Log.d(TAG, &quot;Credentials saved successfully&quot;)&#10;        } catch (e: Exception) {&#10;            Log.e(TAG, &quot;Error saving credentials&quot;, e)&#10;        }&#10;    }&#10;&#10;    val usernameFlow: Flow&lt;String?&gt; = dataStore.data&#10;        .catch { e -&gt;&#10;            if (e is IOException) {&#10;                emit(emptyPreferences())&#10;            } else {&#10;                throw e&#10;            }&#10;        }&#10;        .map { prefs -&gt;&#10;            prefs[KEY_USERNAME_DATASTORE]&#10;        }&#10;&#10;    fun getUsernameBlocking(): String? {&#10;        return runBlocking {&#10;            try {&#10;                dataStore.data.first()[KEY_USERNAME_DATASTORE]&#10;            } catch(_: Exception) {&#10;                null&#10;            }&#10;        }&#10;    }&#10;&#10;    fun getPassword(): String? {&#10;        return try {&#10;            encryptedSharedPreferences.getString(KEY_PASSWORD, null)&#10;        } catch (_: Exception) {&#10;            null&#10;        }&#10;    }&#10;&#10;    fun isLoggedInBlocking(): Boolean {&#10;        return runBlocking {&#10;            try {&#10;                dataStore.data.first()[KEY_IS_LOGGED_IN_DATASTORE] ?: false&#10;            } catch(_: Exception) {&#10;                false&#10;            }&#10;        }&#10;    }&#10;&#10;    suspend fun logout() {&#10;        try {&#10;            dataStore.edit { prefs -&gt;&#10;                prefs.remove(KEY_USERNAME_DATASTORE)&#10;                prefs[KEY_IS_LOGGED_IN_DATASTORE] = false&#10;            }&#10;            encryptedSharedPreferences.edit {&#10;                remove(KEY_PASSWORD)&#10;            }&#10;        } catch (e: Exception) {&#10;            Log.d(TAG, &quot;Error logging out&quot;, e)&#10;        }&#10;    }&#10;&#10;    suspend fun clearAllCredentials() {&#10;        try {&#10;            dataStore.edit { prefs -&gt; prefs.clear() }&#10;            encryptedSharedPreferences.edit { clear() }&#10;            Log.d(TAG, &quot;All credentials cleared&quot;)&#10;        } catch (e: Exception) {&#10;            Log.e(TAG, &quot;Error clearing credentials&quot;, e)&#10;        }&#10;    }&#10;&#10;    suspend fun hasStoredCredentialsBlocking(): Boolean {&#10;        val username = usernameFlow.first()&#10;        val password = getPassword()&#10;        return username != null &amp;&amp; password != null&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="/*&#10; * SPDX-FileCopyrightText: 2024 Joinside &lt;suitor-fall-life@duck.com&gt;&#10; *&#10; * SPDX-License-Identifier: AGPL-3.0-or-later&#10; */&#10;&#10;@file:Suppress(&quot;DEPRECATION&quot;)&#10;&#10;package de.fampopprol.dhbwhorb.data.security&#10;&#10;import android.content.Context&#10;import android.util.Log&#10;import androidx.core.content.edit&#10;import androidx.datastore.preferences.core.booleanPreferencesKey&#10;import androidx.datastore.preferences.core.edit&#10;import androidx.datastore.preferences.core.emptyPreferences&#10;import androidx.datastore.preferences.core.stringPreferencesKey&#10;import androidx.security.crypto.EncryptedSharedPreferences&#10;import androidx.security.crypto.MasterKey&#10;import de.fampopprol.dhbwhorb.data.datastore.dataStore&#10;import kotlinx.coroutines.flow.Flow&#10;import kotlinx.coroutines.flow.catch&#10;import kotlinx.coroutines.flow.first&#10;import kotlinx.coroutines.flow.map&#10;import kotlinx.coroutines.runBlocking&#10;import java.io.IOException&#10;&#10;/**&#10; * CredentialManager handles secure storage of user credentials using encrypted storage.&#10; *&#10; * Note: This class uses EncryptedSharedPreferences and MasterKey which are currently deprecated&#10; * but remain the recommended approach until a stable replacement is available.&#10; */&#10;class CredentialManager(context: Context) {&#10;&#10;    private val dataStore = context.dataStore&#10;&#10;    private val masterKey = MasterKey.Builder(context)&#10;        .setKeyScheme(MasterKey.KeyScheme.AES256_GCM)&#10;        .build()&#10;&#10;    private val encryptedSharedPreferences = EncryptedSharedPreferences.create(&#10;        context,&#10;        &quot;secure_credentials&quot;,&#10;        masterKey,&#10;        EncryptedSharedPreferences.PrefKeyEncryptionScheme.AES256_SIV,&#10;        EncryptedSharedPreferences.PrefValueEncryptionScheme.AES256_GCM&#10;    )&#10;&#10;    companion object {&#10;        private const val KEY_PASSWORD = &quot;password&quot;&#10;        private const val TAG = &quot;CredentialManager&quot;&#10;&#10;        private val KEY_USERNAME_DATASTORE = stringPreferencesKey(&quot;username&quot;)&#10;        private val KEY_IS_LOGGED_IN_DATASTORE = booleanPreferencesKey(&quot;is_logged_in&quot;)&#10;    }&#10;&#10;    /**&#10;     * Save credentials persistently (when user checks &quot;Remember me&quot;)&#10;     */&#10;    suspend fun saveCredentials(username: String, password: String) {&#10;        try {&#10;            encryptedSharedPreferences.edit {&#10;                putString(KEY_PASSWORD, password)&#10;            }&#10;            dataStore.edit { prefs -&gt;&#10;                prefs[KEY_USERNAME_DATASTORE] = username&#10;                prefs[KEY_IS_LOGGED_IN_DATASTORE] = true&#10;            }&#10;            Log.d(TAG, &quot;Credentials saved successfully&quot;)&#10;        } catch (e: Exception) {&#10;            Log.e(TAG, &quot;Error saving credentials&quot;, e)&#10;        }&#10;    }&#10;&#10;    val usernameFlow: Flow&lt;String?&gt; = dataStore.data&#10;        .catch { e -&gt;&#10;            if (e is IOException) {&#10;                emit(emptyPreferences())&#10;            } else {&#10;                throw e&#10;            }&#10;        }&#10;        .map { prefs -&gt;&#10;            prefs[KEY_USERNAME_DATASTORE]&#10;        }&#10;&#10;    fun getUsernameBlocking(): String? {&#10;        return runBlocking {&#10;            try {&#10;                dataStore.data.first()[KEY_USERNAME_DATASTORE]&#10;            } catch(_: Exception) {&#10;                null&#10;            }&#10;        }&#10;    }&#10;&#10;    fun getPassword(): String? {&#10;        return try {&#10;            encryptedSharedPreferences.getString(KEY_PASSWORD, null)&#10;        } catch (_: Exception) {&#10;            null&#10;        }&#10;    }&#10;&#10;    fun isLoggedInBlocking(): Boolean {&#10;        return runBlocking {&#10;            try {&#10;                dataStore.data.first()[KEY_IS_LOGGED_IN_DATASTORE] ?: false&#10;            } catch(_: Exception) {&#10;                false&#10;            }&#10;        }&#10;    }&#10;&#10;    suspend fun logout() {&#10;        try {&#10;            dataStore.edit { prefs -&gt;&#10;                prefs.remove(KEY_USERNAME_DATASTORE)&#10;                prefs[KEY_IS_LOGGED_IN_DATASTORE] = false&#10;            }&#10;            encryptedSharedPreferences.edit {&#10;                remove(KEY_PASSWORD)&#10;            }&#10;        } catch (e: Exception) {&#10;            Log.d(TAG, &quot;Error logging out&quot;, e)&#10;        }&#10;    }&#10;&#10;    suspend fun clearAllCredentials() {&#10;        try {&#10;            dataStore.edit { prefs -&gt; prefs.clear() }&#10;            encryptedSharedPreferences.edit { clear() }&#10;            Log.d(TAG, &quot;All credentials cleared&quot;)&#10;        } catch (e: Exception) {&#10;            Log.e(TAG, &quot;Error clearing credentials&quot;, e)&#10;        }&#10;    }&#10;&#10;    suspend fun hasStoredCredentialsBlocking(): Boolean {&#10;        val username = usernameFlow.first()&#10;        val password = getPassword()&#10;        return username != null &amp;&amp; password != null&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/de/fampopprol/dhbwhorb/ui/screen/LoginScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/de/fampopprol/dhbwhorb/ui/screen/LoginScreen.kt" />
              <option name="originalContent" value="/*&#10; * SPDX-FileCopyrightText: 2024 Joinside &lt;suitor-fall-life@duck.com&gt;&#10; *&#10; * SPDX-License-Identifier: AGPL-3.0-or-later&#10; */&#10;&#10;package de.fampopprol.dhbwhorb.ui.screen&#10;&#10;import android.util.Log&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Lock&#10;import androidx.compose.material.icons.filled.Person&#10;import androidx.compose.material.icons.filled.Visibility&#10;import androidx.compose.material.icons.filled.VisibilityOff&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import de.fampopprol.dhbwhorb.R&#10;import androidx.compose.material3.CircularProgressIndicator&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.OutlinedTextField&#10;import androidx.compose.material3.Text&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Lock&#10;import androidx.compose.material.icons.filled.Person&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.input.KeyboardType&#10;import androidx.compose.ui.text.input.PasswordVisualTransformation&#10;import androidx.compose.ui.text.input.VisualTransformation&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.material.icons.filled.Visibility&#10;import androidx.compose.material.icons.filled.VisibilityOff&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.CircularProgressIndicator&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.OutlinedTextField&#10;import androidx.compose.material3.Text&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Lock&#10;import androidx.compose.material.icons.filled.Person&#10;import androidx.compose.material.icons.filled.Visibility&#10;import androidx.compose.material.icons.filled.VisibilityOff&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.Card&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.input.KeyboardType&#10;import androidx.compose.ui.text.input.PasswordVisualTransformation&#10;        // Login Card with Material 3 elevated surface&#10;        Card(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            colors = CardDefaults.cardColors(&#10;                containerColor = MaterialTheme.colorScheme.surfaceContainer&#10;            ),&#10;            elevation = CardDefaults.cardElevation(defaultElevation = 8.dp)&#10;        ) {&#10;            Column(&#10;                modifier = Modifier.padding(24.dp),&#10;                horizontalAlignment = Alignment.CenterHorizontally&#10;            ) {&#10;                // Enhanced title with Material 3 typography&#10;                Text(&#10;                    text = stringResource(R.string.login_title),&#10;                    style = MaterialTheme.typography.headlineMedium,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = MaterialTheme.colorScheme.primary,&#10;                    textAlign = TextAlign.Center,&#10;                    modifier = Modifier.padding(bottom = 8.dp)&#10;                )&#10;&#10;                Text(&#10;                    text = stringResource(R.string.app_name),&#10;                    style = MaterialTheme.typography.bodyLarge,&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                    textAlign = TextAlign.Center,&#10;                    modifier = Modifier.padding(bottom = 32.dp)&#10;                )&#10;&#10;                // Enhanced username field with leading icon&#10;                OutlinedTextField(&#10;                    value = username,&#10;                    onValueChange = {&#10;                        username = it&#10;                        errorMessage = null // Clear error when user types&#10;                    },&#10;                    label = { Text(stringResource(R.string.username)) },&#10;                    leadingIcon = {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Person,&#10;                            contentDescription = null,&#10;                            tint = MaterialTheme.colorScheme.onSurfaceVariant&#10;                        )&#10;                    },&#10;                    singleLine = true,&#10;                    enabled = !isLoading,&#10;                    isError = errorMessage != null,&#10;                    modifier = Modifier.fillMaxWidth()&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                // Enhanced password field with visibility toggle&#10;                OutlinedTextField(&#10;                    value = password,&#10;                    onValueChange = {&#10;                        password = it&#10;                        errorMessage = null // Clear error when user types&#10;                    },&#10;                    label = { Text(stringResource(R.string.password)) },&#10;                    leadingIcon = {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Lock,&#10;                            contentDescription = null,&#10;                            tint = MaterialTheme.colorScheme.onSurfaceVariant&#10;                        )&#10;                    },&#10;                    trailingIcon = {&#10;                        IconButton(onClick = { passwordVisible = !passwordVisible }) {&#10;                            Icon(&#10;                                imageVector = if (passwordVisible) Icons.Filled.VisibilityOff else Icons.Filled.Visibility,&#10;                                contentDescription = if (passwordVisible) &quot;Hide password&quot; else &quot;Show password&quot;&#10;                            )&#10;                        }&#10;                    },&#10;                    singleLine = true,&#10;                    enabled = !isLoading,&#10;                    isError = errorMessage != null,&#10;                    visualTransformation = if (passwordVisible) VisualTransformation.None else PasswordVisualTransformation(),&#10;                    keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Password),&#10;                    modifier = Modifier.fillMaxWidth()&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(24.dp))&#10;import androidx.compose.material3.OutlinedTextField&#10;                // Enhanced login button with loading state&#10;                Button(&#10;                    onClick = {&#10;                        isLoading = true&#10;                        errorMessage = null&#10;                        scope.launch {&#10;                            dualisService.login(username, password) { result -&gt;&#10;                                isLoading = false&#10;                                if (result != null) {&#10;                                    scope.launch {&#10;                                        // Always save credentials on successful login&#10;                                        credentialManager.saveCredentials(username, password)&#10;                                        onLoginSuccess()&#10;                                        Log.d(&quot;LoginScreen&quot;, &quot;Login successful, credentials saved&quot;)&#10;                                    }&#10;                                } else {&#10;                                    errorMessage = &quot;Login failed. Please check your credentials.&quot;&#10;                                    Log.e(&quot;LoginScreen&quot;, &quot;Login failed&quot;)&#10;                                }&#10;                            }&#10;                        }&#10;                    },&#10;                    enabled = !isLoading &amp;&amp; username.isNotBlank() &amp;&amp; password.isNotBlank(),&#10;                    modifier = Modifier.fillMaxWidth()&#10;                ) {&#10;                    if (isLoading) {&#10;                        CircularProgressIndicator(&#10;                            modifier = Modifier&#10;                                .height(20.dp)&#10;                                .width(20.dp),&#10;                            strokeWidth = 2.dp,&#10;                            color = MaterialTheme.colorScheme.onPrimary&#10;                        )&#10;                        Spacer(modifier = Modifier.width(8.dp))&#10;                    }&#10;                    Text(&#10;                        text = if (isLoading) stringResource(R.string.logging_in) else stringResource(&#10;                            R.string.login&#10;                        ),&#10;                        style = MaterialTheme.typography.labelLarge&#10;                    )&#10;                }&#10;import androidx.compose.ui.text.font.FontWeight&#10;                // Error message with better styling&#10;                errorMessage?.let { error -&gt;&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;                    Card(&#10;                        colors = CardDefaults.cardColors(&#10;                            containerColor = MaterialTheme.colorScheme.errorContainer&#10;                        ),&#10;                        modifier = Modifier.fillMaxWidth()&#10;                    ) {&#10;                        Text(&#10;                            text = error,&#10;                            color = MaterialTheme.colorScheme.onErrorContainer,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            textAlign = TextAlign.Center,&#10;                            modifier = Modifier.padding(12.dp)&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;import androidx.compose.material3.OutlinedTextField&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.rememberCoroutineScope&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;        // Login Card with Material 3 elevated surface&#10;        Card(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            colors = CardDefaults.cardColors(&#10;                containerColor = MaterialTheme.colorScheme.surfaceContainer&#10;            ),&#10;            elevation = CardDefaults.cardElevation(defaultElevation = 8.dp)&#10;        ) {&#10;            Column(&#10;                modifier = Modifier.padding(24.dp),&#10;                horizontalAlignment = Alignment.CenterHorizontally&#10;            ) {&#10;                // Enhanced title with Material 3 typography&#10;                Text(&#10;                    text = stringResource(R.string.login_title),&#10;                    style = MaterialTheme.typography.headlineMedium,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = MaterialTheme.colorScheme.primary,&#10;                    textAlign = TextAlign.Center,&#10;                    modifier = Modifier.padding(bottom = 8.dp)&#10;                )&#10;&#10;                Text(&#10;                    text = stringResource(R.string.app_name),&#10;                    style = MaterialTheme.typography.bodyLarge,&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                    textAlign = TextAlign.Center,&#10;                    modifier = Modifier.padding(bottom = 32.dp)&#10;                )&#10;&#10;                // Enhanced username field with leading icon&#10;                OutlinedTextField(&#10;                    value = username,&#10;                    onValueChange = {&#10;                        username = it&#10;                        errorMessage = null // Clear error when user types&#10;                    },&#10;                    label = { Text(stringResource(R.string.username)) },&#10;                    leadingIcon = {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Person,&#10;                            contentDescription = null,&#10;                            tint = MaterialTheme.colorScheme.onSurfaceVariant&#10;                        )&#10;                    },&#10;                    singleLine = true,&#10;                    enabled = !isLoading,&#10;                    isError = errorMessage != null,&#10;                    modifier = Modifier.fillMaxWidth()&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                // Enhanced password field with visibility toggle&#10;                OutlinedTextField(&#10;                    value = password,&#10;                    onValueChange = {&#10;                        password = it&#10;                        errorMessage = null // Clear error when user types&#10;                    },&#10;                    label = { Text(stringResource(R.string.password)) },&#10;                    leadingIcon = {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Lock,&#10;                            contentDescription = null,&#10;                            tint = MaterialTheme.colorScheme.onSurfaceVariant&#10;                        )&#10;                    },&#10;                    trailingIcon = {&#10;                        IconButton(onClick = { passwordVisible = !passwordVisible }) {&#10;                            Icon(&#10;                                imageVector = if (passwordVisible) Icons.Filled.VisibilityOff else Icons.Filled.Visibility,&#10;                                contentDescription = if (passwordVisible) &quot;Hide password&quot; else &quot;Show password&quot;&#10;                            )&#10;                        }&#10;                    },&#10;                    singleLine = true,&#10;                    enabled = !isLoading,&#10;                    isError = errorMessage != null,&#10;                    visualTransformation = if (passwordVisible) VisualTransformation.None else PasswordVisualTransformation(),&#10;                    keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Password),&#10;                    modifier = Modifier.fillMaxWidth()&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(24.dp))&#10;&#10;                // Enhanced login button with loading state&#10;                Button(&#10;                    onClick = {&#10;                        isLoading = true&#10;                        errorMessage = null&#10;                        scope.launch {&#10;                            dualisService.login(username, password) { result -&gt;&#10;                                isLoading = false&#10;                                if (result != null) {&#10;                                    scope.launch {&#10;                                        // Always save credentials on successful login&#10;                                        credentialManager.saveCredentials(username, password)&#10;                                        onLoginSuccess()&#10;                                        Log.d(&quot;LoginScreen&quot;, &quot;Login successful, credentials saved&quot;)&#10;                                    }&#10;                                } else {&#10;                                    errorMessage = &quot;Login failed. Please check your credentials.&quot;&#10;                                    Log.e(&quot;LoginScreen&quot;, &quot;Login failed&quot;)&#10;                                }&#10;                            }&#10;                        }&#10;                    },&#10;                    enabled = !isLoading &amp;&amp; username.isNotBlank() &amp;&amp; password.isNotBlank(),&#10;                    modifier = Modifier.fillMaxWidth()&#10;                ) {&#10;                    if (isLoading) {&#10;                        CircularProgressIndicator(&#10;                            modifier = Modifier&#10;                                .height(20.dp)&#10;                                .width(20.dp),&#10;                            strokeWidth = 2.dp,&#10;                            color = MaterialTheme.colorScheme.onPrimary&#10;                        )&#10;                        Spacer(modifier = Modifier.width(8.dp))&#10;                    }&#10;                    Text(&#10;                        text = if (isLoading) stringResource(R.string.logging_in) else stringResource(&#10;                            R.string.login&#10;                        ),&#10;                        style = MaterialTheme.typography.labelLarge&#10;                    )&#10;                }&#10;&#10;                // Error message with better styling&#10;                errorMessage?.let { error -&gt;&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;                    Card(&#10;                        colors = CardDefaults.cardColors(&#10;                            containerColor = MaterialTheme.colorScheme.errorContainer&#10;                        ),&#10;                        modifier = Modifier.fillMaxWidth()&#10;                    ) {&#10;                        Text(&#10;                            text = error,&#10;                            color = MaterialTheme.colorScheme.onErrorContainer,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            textAlign = TextAlign.Center,&#10;                            modifier = Modifier.padding(12.dp)&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;                OutlinedTextField(&#10;                    value = username,&#10;                    onValueChange = {&#10;                        username = it&#10;                        errorMessage = null // Clear error when user types&#10;                    },&#10;                    label = { Text(stringResource(R.string.username)) },&#10;                    leadingIcon = {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Person,&#10;                            contentDescription = null,&#10;                            tint = MaterialTheme.colorScheme.onSurfaceVariant&#10;                        )&#10;                    },&#10;                    singleLine = true,&#10;                    enabled = !isLoading,&#10;                    isError = errorMessage != null,&#10;                    modifier = Modifier.fillMaxWidth()&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                // Enhanced password field with visibility toggle&#10;                OutlinedTextField(&#10;                    value = password,&#10;                    onValueChange = {&#10;                        password = it&#10;                        errorMessage = null // Clear error when user types&#10;                    },&#10;                    label = { Text(stringResource(R.string.password)) },&#10;                    leadingIcon = {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Lock,&#10;                            contentDescription = null,&#10;                            tint = MaterialTheme.colorScheme.onSurfaceVariant&#10;                        )&#10;                    },&#10;                    trailingIcon = {&#10;                        IconButton(onClick = { passwordVisible = !passwordVisible }) {&#10;                            Icon(&#10;                                imageVector = if (passwordVisible) Icons.Filled.VisibilityOff else Icons.Filled.Visibility,&#10;                                contentDescription = if (passwordVisible) &quot;Hide password&quot; else &quot;Show password&quot;&#10;                            )&#10;                        }&#10;                    },&#10;                    singleLine = true,&#10;                    enabled = !isLoading,&#10;                    isError = errorMessage != null,&#10;                    visualTransformation = if (passwordVisible) VisualTransformation.None else PasswordVisualTransformation(),&#10;                    keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Password),&#10;                    modifier = Modifier.fillMaxWidth()&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(24.dp))&#10;&#10;                // Enhanced login button with loading state&#10;                Button(&#10;                    onClick = {&#10;                        isLoading = true&#10;                        errorMessage = null&#10;                        scope.launch {&#10;                            dualisService.login(username, password) { result -&gt;&#10;                                isLoading = false&#10;                                if (result != null) {&#10;                                    scope.launch {&#10;                                        // Always save credentials on successful login&#10;                                        credentialManager.saveCredentials(username, password)&#10;                                        onLoginSuccess()&#10;                                        Log.d(&quot;LoginScreen&quot;, &quot;Login successful, credentials saved&quot;)&#10;                                    }&#10;                                } else {&#10;                                    errorMessage = &quot;Login failed. Please check your credentials.&quot;&#10;                                    Log.e(&quot;LoginScreen&quot;, &quot;Login failed&quot;)&#10;                                }&#10;                            }&#10;                        }&#10;                    },&#10;                    enabled = !isLoading &amp;&amp; username.isNotBlank() &amp;&amp; password.isNotBlank(),&#10;                    modifier = Modifier.fillMaxWidth()&#10;                ) {&#10;                    if (isLoading) {&#10;                        CircularProgressIndicator(&#10;                            modifier = Modifier&#10;                                .height(20.dp)&#10;                                .width(20.dp),&#10;                            strokeWidth = 2.dp,&#10;                            color = MaterialTheme.colorScheme.onPrimary&#10;                        )&#10;                        Spacer(modifier = Modifier.width(8.dp))&#10;                    }&#10;                    Text(&#10;                        text = if (isLoading) stringResource(R.string.logging_in) else stringResource(&#10;                            R.string.login&#10;                        ),&#10;                        style = MaterialTheme.typography.labelLarge&#10;                    )&#10;                }&#10;&#10;                // Error message with better styling&#10;                errorMessage?.let { error -&gt;&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;                    Card(&#10;                        colors = CardDefaults.cardColors(&#10;                            containerColor = MaterialTheme.colorScheme.errorContainer&#10;                        ),&#10;                        modifier = Modifier.fillMaxWidth()&#10;                    ) {&#10;                        Text(&#10;                            text = error,&#10;                            color = MaterialTheme.colorScheme.onErrorContainer,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            textAlign = TextAlign.Center,&#10;                            modifier = Modifier.padding(12.dp)&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    Column(&#10;        modifier = modifier&#10;            .fillMaxSize()&#10;            .padding(24.dp),&#10;        verticalArrangement = Arrangement.Center,&#10;        horizontalAlignment = Alignment.CenterHorizontally&#10;    ) {&#10;        // Login Card with Material 3 elevated surface&#10;        Card(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            colors = CardDefaults.cardColors(&#10;                containerColor = MaterialTheme.colorScheme.surfaceContainer&#10;            ),&#10;            elevation = CardDefaults.cardElevation(defaultElevation = 8.dp)&#10;        ) {&#10;            Column(&#10;                modifier = Modifier.padding(24.dp),&#10;                horizontalAlignment = Alignment.CenterHorizontally&#10;            ) {&#10;                // Enhanced title with Material 3 typography&#10;                Text(&#10;                    text = stringResource(R.string.login_title),&#10;                    style = MaterialTheme.typography.headlineMedium,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = MaterialTheme.colorScheme.primary,&#10;                    textAlign = TextAlign.Center,&#10;                    modifier = Modifier.padding(bottom = 8.dp)&#10;                )&#10;&#10;                Text(&#10;                    text = stringResource(R.string.app_name),&#10;                    style = MaterialTheme.typography.bodyLarge,&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                    textAlign = TextAlign.Center,&#10;                    modifier = Modifier.padding(bottom = 32.dp)&#10;                )&#10;&#10;                // Enhanced username field with leading icon&#10;                OutlinedTextField(&#10;                    value = username,&#10;                    onValueChange = {&#10;                        username = it&#10;                        errorMessage = null // Clear error when user types&#10;                    },&#10;                    label = { Text(stringResource(R.string.username)) },&#10;                    leadingIcon = {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Person,&#10;                            contentDescription = null,&#10;                            tint = MaterialTheme.colorScheme.onSurfaceVariant&#10;                        )&#10;                    },&#10;                    singleLine = true,&#10;                    enabled = !isLoading,&#10;                    isError = errorMessage != null,&#10;                    modifier = Modifier.fillMaxWidth()&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                // Enhanced password field with visibility toggle&#10;                OutlinedTextField(&#10;                    value = password,&#10;                    onValueChange = {&#10;                        password = it&#10;                        errorMessage = null // Clear error when user types&#10;                    },&#10;                    label = { Text(stringResource(R.string.password)) },&#10;                    leadingIcon = {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Lock,&#10;                            contentDescription = null,&#10;                            tint = MaterialTheme.colorScheme.onSurfaceVariant&#10;                        )&#10;                    },&#10;                    trailingIcon = {&#10;                        IconButton(onClick = { passwordVisible = !passwordVisible }) {&#10;                            Icon(&#10;                                imageVector = if (passwordVisible) Icons.Filled.VisibilityOff else Icons.Filled.Visibility,&#10;                                contentDescription = if (passwordVisible) &quot;Hide password&quot; else &quot;Show password&quot;&#10;                            )&#10;                        }&#10;                    },&#10;                    singleLine = true,&#10;                    enabled = !isLoading,&#10;                    isError = errorMessage != null,&#10;                    visualTransformation = if (passwordVisible) VisualTransformation.None else PasswordVisualTransformation(),&#10;                    keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Password),&#10;                    modifier = Modifier.fillMaxWidth()&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(24.dp))&#10;&#10;                // Enhanced login button with loading state&#10;                Button(&#10;                    onClick = {&#10;                        isLoading = true&#10;                        errorMessage = null&#10;                        scope.launch {&#10;                            dualisService.login(username, password) { result -&gt;&#10;                                isLoading = false&#10;                                if (result != null) {&#10;                                    scope.launch {&#10;                                        // Always save credentials on successful login&#10;                                        credentialManager.saveCredentials(username, password)&#10;                                        onLoginSuccess()&#10;                                        Log.d(&quot;LoginScreen&quot;, &quot;Login successful, credentials saved&quot;)&#10;                                    }&#10;                                } else {&#10;                                    errorMessage = &quot;Login failed. Please check your credentials.&quot;&#10;                                    Log.e(&quot;LoginScreen&quot;, &quot;Login failed&quot;)&#10;                                }&#10;                            }&#10;                        }&#10;                    },&#10;                    enabled = !isLoading &amp;&amp; username.isNotBlank() &amp;&amp; password.isNotBlank(),&#10;                    modifier = Modifier.fillMaxWidth()&#10;                ) {&#10;                    if (isLoading) {&#10;                        CircularProgressIndicator(&#10;                            modifier = Modifier&#10;                                .height(20.dp)&#10;                                .width(20.dp),&#10;                            strokeWidth = 2.dp,&#10;                            color = MaterialTheme.colorScheme.onPrimary&#10;                        )&#10;                        Spacer(modifier = Modifier.width(8.dp))&#10;                    }&#10;                    Text(&#10;                        text = if (isLoading) stringResource(R.string.logging_in) else stringResource(&#10;                            R.string.login&#10;                        ),&#10;                        style = MaterialTheme.typography.labelLarge&#10;                    )&#10;                }&#10;&#10;                // Error message with better styling&#10;                errorMessage?.let { error -&gt;&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;                    Card(&#10;                        colors = CardDefaults.cardColors(&#10;                            containerColor = MaterialTheme.colorScheme.errorContainer&#10;                        ),&#10;                        modifier = Modifier.fillMaxWidth()&#10;                    ) {&#10;                        Text(&#10;                            text = error,&#10;                            color = MaterialTheme.colorScheme.onErrorContainer,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            textAlign = TextAlign.Center,&#10;                            modifier = Modifier.padding(12.dp)&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="/*&#10; * SPDX-FileCopyrightText: 2024 Joinside &lt;suitor-fall-life@duck.com&gt;&#10; *&#10; * SPDX-License-Identifier: AGPL-3.0-or-later&#10; */&#10;&#10;package de.fampopprol.dhbwhorb.ui.screen&#10;&#10;import android.util.Log&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.rememberCoroutineScope&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;import de.fampopprol.dhbwhorb.data.dualis.network.DualisService&#10;import de.fampopprol.dhbwhorb.data.security.CredentialManager&#10;import de.fampopprol.dhbwhorb.ui.screen.loginScreen.LoginCard&#10;import kotlinx.coroutines.launch&#10;&#10;@Composable&#10;fun LoginScreen(&#10;    dualisService: DualisService,&#10;    credentialManager: CredentialManager,&#10;    onLoginSuccess: () -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    val scope = rememberCoroutineScope()&#10;    var username by remember { mutableStateOf(&quot;&quot;) }&#10;    var password by remember { mutableStateOf(&quot;&quot;) }&#10;    var passwordVisible by remember { mutableStateOf(false) }&#10;    var isLoading by remember { mutableStateOf(false) }&#10;    var errorMessage by remember { mutableStateOf&lt;String?&gt;(null) }&#10;&#10;    LaunchedEffect(credentialManager) {&#10;        credentialManager.usernameFlow.collect { storedUsername -&gt;&#10;            if (storedUsername != null) {&#10;                username = storedUsername&#10;            }&#10;        }&#10;    }&#10;&#10;    // Auto-fill password if credentials are stored&#10;    LaunchedEffect(credentialManager) {&#10;        val storedPassword = credentialManager.getPassword()&#10;        if (storedPassword != null) {&#10;            password = storedPassword&#10;        }&#10;    }&#10;&#10;    Column(&#10;        modifier = modifier&#10;            .fillMaxSize()&#10;            .padding(24.dp),&#10;        verticalArrangement = Arrangement.Center,&#10;        horizontalAlignment = Alignment.CenterHorizontally&#10;    ) {&#10;        LoginCard(&#10;            username = username,&#10;            password = password,&#10;            passwordVisible = passwordVisible,&#10;            isLoading = isLoading,&#10;            errorMessage = errorMessage,&#10;            onUsernameChange = { &#10;                username = it&#10;                errorMessage = null // Clear error when user types&#10;            },&#10;            onPasswordChange = { &#10;                password = it&#10;                errorMessage = null // Clear error when user types&#10;            },&#10;            onPasswordVisibilityToggle = { passwordVisible = !passwordVisible },&#10;            onLoginClick = {&#10;                isLoading = true&#10;                errorMessage = null&#10;                scope.launch {&#10;                    dualisService.login(username, password) { result -&gt;&#10;                        isLoading = false&#10;                        if (result != null) {&#10;                            scope.launch {&#10;                                // Always save credentials on successful login&#10;                                credentialManager.saveCredentials(username, password)&#10;                                onLoginSuccess()&#10;                                Log.d(&quot;LoginScreen&quot;, &quot;Login successful, credentials saved&quot;)&#10;                            }&#10;                        } else {&#10;                            errorMessage = &quot;Login failed. Please check your credentials.&quot;&#10;                            Log.e(&quot;LoginScreen&quot;, &quot;Login failed&quot;)&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/de/fampopprol/dhbwhorb/ui/screen/NotificationSettingsScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/de/fampopprol/dhbwhorb/ui/screen/NotificationSettingsScreen.kt" />
              <option name="originalContent" value="/*&#10; * SPDX-FileCopyrightText: 2024 Joinside &lt;suitor-fall-life@duck.com&gt;&#10; *&#10; * SPDX-License-Identifier: AGPL-3.0-or-later&#10; */&#10;&#10;package de.fampopprol.dhbwhorb.ui.screen&#10;&#10;import android.os.Build&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Notifications&#10;import androidx.compose.material.icons.filled.NotificationsOff&#10;import androidx.compose.material.icons.filled.AccessTime&#10;import androidx.compose.material.icons.filled.DateRange&#10;import androidx.compose.material.icons.filled.Star&#10;import androidx.compose.material.icons.filled.Palette&#10;import androidx.compose.material.icons.filled.DarkMode&#10;import androidx.compose.material.icons.filled.LightMode&#10;import androidx.compose.material.icons.filled.Settings&#10;import androidx.compose.material.icons.automirrored.filled.ExitToApp&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.ButtonDefaults&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.DropdownMenu&#10;import androidx.compose.material3.DropdownMenuItem&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Switch&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.rememberCoroutineScope&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import de.fampopprol.dhbwhorb.R&#10;import de.fampopprol.dhbwhorb.data.dualis.network.DualisService&#10;import de.fampopprol.dhbwhorb.data.notification.DHBWNotificationManager&#10;import de.fampopprol.dhbwhorb.data.notification.NotificationPreferencesManager&#10;import de.fampopprol.dhbwhorb.data.notification.NotificationScheduler&#10;import de.fampopprol.dhbwhorb.data.security.CredentialManager&#10;import de.fampopprol.dhbwhorb.data.theme.ThemePreferencesManager&#10;import de.fampopprol.dhbwhorb.ui.theme.ThemeMode&#10;import kotlinx.coroutines.launch&#10;&#10;@Composable&#10;fun NotificationSettingsScreen(&#10;    dualisService: DualisService,&#10;    notificationScheduler: NotificationScheduler,&#10;    notificationPreferencesManager: NotificationPreferencesManager,&#10;    credentialManager: CredentialManager, // Add CredentialManager&#10;    onLogout: () -&gt; Unit, // Add onLogout callback&#10;    modifier: Modifier = Modifier&#10;) {&#10;    val scope = rememberCoroutineScope()&#10;    val context = LocalContext.current&#10;&#10;    // Theme preferences&#10;    val themePreferencesManager = remember { ThemePreferencesManager(context) }&#10;    val materialYouEnabled by themePreferencesManager.materialYouEnabled.collectAsState(initial = true)&#10;    val themeMode by themePreferencesManager.themeMode.collectAsState(initial = ThemeMode.SYSTEM)&#10;&#10;    val notificationsEnabled by notificationPreferencesManager.notificationsEnabled.collectAsState(initial = true)&#10;    val timetableNotificationsEnabled by notificationPreferencesManager.timetableNotificationsEnabled.collectAsState(initial = true)&#10;    val gradeNotificationsEnabled by notificationPreferencesManager.gradeNotificationsEnabled.collectAsState(initial = true)&#10;    val classReminderNotificationsEnabled by notificationPreferencesManager.classReminderNotificationsEnabled.collectAsState(initial = false)&#10;    val classReminderTimeMinutes by notificationPreferencesManager.classReminderTimeMinutes.collectAsState(initial = 30)&#10;&#10;    // Check if we're in demo mode&#10;    val isDemoMode = dualisService.isDemoMode()&#10;&#10;    Column(&#10;        modifier = modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp)&#10;            .verticalScroll(rememberScrollState()),&#10;        verticalArrangement = Arrangement.spacedBy(16.dp)&#10;    ) {&#10;        // ===== ALLGEMEINE EINSTELLUNGEN (GENERAL SETTINGS) SECTION =====&#10;        // General Settings Header&#10;        Row(&#10;            verticalAlignment = Alignment.CenterVertically,&#10;            horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;        ) {&#10;            Icon(&#10;                imageVector = Icons.Default.Settings,&#10;                contentDescription = null,&#10;                tint = MaterialTheme.colorScheme.primary&#10;            )&#10;            Text(&#10;                text = stringResource(R.string.general_settings),&#10;                style = MaterialTheme.typography.headlineMedium,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;&#10;        // Material You Theming Toggle (only show on Android 12+)&#10;        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.S) {&#10;            Card(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(16.dp),&#10;                    verticalArrangement = Arrangement.spacedBy(8.dp)&#10;                ) {&#10;                    Row(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        horizontalArrangement = Arrangement.SpaceBetween,&#10;                        verticalAlignment = Alignment.CenterVertically&#10;                    ) {&#10;                        Column(modifier = Modifier.weight(1f)) {&#10;                            Text(&#10;                                text = stringResource(R.string.material_you_theming),&#10;                                style = MaterialTheme.typography.titleMedium,&#10;                                fontWeight = FontWeight.SemiBold&#10;                            )&#10;                            Text(&#10;                                text = stringResource(R.string.material_you_description),&#10;                                style = MaterialTheme.typography.bodyMedium,&#10;                                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                            )&#10;                        }&#10;                        Switch(&#10;                            checked = materialYouEnabled,&#10;                            onCheckedChange = { enabled -&gt;&#10;                                scope.launch {&#10;                                    themePreferencesManager.setMaterialYouEnabled(enabled)&#10;                                }&#10;                            }&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        // Theme Mode Selection&#10;        Card(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)&#10;        ) {&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(16.dp),&#10;                verticalArrangement = Arrangement.spacedBy(12.dp)&#10;            ) {&#10;                Row(&#10;                    verticalAlignment = Alignment.CenterVertically,&#10;                    horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;                ) {&#10;                    Icon(&#10;                        imageVector = when (themeMode) {&#10;                            ThemeMode.LIGHT -&gt; Icons.Default.LightMode&#10;                            ThemeMode.DARK -&gt; Icons.Default.DarkMode&#10;                            ThemeMode.SYSTEM -&gt; Icons.Default.Palette&#10;                        },&#10;                        contentDescription = null,&#10;                        tint = MaterialTheme.colorScheme.primary&#10;                    )&#10;                    Column(modifier = Modifier.weight(1f)) {&#10;                        Text(&#10;                            text = stringResource(R.string.theme_mode),&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            fontWeight = FontWeight.SemiBold&#10;                        )&#10;                        Text(&#10;                            text = stringResource(R.string.theme_mode_description),&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                        )&#10;                    }&#10;                }&#10;&#10;                // Theme mode selection buttons&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;                ) {&#10;                    ThemeMode.entries.forEach { mode -&gt;&#10;                        val isSelected = themeMode == mode&#10;                        Card(&#10;                            modifier = Modifier&#10;                                .weight(1f)&#10;                                .clickable {&#10;                                    scope.launch {&#10;                                        themePreferencesManager.setThemeMode(mode)&#10;                                    }&#10;                                },&#10;                            colors = CardDefaults.cardColors(&#10;                                containerColor = if (isSelected)&#10;                                    MaterialTheme.colorScheme.primaryContainer&#10;                                else&#10;                                    MaterialTheme.colorScheme.surfaceVariant&#10;                            )&#10;                        ) {&#10;                            Column(&#10;                                modifier = Modifier&#10;                                    .fillMaxWidth()&#10;                                    .padding(12.dp),&#10;                                horizontalAlignment = Alignment.CenterHorizontally,&#10;                                verticalArrangement = Arrangement.spacedBy(4.dp)&#10;                            ) {&#10;                                Icon(&#10;                                    imageVector = when (mode) {&#10;                                        ThemeMode.LIGHT -&gt; Icons.Default.LightMode&#10;                                        ThemeMode.DARK -&gt; Icons.Default.DarkMode&#10;                                        ThemeMode.SYSTEM -&gt; Icons.Default.Palette&#10;                                    },&#10;                                    contentDescription = null,&#10;                                    tint = if (isSelected)&#10;                                        MaterialTheme.colorScheme.onPrimaryContainer&#10;                                    else&#10;                                        MaterialTheme.colorScheme.onSurfaceVariant&#10;                                )&#10;                                Text(&#10;                                    text = stringResource(when (mode) {&#10;                                        ThemeMode.LIGHT -&gt; R.string.theme_light&#10;                                        ThemeMode.DARK -&gt; R.string.theme_dark&#10;                                        ThemeMode.SYSTEM -&gt; R.string.theme_system&#10;                                    }),&#10;                                    style = MaterialTheme.typography.bodySmall,&#10;                                    fontWeight = if (isSelected) FontWeight.SemiBold else FontWeight.Normal,&#10;                                    color = if (isSelected)&#10;                                        MaterialTheme.colorScheme.onPrimaryContainer&#10;                                    else&#10;                                        MaterialTheme.colorScheme.onSurfaceVariant&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        // ===== NOTIFICATION SETTINGS SECTION =====&#10;        // Notification Settings Header&#10;        Row(&#10;            verticalAlignment = Alignment.CenterVertically,&#10;            horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;        ) {&#10;            Icon(&#10;                imageVector = if (notificationsEnabled) Icons.Default.Notifications else Icons.Default.NotificationsOff,&#10;                contentDescription = null,&#10;                tint = MaterialTheme.colorScheme.primary&#10;            )&#10;            Text(&#10;                text = stringResource(R.string.notification_settings),&#10;                style = MaterialTheme.typography.headlineMedium,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;&#10;        // Master notification toggle&#10;        Card(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;        ) {&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(16.dp),&#10;                verticalArrangement = Arrangement.spacedBy(8.dp)&#10;            ) {&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.SpaceBetween,&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Column(modifier = Modifier.weight(1f)) {&#10;                        Text(&#10;                            text = stringResource(R.string.enable_notifications),&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            fontWeight = FontWeight.SemiBold&#10;                        )&#10;                        Text(&#10;                            text = stringResource(R.string.enable_notifications_description),&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                        )&#10;                    }&#10;                    Switch(&#10;                        checked = notificationsEnabled,&#10;                        onCheckedChange = { enabled -&gt;&#10;                            scope.launch {&#10;                                notificationPreferencesManager.setNotificationsEnabled(enabled)&#10;                                if (enabled) {&#10;                                    notificationScheduler.schedulePeriodicNotifications()&#10;                                } else {&#10;                                    notificationScheduler.cancelPeriodicNotifications()&#10;                                }&#10;                            }&#10;                        }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;&#10;        // Timetable notifications&#10;        Card(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)&#10;        ) {&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(16.dp),&#10;                verticalArrangement = Arrangement.spacedBy(8.dp)&#10;            ) {&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.SpaceBetween,&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Column(modifier = Modifier.weight(1f)) {&#10;                        Text(&#10;                            text = stringResource(R.string.timetable_changes),&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            fontWeight = FontWeight.Medium&#10;                        )&#10;                        Text(&#10;                            text = stringResource(R.string.timetable_changes_description),&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                        )&#10;                    }&#10;                    Switch(&#10;                        checked = timetableNotificationsEnabled,&#10;                        enabled = notificationsEnabled,&#10;                        onCheckedChange = { enabled -&gt;&#10;                            scope.launch {&#10;                                notificationPreferencesManager.setTimetableNotificationsEnabled(enabled)&#10;                            }&#10;                        }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;&#10;        // Grade notifications&#10;        Card(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)&#10;        ) {&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(16.dp),&#10;                verticalArrangement = Arrangement.spacedBy(8.dp)&#10;            ) {&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.SpaceBetween,&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Column(modifier = Modifier.weight(1f)) {&#10;                        Text(&#10;                            text = stringResource(R.string.new_grades),&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            fontWeight = FontWeight.Medium&#10;                        )&#10;                        Text(&#10;                            text = stringResource(R.string.new_grades_description),&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                        )&#10;                    }&#10;                    Switch(&#10;                        checked = gradeNotificationsEnabled,&#10;                        enabled = notificationsEnabled,&#10;                        onCheckedChange = { enabled -&gt;&#10;                            scope.launch {&#10;                                notificationPreferencesManager.setGradeNotificationsEnabled(enabled)&#10;                            }&#10;                        }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;&#10;        // Class reminder notifications&#10;        Card(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)&#10;        ) {&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(16.dp),&#10;                verticalArrangement = Arrangement.spacedBy(12.dp)&#10;            ) {&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.SpaceBetween,&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Column(modifier = Modifier.weight(1f)) {&#10;                        Text(&#10;                            text = stringResource(R.string.class_reminders),&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            fontWeight = FontWeight.Medium&#10;                        )&#10;                        Text(&#10;                            text = stringResource(R.string.class_reminders_description),&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                        )&#10;                    }&#10;                    Switch(&#10;                        checked = classReminderNotificationsEnabled,&#10;                        enabled = notificationsEnabled,&#10;                        onCheckedChange = { enabled -&gt;&#10;                            scope.launch {&#10;                                notificationPreferencesManager.setClassReminderNotificationsEnabled(enabled)&#10;                                if (enabled) {&#10;                                    notificationScheduler.scheduleClassReminders()&#10;                                } else {&#10;                                    notificationScheduler.cancelClassReminders()&#10;                                }&#10;                            }&#10;                        }&#10;                    )&#10;                }&#10;&#10;                // Time picker for reminder timing&#10;                if (classReminderNotificationsEnabled &amp;&amp; notificationsEnabled) {&#10;                    var showDropdown by remember { mutableStateOf(false) }&#10;                    val timeOptions = listOf(5, 10, 15, 30, 45, 60, 90, 120)&#10;&#10;                    Card(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .clickable { showDropdown = true },&#10;                        colors = CardDefaults.cardColors(&#10;                            containerColor = MaterialTheme.colorScheme.surfaceVariant&#10;                        )&#10;                    ) {&#10;                        Row(&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .padding(12.dp),&#10;                            horizontalArrangement = Arrangement.SpaceBetween,&#10;                            verticalAlignment = Alignment.CenterVertically&#10;                        ) {&#10;                            Row(&#10;                                verticalAlignment = Alignment.CenterVertically,&#10;                                horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;                            ) {&#10;                                Icon(&#10;                                    imageVector = Icons.Default.AccessTime,&#10;                                    contentDescription = null,&#10;                                    tint = MaterialTheme.colorScheme.onSurfaceVariant&#10;                                )&#10;                                Column {&#10;                                    Text(&#10;                                        text = stringResource(R.string.reminder_time),&#10;                                        style = MaterialTheme.typography.bodyMedium,&#10;                                        fontWeight = FontWeight.Medium&#10;                                    )&#10;                                    Text(&#10;                                        text = stringResource(R.string.minutes_before_class, classReminderTimeMinutes),&#10;                                        style = MaterialTheme.typography.bodySmall,&#10;                                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                                    )&#10;                                }&#10;                            }&#10;                        }&#10;&#10;                        DropdownMenu(&#10;                            expanded = showDropdown,&#10;                            onDismissRequest = { showDropdown = false }&#10;                        ) {&#10;                            timeOptions.forEach { minutes -&gt;&#10;                                DropdownMenuItem(&#10;                                    text = {&#10;                                        Text(&#10;                                            text = if (minutes == 1) stringResource(R.string.one_minute) else stringResource(R.string.x_minutes, minutes),&#10;                                            color = if (minutes == classReminderTimeMinutes)&#10;                                                MaterialTheme.colorScheme.primary&#10;                                            else MaterialTheme.colorScheme.onSurface&#10;                                        )&#10;                                    },&#10;                                    onClick = {&#10;                                        scope.launch {&#10;                                            notificationPreferencesManager.setClassReminderTimeMinutes(minutes)&#10;                                            notificationScheduler.scheduleClassReminders() // Reschedule with new time&#10;                                        }&#10;                                        showDropdown = false&#10;                                    }&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        // Demo notification test buttons (only show in demo mode)&#10;        if (isDemoMode) {&#10;            Card(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                elevation = CardDefaults.cardElevation(defaultElevation = 4.dp),&#10;                colors = CardDefaults.cardColors(&#10;                    containerColor = MaterialTheme.colorScheme.tertiaryContainer&#10;                )&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(16.dp),&#10;                    verticalArrangement = Arrangement.spacedBy(12.dp)&#10;                ) {&#10;                    Row(&#10;                        verticalAlignment = Alignment.CenterVertically,&#10;                        horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Notifications,&#10;                            contentDescription = null,&#10;                            tint = MaterialTheme.colorScheme.onTertiaryContainer&#10;                        )&#10;                        Text(&#10;                            text = stringResource(R.string.demo_mode_test_notifications),&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            fontWeight = FontWeight.SemiBold,&#10;                            color = MaterialTheme.colorScheme.onTertiaryContainer&#10;                        )&#10;                    }&#10;&#10;                    Text(&#10;                        text = stringResource(R.string.test_notifications_description),&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        color = MaterialTheme.colorScheme.onTertiaryContainer.copy(alpha = 0.8f)&#10;                    )&#10;&#10;                    // Test Timetable Change Notification Button&#10;                    Button(&#10;                        onClick = {&#10;                            val notificationManager = DHBWNotificationManager(context)&#10;                            val demoChanges = listOf(&#10;                                &quot;Software Engineering moved to room HOR-120&quot;,&#10;                                &quot;Database Systems time changed to 10:00-11:30&quot;&#10;                            )&#10;                            notificationManager.showTimetableChangeNotification(demoChanges)&#10;                        },&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        colors = ButtonDefaults.buttonColors(&#10;                            containerColor = MaterialTheme.colorScheme.primary&#10;                        )&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.DateRange,&#10;                            contentDescription = null,&#10;                            modifier = Modifier.padding(end = 8.dp)&#10;                        )&#10;                        Text(stringResource(R.string.test_timetable_change))&#10;                    }&#10;&#10;                    // Test Grade Change Notification Button&#10;                    Button(&#10;                        onClick = {&#10;                            val notificationManager = DHBWNotificationManager(context)&#10;                            val demoGrades = listOf(&#10;                                &quot;New grade available: Software Engineering - 1.3&quot;,&#10;                                &quot;New grade available: Database Systems - 1.7&quot;&#10;                            )&#10;                            notificationManager.showGradeChangeNotification(demoGrades)&#10;                        },&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        colors = ButtonDefaults.buttonColors(&#10;                            containerColor = MaterialTheme.colorScheme.secondary&#10;                        )&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Star,&#10;                            contentDescription = null,&#10;                            modifier = Modifier.padding(end = 8.dp)&#10;                        )&#10;                        Text(stringResource(R.string.test_grade_change))&#10;                    }&#10;&#10;                    // Test Class Reminder Notification Button&#10;                    Button(&#10;                        onClick = {&#10;                            val notificationManager = DHBWNotificationManager(context)&#10;                            val reminderText = &quot;Software Engineering starts in 30 minutes in room HOR-120&quot;&#10;                            notificationManager.showClassReminderNotification(reminderText, 3001)&#10;                        },&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        colors = ButtonDefaults.buttonColors(&#10;                            containerColor = MaterialTheme.colorScheme.tertiary&#10;                        )&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.AccessTime,&#10;                            contentDescription = null,&#10;                            modifier = Modifier.padding(end = 8.dp)&#10;                        )&#10;                        Text(stringResource(R.string.test_class_reminder))&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        // Information card&#10;        Card(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            colors = CardDefaults.cardColors(&#10;                containerColor = MaterialTheme.colorScheme.surfaceVariant&#10;            )&#10;        ) {&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(16.dp),&#10;                verticalArrangement = Arrangement.spacedBy(8.dp)&#10;            ) {&#10;                Text(&#10;                    text = stringResource(R.string.how_it_works),&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.SemiBold,&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                )&#10;                Text(&#10;                    text = stringResource(R.string.how_it_works_description),&#10;                    style = MaterialTheme.typography.bodyMedium,&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                )&#10;            }&#10;        }&#10;&#10;        // Logout Button&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;        Button(&#10;            onClick = {&#10;                scope.launch {&#10;                    credentialManager.logout()&#10;                    onLogout()&#10;                }&#10;            },&#10;            modifier = Modifier.fillMaxWidth(),&#10;            colors = ButtonDefaults.buttonColors(&#10;                containerColor = MaterialTheme.colorScheme.errorContainer,&#10;                contentColor = MaterialTheme.colorScheme.onErrorContainer&#10;            )&#10;        ) {&#10;            Icon(&#10;                imageVector = Icons.AutoMirrored.Filled.ExitToApp,&#10;                contentDescription = null,&#10;                modifier = Modifier.padding(end = 8.dp)&#10;            )&#10;            Text(stringResource(R.string.logout))&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="/*&#10; * SPDX-FileCopyrightText: 2024 Joinside &lt;suitor-fall-life@duck.com&gt;&#10; *&#10; * SPDX-License-Identifier: AGPL-3.0-or-later&#10; */&#10;&#10;package de.fampopprol.dhbwhorb.ui.screen&#10;&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.unit.dp&#10;import de.fampopprol.dhbwhorb.data.dualis.network.DualisService&#10;import de.fampopprol.dhbwhorb.data.notification.NotificationPreferencesManager&#10;import de.fampopprol.dhbwhorb.data.notification.NotificationScheduler&#10;import de.fampopprol.dhbwhorb.data.security.CredentialManager&#10;import de.fampopprol.dhbwhorb.data.theme.ThemePreferencesManager&#10;import de.fampopprol.dhbwhorb.ui.screen.notificationSettingsScreen.ClassReminderSettingsSection&#10;import de.fampopprol.dhbwhorb.ui.screen.notificationSettingsScreen.DemoModeTestSection&#10;import de.fampopprol.dhbwhorb.ui.screen.notificationSettingsScreen.GeneralSettingsSection&#10;import de.fampopprol.dhbwhorb.ui.screen.notificationSettingsScreen.LogoutSection&#10;import de.fampopprol.dhbwhorb.ui.screen.notificationSettingsScreen.NotificationSettingsSection&#10;&#10;@Composable&#10;fun NotificationSettingsScreen(&#10;    dualisService: DualisService,&#10;    notificationScheduler: NotificationScheduler,&#10;    notificationPreferencesManager: NotificationPreferencesManager,&#10;    credentialManager: CredentialManager,&#10;    onLogout: () -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    val context = LocalContext.current&#10;    val themePreferencesManager = remember { ThemePreferencesManager(context) }&#10;&#10;    val notificationsEnabled by notificationPreferencesManager.notificationsEnabled.collectAsState(initial = true)&#10;    val isDemoMode = dualisService.isDemoMode()&#10;&#10;    Column(&#10;        modifier = modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp)&#10;            .verticalScroll(rememberScrollState()),&#10;        verticalArrangement = Arrangement.spacedBy(16.dp)&#10;    ) {&#10;        // General Settings Section&#10;        GeneralSettingsSection(&#10;            themePreferencesManager = themePreferencesManager&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        // Notification Settings Section&#10;        NotificationSettingsSection(&#10;            notificationPreferencesManager = notificationPreferencesManager,&#10;            notificationScheduler = notificationScheduler&#10;        )&#10;&#10;        // Class Reminder Settings Section&#10;        ClassReminderSettingsSection(&#10;            notificationPreferencesManager = notificationPreferencesManager,&#10;            notificationScheduler = notificationScheduler,&#10;            notificationsEnabled = notificationsEnabled&#10;        )&#10;&#10;        // Demo Mode Test Section (only show in demo mode)&#10;        if (isDemoMode) {&#10;            DemoModeTestSection()&#10;        }&#10;&#10;        // Logout Section&#10;        LogoutSection(&#10;            credentialManager = credentialManager,&#10;            onLogout = onLogout&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/de/fampopprol/dhbwhorb/ui/screen/gradesScreen/GradesAuthManager.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/de/fampopprol/dhbwhorb/ui/screen/gradesScreen/GradesAuthManager.kt" />
              <option name="updatedContent" value="/*&#10; * SPDX-FileCopyrightText: 2024 Joinside &lt;suitor-fall-life@duck.com&gt;&#10; *&#10; * SPDX-License-Identifier: AGPL-3.0-or-later&#10; */&#10;&#10;package de.fampopprol.dhbwhorb.ui.screen.gradesScreen&#10;&#10;import android.util.Log&#10;import de.fampopprol.dhbwhorb.data.dualis.network.DualisService&#10;import de.fampopprol.dhbwhorb.data.security.CredentialManager&#10;import kotlinx.coroutines.CoroutineScope&#10;import kotlinx.coroutines.launch&#10;&#10;/**&#10; * Handles authentication logic for the grades screen&#10; */&#10;class GradesAuthManager(&#10;    private val dualisService: DualisService,&#10;    private val credentialManager: CredentialManager?,&#10;    private val scope: CoroutineScope&#10;) {&#10;    &#10;    enum class AuthResult {&#10;        SUCCESS,&#10;        FAILED,&#10;        NO_CREDENTIALS,&#10;        NO_STORED_CREDENTIALS&#10;    }&#10;&#10;    /**&#10;     * Ensures the user is authenticated before proceeding with data operations&#10;     * @param onResult Callback with the authentication result&#10;     */&#10;    fun ensureAuthentication(onResult: (AuthResult) -&gt; Unit) {&#10;        // If already authenticated, return success immediately&#10;        if (dualisService.isAuthenticated()) {&#10;            onResult(AuthResult.SUCCESS)&#10;            return&#10;        }&#10;&#10;        // Check if we have stored credentials to re-authenticate&#10;        if (credentialManager == null) {&#10;            onResult(AuthResult.NO_CREDENTIALS)&#10;            return&#10;        }&#10;&#10;        scope.launch {&#10;            val hasStoredCredentials = credentialManager.hasStoredCredentialsBlocking()&#10;            if (hasStoredCredentials) {&#10;                val username = credentialManager.getUsernameBlocking()&#10;                val password = credentialManager.getPassword()&#10;&#10;                if (username != null &amp;&amp; password != null) {&#10;                    Log.d(&quot;GradesAuthManager&quot;, &quot;Re-authenticating with stored credentials&quot;)&#10;                    dualisService.login(username, password) { result -&gt;&#10;                        if (result != null) {&#10;                            Log.d(&quot;GradesAuthManager&quot;, &quot;Re-authentication successful&quot;)&#10;                            onResult(AuthResult.SUCCESS)&#10;                        } else {&#10;                            Log.e(&quot;GradesAuthManager&quot;, &quot;Re-authentication failed&quot;)&#10;                            onResult(AuthResult.FAILED)&#10;                        }&#10;                    }&#10;                } else {&#10;                    Log.e(&quot;GradesAuthManager&quot;, &quot;No valid stored credentials found&quot;)&#10;                    onResult(AuthResult.NO_STORED_CREDENTIALS)&#10;                }&#10;            } else {&#10;                Log.e(&quot;GradesAuthManager&quot;, &quot;No stored credentials available&quot;)&#10;                onResult(AuthResult.NO_STORED_CREDENTIALS)&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/de/fampopprol/dhbwhorb/ui/screen/notificationSettingsScreen/ClassReminderSettingsSection.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/de/fampopprol/dhbwhorb/ui/screen/notificationSettingsScreen/ClassReminderSettingsSection.kt" />
              <option name="updatedContent" value="/*&#10; * SPDX-FileCopyrightText: 2024 Joinside &lt;suitor-fall-life@duck.com&gt;&#10; *&#10; * SPDX-License-Identifier: AGPL-3.0-or-later&#10; */&#10;&#10;package de.fampopprol.dhbwhorb.ui.screen.notificationSettingsScreen&#10;&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.AccessTime&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.DropdownMenu&#10;import androidx.compose.material3.DropdownMenuItem&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Switch&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.rememberCoroutineScope&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import de.fampopprol.dhbwhorb.R&#10;import de.fampopprol.dhbwhorb.data.notification.NotificationPreferencesManager&#10;import de.fampopprol.dhbwhorb.data.notification.NotificationScheduler&#10;import kotlinx.coroutines.launch&#10;&#10;@Composable&#10;fun ClassReminderSettingsSection(&#10;    notificationPreferencesManager: NotificationPreferencesManager,&#10;    notificationScheduler: NotificationScheduler,&#10;    notificationsEnabled: Boolean,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    val scope = rememberCoroutineScope()&#10;    val classReminderNotificationsEnabled by notificationPreferencesManager.classReminderNotificationsEnabled.collectAsState(initial = false)&#10;    val classReminderTimeMinutes by notificationPreferencesManager.classReminderTimeMinutes.collectAsState(initial = 30)&#10;&#10;    Card(&#10;        modifier = modifier.fillMaxWidth(),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            verticalArrangement = Arrangement.spacedBy(12.dp)&#10;        ) {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Column(modifier = Modifier.weight(1f)) {&#10;                    Text(&#10;                        text = stringResource(R.string.class_reminders),&#10;                        style = MaterialTheme.typography.titleMedium,&#10;                        fontWeight = FontWeight.Medium&#10;                    )&#10;                    Text(&#10;                        text = stringResource(R.string.class_reminders_description),&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                }&#10;                Switch(&#10;                    checked = classReminderNotificationsEnabled,&#10;                    enabled = notificationsEnabled,&#10;                    onCheckedChange = { enabled -&gt;&#10;                        scope.launch {&#10;                            notificationPreferencesManager.setClassReminderNotificationsEnabled(enabled)&#10;                            if (enabled) {&#10;                                notificationScheduler.scheduleClassReminders()&#10;                            } else {&#10;                                notificationScheduler.cancelClassReminders()&#10;                            }&#10;                        }&#10;                    }&#10;                )&#10;            }&#10;&#10;            // Time picker for reminder timing&#10;            if (classReminderNotificationsEnabled &amp;&amp; notificationsEnabled) {&#10;                var showDropdown by remember { mutableStateOf(false) }&#10;                val timeOptions = listOf(5, 10, 15, 30, 45, 60, 90, 120)&#10;&#10;                Card(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .clickable { showDropdown = true },&#10;                    colors = CardDefaults.cardColors(&#10;                        containerColor = MaterialTheme.colorScheme.surfaceVariant&#10;                    )&#10;                ) {&#10;                    Row(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .padding(12.dp),&#10;                        horizontalArrangement = Arrangement.SpaceBetween,&#10;                        verticalAlignment = Alignment.CenterVertically&#10;                    ) {&#10;                        Row(&#10;                            verticalAlignment = Alignment.CenterVertically,&#10;                            horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.AccessTime,&#10;                                contentDescription = null,&#10;                                tint = MaterialTheme.colorScheme.onSurfaceVariant&#10;                            )&#10;                            Column {&#10;                                Text(&#10;                                    text = stringResource(R.string.reminder_time),&#10;                                    style = MaterialTheme.typography.bodyMedium,&#10;                                    fontWeight = FontWeight.Medium&#10;                                )&#10;                                Text(&#10;                                    text = stringResource(R.string.minutes_before_class, classReminderTimeMinutes),&#10;                                    style = MaterialTheme.typography.bodySmall,&#10;                                    color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                    DropdownMenu(&#10;                        expanded = showDropdown,&#10;                        onDismissRequest = { showDropdown = false }&#10;                    ) {&#10;                        timeOptions.forEach { minutes -&gt;&#10;                            DropdownMenuItem(&#10;                                text = {&#10;                                    Text(&#10;                                        text = if (minutes == 1) stringResource(R.string.one_minute) else stringResource(R.string.x_minutes, minutes),&#10;                                        color = if (minutes == classReminderTimeMinutes)&#10;                                            MaterialTheme.colorScheme.primary&#10;                                        else MaterialTheme.colorScheme.onSurface&#10;                                    )&#10;                                },&#10;                                onClick = {&#10;                                    scope.launch {&#10;                                        notificationPreferencesManager.setClassReminderTimeMinutes(minutes)&#10;                                        notificationScheduler.scheduleClassReminders() // Reschedule with new time&#10;                                    }&#10;                                    showDropdown = false&#10;                                }&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/de/fampopprol/dhbwhorb/ui/screen/notificationSettingsScreen/DemoModeTestSection.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/de/fampopprol/dhbwhorb/ui/screen/notificationSettingsScreen/DemoModeTestSection.kt" />
              <option name="updatedContent" value="/*&#10; * SPDX-FileCopyrightText: 2024 Joinside &lt;suitor-fall-life@duck.com&gt;&#10; *&#10; * SPDX-License-Identifier: AGPL-3.0-or-later&#10; */&#10;&#10;package de.fampopprol.dhbwhorb.ui.screen.notificationSettingsScreen&#10;&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.DateRange&#10;import androidx.compose.material.icons.filled.Notifications&#10;import androidx.compose.material.icons.filled.Star&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.ButtonDefaults&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import de.fampopprol.dhbwhorb.R&#10;import de.fampopprol.dhbwhorb.data.notification.DHBWNotificationManager&#10;&#10;@Composable&#10;fun DemoModeTestSection(&#10;    modifier: Modifier = Modifier&#10;) {&#10;    val context = LocalContext.current&#10;&#10;    Card(&#10;        modifier = modifier.fillMaxWidth(),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = MaterialTheme.colorScheme.tertiaryContainer&#10;        )&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            verticalArrangement = Arrangement.spacedBy(12.dp)&#10;        ) {&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.Default.Notifications,&#10;                    contentDescription = null,&#10;                    tint = MaterialTheme.colorScheme.onTertiaryContainer&#10;                )&#10;                Text(&#10;                    text = stringResource(R.string.demo_mode_test_notifications),&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.SemiBold,&#10;                    color = MaterialTheme.colorScheme.onTertiaryContainer&#10;                )&#10;            }&#10;&#10;            Text(&#10;                text = stringResource(R.string.test_notifications_description),&#10;                style = MaterialTheme.typography.bodyMedium,&#10;                color = MaterialTheme.colorScheme.onTertiaryContainer.copy(alpha = 0.8f)&#10;            )&#10;&#10;            // Test Timetable Change Notification Button&#10;            Button(&#10;                onClick = {&#10;                    val notificationManager = DHBWNotificationManager(context)&#10;                    val demoChanges = listOf(&#10;                        &quot;Software Engineering moved to room HOR-120&quot;,&#10;                        &quot;Database Systems time changed to 10:00-11:30&quot;&#10;                    )&#10;                    notificationManager.showTimetableChangeNotification(demoChanges)&#10;                },&#10;                modifier = Modifier.fillMaxWidth(),&#10;                colors = ButtonDefaults.buttonColors(&#10;                    containerColor = MaterialTheme.colorScheme.primary&#10;                )&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.Default.DateRange,&#10;                    contentDescription = null,&#10;                    modifier = Modifier.padding(end = 8.dp)&#10;                )&#10;                Text(stringResource(R.string.test_timetable_change))&#10;            }&#10;&#10;            // Test Grade Change Notification Button&#10;            Button(&#10;                onClick = {&#10;                    val notificationManager = DHBWNotificationManager(context)&#10;                    val demoGrades = listOf(&#10;                        &quot;New grade available: Software Engineering - 1.3&quot;,&#10;                        &quot;New grade available: Database Systems - 1.7&quot;&#10;                    )&#10;                    notificationManager.showGradeChangeNotification(demoGrades)&#10;                },&#10;                modifier = Modifier.fillMaxWidth(),&#10;                colors = ButtonDefaults.buttonColors(&#10;                    containerColor = MaterialTheme.colorScheme.secondary&#10;                )&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.Default.Star,&#10;                    contentDescription = null,&#10;                    modifier = Modifier.padding(end = 8.dp)&#10;                )&#10;                Text(stringResource(R.string.test_grade_change))&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/de/fampopprol/dhbwhorb/ui/screen/notificationSettingsScreen/GeneralSettingsSection.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/de/fampopprol/dhbwhorb/ui/screen/notificationSettingsScreen/GeneralSettingsSection.kt" />
              <option name="updatedContent" value="/*&#10; * SPDX-FileCopyrightText: 2024 Joinside &lt;suitor-fall-life@duck.com&gt;&#10; *&#10; * SPDX-License-Identifier: AGPL-3.0-or-later&#10; */&#10;&#10;package de.fampopprol.dhbwhorb.ui.screen.notificationSettingsScreen&#10;&#10;import android.os.Build&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.DarkMode&#10;import androidx.compose.material.icons.filled.LightMode&#10;import androidx.compose.material.icons.filled.Palette&#10;import androidx.compose.material.icons.filled.Settings&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Switch&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.rememberCoroutineScope&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import de.fampopprol.dhbwhorb.R&#10;import de.fampopprol.dhbwhorb.data.theme.ThemePreferencesManager&#10;import de.fampopprol.dhbwhorb.ui.theme.ThemeMode&#10;import kotlinx.coroutines.launch&#10;&#10;@Composable&#10;fun GeneralSettingsSection(&#10;    themePreferencesManager: ThemePreferencesManager,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    val scope = rememberCoroutineScope()&#10;    val materialYouEnabled by themePreferencesManager.materialYouEnabled.collectAsState(initial = true)&#10;    val themeMode by themePreferencesManager.themeMode.collectAsState(initial = ThemeMode.SYSTEM)&#10;&#10;    Column(&#10;        modifier = modifier,&#10;        verticalArrangement = Arrangement.spacedBy(16.dp)&#10;    ) {&#10;        // General Settings Header&#10;        Row(&#10;            verticalAlignment = Alignment.CenterVertically,&#10;            horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;        ) {&#10;            Icon(&#10;                imageVector = Icons.Default.Settings,&#10;                contentDescription = null,&#10;                tint = MaterialTheme.colorScheme.primary&#10;            )&#10;            Text(&#10;                text = stringResource(R.string.general_settings),&#10;                style = MaterialTheme.typography.headlineMedium,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;&#10;        // Material You Theming Toggle (only show on Android 12+)&#10;        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.S) {&#10;            Card(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(16.dp),&#10;                    verticalArrangement = Arrangement.spacedBy(8.dp)&#10;                ) {&#10;                    Row(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        horizontalArrangement = Arrangement.SpaceBetween,&#10;                        verticalAlignment = Alignment.CenterVertically&#10;                    ) {&#10;                        Column(modifier = Modifier.weight(1f)) {&#10;                            Text(&#10;                                text = stringResource(R.string.material_you_theming),&#10;                                style = MaterialTheme.typography.titleMedium,&#10;                                fontWeight = FontWeight.SemiBold&#10;                            )&#10;                            Text(&#10;                                text = stringResource(R.string.material_you_description),&#10;                                style = MaterialTheme.typography.bodyMedium,&#10;                                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                            )&#10;                        }&#10;                        Switch(&#10;                            checked = materialYouEnabled,&#10;                            onCheckedChange = { enabled -&gt;&#10;                                scope.launch {&#10;                                    themePreferencesManager.setMaterialYouEnabled(enabled)&#10;                                }&#10;                            }&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        // Theme Mode Selection&#10;        Card(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)&#10;        ) {&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(16.dp),&#10;                verticalArrangement = Arrangement.spacedBy(12.dp)&#10;            ) {&#10;                Row(&#10;                    verticalAlignment = Alignment.CenterVertically,&#10;                    horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;                ) {&#10;                    Icon(&#10;                        imageVector = when (themeMode) {&#10;                            ThemeMode.LIGHT -&gt; Icons.Default.LightMode&#10;                            ThemeMode.DARK -&gt; Icons.Default.DarkMode&#10;                            ThemeMode.SYSTEM -&gt; Icons.Default.Palette&#10;                        },&#10;                        contentDescription = null,&#10;                        tint = MaterialTheme.colorScheme.primary&#10;                    )&#10;                    Column(modifier = Modifier.weight(1f)) {&#10;                        Text(&#10;                            text = stringResource(R.string.theme_mode),&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            fontWeight = FontWeight.SemiBold&#10;                        )&#10;                        Text(&#10;                            text = stringResource(R.string.theme_mode_description),&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                        )&#10;                    }&#10;                }&#10;&#10;                // Theme mode selection buttons&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;                ) {&#10;                    ThemeMode.entries.forEach { mode -&gt;&#10;                        val isSelected = themeMode == mode&#10;                        Card(&#10;                            modifier = Modifier&#10;                                .weight(1f)&#10;                                .clickable {&#10;                                    scope.launch {&#10;                                        themePreferencesManager.setThemeMode(mode)&#10;                                    }&#10;                                },&#10;                            colors = CardDefaults.cardColors(&#10;                                containerColor = if (isSelected)&#10;                                    MaterialTheme.colorScheme.primaryContainer&#10;                                else&#10;                                    MaterialTheme.colorScheme.surfaceVariant&#10;                            )&#10;                        ) {&#10;                            Column(&#10;                                modifier = Modifier&#10;                                    .fillMaxWidth()&#10;                                    .padding(12.dp),&#10;                                horizontalAlignment = Alignment.CenterHorizontally,&#10;                                verticalArrangement = Arrangement.spacedBy(4.dp)&#10;                            ) {&#10;                                Icon(&#10;                                    imageVector = when (mode) {&#10;                                        ThemeMode.LIGHT -&gt; Icons.Default.LightMode&#10;                                        ThemeMode.DARK -&gt; Icons.Default.DarkMode&#10;                                        ThemeMode.SYSTEM -&gt; Icons.Default.Palette&#10;                                    },&#10;                                    contentDescription = null,&#10;                                    tint = if (isSelected)&#10;                                        MaterialTheme.colorScheme.onPrimaryContainer&#10;                                    else&#10;                                        MaterialTheme.colorScheme.onSurfaceVariant&#10;                                )&#10;                                Text(&#10;                                    text = stringResource(when (mode) {&#10;                                        ThemeMode.LIGHT -&gt; R.string.theme_light&#10;                                        ThemeMode.DARK -&gt; R.string.theme_dark&#10;                                        ThemeMode.SYSTEM -&gt; R.string.theme_system&#10;                                    }),&#10;                                    style = MaterialTheme.typography.bodySmall,&#10;                                    fontWeight = if (isSelected) FontWeight.SemiBold else FontWeight.Normal,&#10;                                    color = if (isSelected)&#10;                                        MaterialTheme.colorScheme.onPrimaryContainer&#10;                                    else&#10;                                        MaterialTheme.colorScheme.onSurfaceVariant&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/de/fampopprol/dhbwhorb/ui/screen/notificationSettingsScreen/LogoutSection.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/de/fampopprol/dhbwhorb/ui/screen/notificationSettingsScreen/LogoutSection.kt" />
              <option name="originalContent" value="/*&#10; * SPDX-FileCopyrightText: 2024 Joinside &lt;suitor-fall-life@duck.com&gt;&#10; *&#10; * SPDX-License-Identifier: AGPL-3.0-or-later&#10; */&#10;&#10;package de.fampopprol.dhbwhorb.ui.screen.notificationSettingsScreen&#10;&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ExitToApp&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.ButtonDefaults&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.rememberCoroutineScope&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import de.fampopprol.dhbwhorb.R&#10;import de.fampopprol.dhbwhorb.data.security.CredentialManager&#10;import kotlinx.coroutines.launch&#10;&#10;@Composable&#10;fun LogoutSection(&#10;    credentialManager: CredentialManager,&#10;    onLogout: () -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    val scope = rememberCoroutineScope()&#10;&#10;    Card(&#10;        modifier = modifier.fillMaxWidth(),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = MaterialTheme.colorScheme.errorContainer&#10;        )&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            verticalArrangement = Arrangement.spacedBy(12.dp)&#10;        ) {&#10;            Text(&#10;                text = stringResource(R.string.general_settings), // Using existing string resource&#10;                style = MaterialTheme.typography.titleMedium,&#10;                fontWeight = FontWeight.SemiBold,&#10;                color = MaterialTheme.colorScheme.onErrorContainer&#10;            )&#10;&#10;            Text(&#10;                text = stringResource(R.string.enable_notifications_description), // Using existing string resource as placeholder&#10;                style = MaterialTheme.typography.bodyMedium,&#10;                color = MaterialTheme.colorScheme.onErrorContainer.copy(alpha = 0.8f)&#10;            )&#10;&#10;            Button(&#10;                onClick = {&#10;                    scope.launch {&#10;                        credentialManager.clearStoredCredentials() // Using correct method name&#10;                        onLogout()&#10;                    }&#10;                },&#10;                modifier = Modifier.fillMaxWidth(),&#10;                colors = ButtonDefaults.buttonColors(&#10;                    containerColor = MaterialTheme.colorScheme.error&#10;                )&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.AutoMirrored.Filled.ExitToApp,&#10;                    contentDescription = null,&#10;                    modifier = Modifier.padding(end = 8.dp)&#10;                )&#10;                Text(&#10;                    text = stringResource(R.string.general_settings), // Using existing string resource as placeholder&#10;                    color = MaterialTheme.colorScheme.onError&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="/*&#10; * SPDX-FileCopyrightText: 2024 Joinside &lt;suitor-fall-life@duck.com&gt;&#10; *&#10; * SPDX-License-Identifier: AGPL-3.0-or-later&#10; */&#10;&#10;package de.fampopprol.dhbwhorb.ui.screen.notificationSettingsScreen&#10;&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ExitToApp&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.ButtonDefaults&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.rememberCoroutineScope&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import de.fampopprol.dhbwhorb.R&#10;import de.fampopprol.dhbwhorb.data.security.CredentialManager&#10;import kotlinx.coroutines.launch&#10;&#10;@Composable&#10;fun LogoutSection(&#10;    credentialManager: CredentialManager,&#10;    onLogout: () -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    val scope = rememberCoroutineScope()&#10;&#10;    Card(&#10;        modifier = modifier.fillMaxWidth(),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = MaterialTheme.colorScheme.errorContainer&#10;        )&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            verticalArrangement = Arrangement.spacedBy(12.dp)&#10;        ) {&#10;            Text(&#10;                text = stringResource(R.string.general_settings), // Using existing string resource&#10;                style = MaterialTheme.typography.titleMedium,&#10;                fontWeight = FontWeight.SemiBold,&#10;                color = MaterialTheme.colorScheme.onErrorContainer&#10;            )&#10;&#10;            Text(&#10;                text = stringResource(R.string.enable_notifications_description), // Using existing string resource as placeholder&#10;                style = MaterialTheme.typography.bodyMedium,&#10;                color = MaterialTheme.colorScheme.onErrorContainer.copy(alpha = 0.8f)&#10;            )&#10;&#10;            Button(&#10;                onClick = {&#10;                    scope.launch {&#10;                        credentialManager.clearAllCredentials() // Using correct method name&#10;                        onLogout()&#10;                    }&#10;                },&#10;                modifier = Modifier.fillMaxWidth(),&#10;                colors = ButtonDefaults.buttonColors(&#10;                    containerColor = MaterialTheme.colorScheme.error&#10;                )&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.AutoMirrored.Filled.ExitToApp,&#10;                    contentDescription = null,&#10;                    modifier = Modifier.padding(end = 8.dp)&#10;                )&#10;                Text(&#10;                    text = stringResource(R.string.general_settings), // Using existing string resource as placeholder&#10;                    color = MaterialTheme.colorScheme.onError&#10;                )&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/de/fampopprol/dhbwhorb/ui/screen/notificationSettingsScreen/NotificationSettingsSection.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/de/fampopprol/dhbwhorb/ui/screen/notificationSettingsScreen/NotificationSettingsSection.kt" />
              <option name="updatedContent" value="/*&#10; * SPDX-FileCopyrightText: 2024 Joinside &lt;suitor-fall-life@duck.com&gt;&#10; *&#10; * SPDX-License-Identifier: AGPL-3.0-or-later&#10; */&#10;&#10;package de.fampopprol.dhbwhorb.ui.screen.notificationSettingsScreen&#10;&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Notifications&#10;import androidx.compose.material.icons.filled.NotificationsOff&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Switch&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.rememberCoroutineScope&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import de.fampopprol.dhbwhorb.R&#10;import de.fampopprol.dhbwhorb.data.notification.NotificationPreferencesManager&#10;import de.fampopprol.dhbwhorb.data.notification.NotificationScheduler&#10;import kotlinx.coroutines.launch&#10;&#10;@Composable&#10;fun NotificationSettingsSection(&#10;    notificationPreferencesManager: NotificationPreferencesManager,&#10;    notificationScheduler: NotificationScheduler,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    val scope = rememberCoroutineScope()&#10;    val notificationsEnabled by notificationPreferencesManager.notificationsEnabled.collectAsState(initial = true)&#10;    val timetableNotificationsEnabled by notificationPreferencesManager.timetableNotificationsEnabled.collectAsState(initial = true)&#10;    val gradeNotificationsEnabled by notificationPreferencesManager.gradeNotificationsEnabled.collectAsState(initial = true)&#10;&#10;    Column(&#10;        modifier = modifier,&#10;        verticalArrangement = Arrangement.spacedBy(16.dp)&#10;    ) {&#10;        // Notification Settings Header&#10;        Row(&#10;            verticalAlignment = Alignment.CenterVertically,&#10;            horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;        ) {&#10;            Icon(&#10;                imageVector = if (notificationsEnabled) Icons.Default.Notifications else Icons.Default.NotificationsOff,&#10;                contentDescription = null,&#10;                tint = MaterialTheme.colorScheme.primary&#10;            )&#10;            Text(&#10;                text = stringResource(R.string.notification_settings),&#10;                style = MaterialTheme.typography.headlineMedium,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;&#10;        // Master notification toggle&#10;        Card(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;        ) {&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(16.dp),&#10;                verticalArrangement = Arrangement.spacedBy(8.dp)&#10;            ) {&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.SpaceBetween,&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Column(modifier = Modifier.weight(1f)) {&#10;                        Text(&#10;                            text = stringResource(R.string.enable_notifications),&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            fontWeight = FontWeight.SemiBold&#10;                        )&#10;                        Text(&#10;                            text = stringResource(R.string.enable_notifications_description),&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                        )&#10;                    }&#10;                    Switch(&#10;                        checked = notificationsEnabled,&#10;                        onCheckedChange = { enabled -&gt;&#10;                            scope.launch {&#10;                                notificationPreferencesManager.setNotificationsEnabled(enabled)&#10;                                if (enabled) {&#10;                                    notificationScheduler.schedulePeriodicNotifications()&#10;                                } else {&#10;                                    notificationScheduler.cancelPeriodicNotifications()&#10;                                }&#10;                            }&#10;                        }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;&#10;        // Timetable notifications&#10;        Card(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)&#10;        ) {&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(16.dp),&#10;                verticalArrangement = Arrangement.spacedBy(8.dp)&#10;            ) {&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.SpaceBetween,&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Column(modifier = Modifier.weight(1f)) {&#10;                        Text(&#10;                            text = stringResource(R.string.timetable_changes),&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            fontWeight = FontWeight.Medium&#10;                        )&#10;                        Text(&#10;                            text = stringResource(R.string.timetable_changes_description),&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                        )&#10;                    }&#10;                    Switch(&#10;                        checked = timetableNotificationsEnabled,&#10;                        enabled = notificationsEnabled,&#10;                        onCheckedChange = { enabled -&gt;&#10;                            scope.launch {&#10;                                notificationPreferencesManager.setTimetableNotificationsEnabled(enabled)&#10;                            }&#10;                        }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;&#10;        // Grade notifications&#10;        Card(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)&#10;        ) {&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(16.dp),&#10;                verticalArrangement = Arrangement.spacedBy(8.dp)&#10;            ) {&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.SpaceBetween,&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Column(modifier = Modifier.weight(1f)) {&#10;                        Text(&#10;                            text = stringResource(R.string.new_grades),&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            fontWeight = FontWeight.Medium&#10;                        )&#10;                        Text(&#10;                            text = stringResource(R.string.new_grades_description),&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                        )&#10;                    }&#10;                    Switch(&#10;                        checked = gradeNotificationsEnabled,&#10;                        enabled = notificationsEnabled,&#10;                        onCheckedChange = { enabled -&gt;&#10;                            scope.launch {&#10;                                notificationPreferencesManager.setGradeNotificationsEnabled(enabled)&#10;                            }&#10;                        }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/de/fampopprol/dhbwhorb/ui/screen/settingsScreen/ClassReminderSettingsSection.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/de/fampopprol/dhbwhorb/ui/screen/settingsScreen/ClassReminderSettingsSection.kt" />
              <option name="originalContent" value="/*&#10; * SPDX-FileCopyrightText: 2024 Joinside &lt;suitor-fall-life@duck.com&gt;&#10; *&#10; * SPDX-License-Identifier: AGPL-3.0-or-later&#10; */&#10;&#10;package de.fampopprol.dhbwhorb.ui.screen.settingsScreen&#10;&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.AccessTime&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.DropdownMenu&#10;import androidx.compose.material3.DropdownMenuItem&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Switch&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.rememberCoroutineScope&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import de.fampopprol.dhbwhorb.R&#10;import de.fampopprol.dhbwhorb.data.notification.NotificationPreferencesManager&#10;import de.fampopprol.dhbwhorb.data.notification.NotificationScheduler&#10;import kotlinx.coroutines.launch&#10;&#10;@Composable&#10;fun ClassReminderSettingsSection(&#10;    notificationPreferencesManager: NotificationPreferencesManager,&#10;    notificationScheduler: NotificationScheduler,&#10;    notificationsEnabled: Boolean,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    val scope = rememberCoroutineScope()&#10;    val classReminderNotificationsEnabled by notificationPreferencesManager.classReminderNotificationsEnabled.collectAsState(initial = false)&#10;    val classReminderTimeMinutes by notificationPreferencesManager.classReminderTimeMinutes.collectAsState(initial = 30)&#10;&#10;    Card(&#10;        modifier = modifier.fillMaxWidth(),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            verticalArrangement = Arrangement.spacedBy(12.dp)&#10;        ) {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Column(modifier = Modifier.weight(1f)) {&#10;                    Text(&#10;                        text = stringResource(R.string.class_reminders),&#10;                        style = MaterialTheme.typography.titleMedium,&#10;                        fontWeight = FontWeight.Medium&#10;                    )&#10;                    Text(&#10;                        text = stringResource(R.string.class_reminders_description),&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                }&#10;                Switch(&#10;                    checked = classReminderNotificationsEnabled,&#10;                    enabled = notificationsEnabled,&#10;                    onCheckedChange = { enabled -&gt;&#10;                        scope.launch {&#10;                            notificationPreferencesManager.setClassReminderNotificationsEnabled(enabled)&#10;                            if (enabled) {&#10;                                notificationScheduler.scheduleClassReminders()&#10;                            } else {&#10;                                notificationScheduler.cancelClassReminders()&#10;                            }&#10;                        }&#10;                    }&#10;                )&#10;            }&#10;&#10;            // Time picker for reminder timing&#10;            if (classReminderNotificationsEnabled &amp;&amp; notificationsEnabled) {&#10;                var showDropdown by remember { mutableStateOf(false) }&#10;                val timeOptions = listOf(5, 10, 15, 30, 45, 60, 90, 120)&#10;&#10;                Card(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .clickable { showDropdown = true },&#10;                    colors = CardDefaults.cardColors(&#10;                        containerColor = MaterialTheme.colorScheme.surfaceVariant&#10;                    )&#10;                ) {&#10;                    Row(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .padding(12.dp),&#10;                        horizontalArrangement = Arrangement.SpaceBetween,&#10;                        verticalAlignment = Alignment.CenterVertically&#10;                    ) {&#10;                        Row(&#10;                            verticalAlignment = Alignment.CenterVertically,&#10;                            horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.AccessTime,&#10;                                contentDescription = null,&#10;                                tint = MaterialTheme.colorScheme.onSurfaceVariant&#10;                            )&#10;                            Column {&#10;                                Text(&#10;                                    text = stringResource(R.string.reminder_time),&#10;                                    style = MaterialTheme.typography.bodyMedium,&#10;                                    fontWeight = FontWeight.Medium&#10;                                )&#10;                                Text(&#10;                                    text = stringResource(R.string.minutes_before_class, classReminderTimeMinutes),&#10;                                    style = MaterialTheme.typography.bodySmall,&#10;                                    color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                    DropdownMenu(&#10;                        expanded = showDropdown,&#10;                        onDismissRequest = { showDropdown = false }&#10;                    ) {&#10;                        timeOptions.forEach { minutes -&gt;&#10;                            DropdownMenuItem(&#10;                                text = {&#10;                                    Text(&#10;                                        text = if (minutes == 1) stringResource(R.string.one_minute) else stringResource(R.string.x_minutes, minutes),&#10;                                        color = if (minutes == classReminderTimeMinutes)&#10;                                            MaterialTheme.colorScheme.primary&#10;                                        else MaterialTheme.colorScheme.onSurface&#10;                                    )&#10;                                },&#10;                                onClick = {&#10;                                    scope.launch {&#10;                                        notificationPreferencesManager.setClassReminderTimeMinutes(minutes)&#10;                                        notificationScheduler.scheduleClassReminders() // Reschedule with new time&#10;                                    }&#10;                                    showDropdown = false&#10;                                }&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="/*&#10; * SPDX-FileCopyrightText: 2024 Joinside &lt;suitor-fall-life@duck.com&gt;&#10; *&#10; * SPDX-License-Identifier: AGPL-3.0-or-later&#10; */&#10;&#10;package de.fampopprol.dhbwhorb.ui.screen.settingsScreen&#10;&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;import de.fampopprol.dhbwhorb.data.notification.NotificationPreferencesManager&#10;import de.fampopprol.dhbwhorb.data.notification.NotificationScheduler&#10;import de.fampopprol.dhbwhorb.ui.screen.settingsScreen.classReminderSection.ClassReminderTimePicker&#10;import de.fampopprol.dhbwhorb.ui.screen.settingsScreen.classReminderSection.ClassReminderToggle&#10;&#10;@Composable&#10;fun ClassReminderSettingsSection(&#10;    notificationPreferencesManager: NotificationPreferencesManager,&#10;    notificationScheduler: NotificationScheduler,&#10;    notificationsEnabled: Boolean,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    val classReminderNotificationsEnabled by notificationPreferencesManager.classReminderNotificationsEnabled.collectAsState(initial = false)&#10;    val classReminderTimeMinutes by notificationPreferencesManager.classReminderTimeMinutes.collectAsState(initial = 30)&#10;&#10;    Card(&#10;        modifier = modifier.fillMaxWidth(),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            verticalArrangement = Arrangement.spacedBy(12.dp)&#10;        ) {&#10;            ClassReminderToggle(&#10;                notificationPreferencesManager = notificationPreferencesManager,&#10;                notificationScheduler = notificationScheduler,&#10;                classReminderNotificationsEnabled = classReminderNotificationsEnabled,&#10;                notificationsEnabled = notificationsEnabled&#10;            )&#10;&#10;            // Show time picker only when reminders are enabled and notifications are allowed&#10;            if (classReminderNotificationsEnabled &amp;&amp; notificationsEnabled) {&#10;                ClassReminderTimePicker(&#10;                    notificationPreferencesManager = notificationPreferencesManager,&#10;                    notificationScheduler = notificationScheduler,&#10;                    classReminderTimeMinutes = classReminderTimeMinutes&#10;                )&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/de/fampopprol/dhbwhorb/ui/screen/settingsScreen/GeneralSettingsSection.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/de/fampopprol/dhbwhorb/ui/screen/settingsScreen/GeneralSettingsSection.kt" />
              <option name="originalContent" value="/*&#10; * SPDX-FileCopyrightText: 2024 Joinside &lt;suitor-fall-life@duck.com&gt;&#10; *&#10; * SPDX-License-Identifier: AGPL-3.0-or-later&#10; */&#10;&#10;package de.fampopprol.dhbwhorb.ui.screen.settingsScreen&#10;&#10;import android.os.Build&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.DarkMode&#10;import androidx.compose.material.icons.filled.LightMode&#10;import androidx.compose.material.icons.filled.Palette&#10;import androidx.compose.material.icons.filled.Settings&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Switch&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.rememberCoroutineScope&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import de.fampopprol.dhbwhorb.R&#10;import de.fampopprol.dhbwhorb.data.theme.ThemePreferencesManager&#10;import de.fampopprol.dhbwhorb.ui.theme.ThemeMode&#10;import kotlinx.coroutines.launch&#10;&#10;@Composable&#10;fun GeneralSettingsSection(&#10;    themePreferencesManager: ThemePreferencesManager,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    val scope = rememberCoroutineScope()&#10;    val materialYouEnabled by themePreferencesManager.materialYouEnabled.collectAsState(initial = true)&#10;    val themeMode by themePreferencesManager.themeMode.collectAsState(initial = ThemeMode.SYSTEM)&#10;&#10;    Column(&#10;        modifier = modifier,&#10;        verticalArrangement = Arrangement.spacedBy(16.dp)&#10;    ) {&#10;        // General Settings Header&#10;        Row(&#10;            verticalAlignment = Alignment.CenterVertically,&#10;            horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;        ) {&#10;            Icon(&#10;                imageVector = Icons.Default.Settings,&#10;                contentDescription = null,&#10;                tint = MaterialTheme.colorScheme.primary&#10;            )&#10;            Text(&#10;                text = stringResource(R.string.general_settings),&#10;                style = MaterialTheme.typography.headlineMedium,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;&#10;        // Material You Theming Toggle (only show on Android 12+)&#10;        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.S) {&#10;            Card(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(16.dp),&#10;                    verticalArrangement = Arrangement.spacedBy(8.dp)&#10;                ) {&#10;                    Row(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        horizontalArrangement = Arrangement.SpaceBetween,&#10;                        verticalAlignment = Alignment.CenterVertically&#10;                    ) {&#10;                        Column(modifier = Modifier.weight(1f)) {&#10;                            Text(&#10;                                text = stringResource(R.string.material_you_theming),&#10;                                style = MaterialTheme.typography.titleMedium,&#10;                                fontWeight = FontWeight.SemiBold&#10;                            )&#10;                            Text(&#10;                                text = stringResource(R.string.material_you_description),&#10;                                style = MaterialTheme.typography.bodyMedium,&#10;                                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                            )&#10;                        }&#10;                        Switch(&#10;                            checked = materialYouEnabled,&#10;                            onCheckedChange = { enabled -&gt;&#10;                                scope.launch {&#10;                                    themePreferencesManager.setMaterialYouEnabled(enabled)&#10;                                }&#10;                            }&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        // Theme Mode Selection&#10;        Card(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)&#10;        ) {&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(16.dp),&#10;                verticalArrangement = Arrangement.spacedBy(12.dp)&#10;            ) {&#10;                Row(&#10;                    verticalAlignment = Alignment.CenterVertically,&#10;                    horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;                ) {&#10;                    Icon(&#10;                        imageVector = when (themeMode) {&#10;                            ThemeMode.LIGHT -&gt; Icons.Default.LightMode&#10;                            ThemeMode.DARK -&gt; Icons.Default.DarkMode&#10;                            ThemeMode.SYSTEM -&gt; Icons.Default.Palette&#10;                        },&#10;                        contentDescription = null,&#10;                        tint = MaterialTheme.colorScheme.primary&#10;                    )&#10;                    Column(modifier = Modifier.weight(1f)) {&#10;                        Text(&#10;                            text = stringResource(R.string.theme_mode),&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            fontWeight = FontWeight.SemiBold&#10;                        )&#10;                        Text(&#10;                            text = stringResource(R.string.theme_mode_description),&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                        )&#10;                    }&#10;                }&#10;&#10;                // Theme mode selection buttons&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;                ) {&#10;                    ThemeMode.entries.forEach { mode -&gt;&#10;                        val isSelected = themeMode == mode&#10;                        Card(&#10;                            modifier = Modifier&#10;                                .weight(1f)&#10;                                .clickable {&#10;                                    scope.launch {&#10;                                        themePreferencesManager.setThemeMode(mode)&#10;                                    }&#10;                                },&#10;                            colors = CardDefaults.cardColors(&#10;                                containerColor = if (isSelected)&#10;                                    MaterialTheme.colorScheme.primaryContainer&#10;                                else&#10;                                    MaterialTheme.colorScheme.surfaceVariant&#10;                            )&#10;                        ) {&#10;                            Column(&#10;                                modifier = Modifier&#10;                                    .fillMaxWidth()&#10;                                    .padding(12.dp),&#10;                                horizontalAlignment = Alignment.CenterHorizontally,&#10;                                verticalArrangement = Arrangement.spacedBy(4.dp)&#10;                            ) {&#10;                                Icon(&#10;                                    imageVector = when (mode) {&#10;                                        ThemeMode.LIGHT -&gt; Icons.Default.LightMode&#10;                                        ThemeMode.DARK -&gt; Icons.Default.DarkMode&#10;                                        ThemeMode.SYSTEM -&gt; Icons.Default.Palette&#10;                                    },&#10;                                    contentDescription = null,&#10;                                    tint = if (isSelected)&#10;                                        MaterialTheme.colorScheme.onPrimaryContainer&#10;                                    else&#10;                                        MaterialTheme.colorScheme.onSurfaceVariant&#10;                                )&#10;                                Text(&#10;                                    text = stringResource(&#10;                                        when (mode) {&#10;                                            ThemeMode.LIGHT -&gt; R.string.theme_light&#10;                                            ThemeMode.DARK -&gt; R.string.theme_dark&#10;                                            ThemeMode.SYSTEM -&gt; R.string.theme_system&#10;                                        }&#10;                                    ),&#10;                                    style = MaterialTheme.typography.bodySmall,&#10;                                    fontWeight = if (isSelected) FontWeight.SemiBold else FontWeight.Normal,&#10;                                    color = if (isSelected)&#10;                                        MaterialTheme.colorScheme.onPrimaryContainer&#10;                                    else&#10;                                        MaterialTheme.colorScheme.onSurfaceVariant&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="/*&#10; * SPDX-FileCopyrightText: 2024 Joinside &lt;suitor-fall-life@duck.com&gt;&#10; *&#10; * SPDX-License-Identifier: AGPL-3.0-or-later&#10; */&#10;&#10;package de.fampopprol.dhbwhorb.ui.screen.settingsScreen&#10;&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;import de.fampopprol.dhbwhorb.data.theme.ThemePreferencesManager&#10;import de.fampopprol.dhbwhorb.ui.screen.settingsScreen.generalSettingsSection.GeneralSettingsHeader&#10;import de.fampopprol.dhbwhorb.ui.screen.settingsScreen.generalSettingsSection.MaterialYouToggle&#10;import de.fampopprol.dhbwhorb.ui.screen.settingsScreen.generalSettingsSection.ThemeModeSelector&#10;import de.fampopprol.dhbwhorb.ui.theme.ThemeMode&#10;&#10;@Composable&#10;fun GeneralSettingsSection(&#10;    themePreferencesManager: ThemePreferencesManager,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    val materialYouEnabled by themePreferencesManager.materialYouEnabled.collectAsState(initial = true)&#10;    val themeMode by themePreferencesManager.themeMode.collectAsState(initial = ThemeMode.SYSTEM)&#10;&#10;    Column(&#10;        modifier = modifier,&#10;        verticalArrangement = Arrangement.spacedBy(16.dp)&#10;    ) {&#10;        GeneralSettingsHeader()&#10;&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;&#10;        MaterialYouToggle(&#10;            themePreferencesManager = themePreferencesManager,&#10;            materialYouEnabled = materialYouEnabled&#10;        )&#10;&#10;        ThemeModeSelector(&#10;            themePreferencesManager = themePreferencesManager,&#10;            themeMode = themeMode&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/de/fampopprol/dhbwhorb/ui/screen/settingsScreen/classReminderSection/ClassReminderTimePicker.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/de/fampopprol/dhbwhorb/ui/screen/settingsScreen/classReminderSection/ClassReminderTimePicker.kt" />
              <option name="updatedContent" value="/*&#10; * SPDX-FileCopyrightText: 2024 Joinside &lt;suitor-fall-life@duck.com&gt;&#10; *&#10; * SPDX-License-Identifier: AGPL-3.0-or-later&#10; */&#10;&#10;package de.fampopprol.dhbwhorb.ui.screen.settingsScreen.classReminderSection&#10;&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.AccessTime&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.DropdownMenu&#10;import androidx.compose.material3.DropdownMenuItem&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.rememberCoroutineScope&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import de.fampopprol.dhbwhorb.R&#10;import de.fampopprol.dhbwhorb.data.notification.NotificationPreferencesManager&#10;import de.fampopprol.dhbwhorb.data.notification.NotificationScheduler&#10;import kotlinx.coroutines.launch&#10;&#10;@Composable&#10;fun ClassReminderTimePicker(&#10;    notificationPreferencesManager: NotificationPreferencesManager,&#10;    notificationScheduler: NotificationScheduler,&#10;    classReminderTimeMinutes: Int,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    val scope = rememberCoroutineScope()&#10;    var showDropdown by remember { mutableStateOf(false) }&#10;    val timeOptions = listOf(5, 10, 15, 30, 45, 60, 90, 120)&#10;&#10;    Card(&#10;        modifier = modifier&#10;            .fillMaxWidth()&#10;            .clickable { showDropdown = true },&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = MaterialTheme.colorScheme.surfaceVariant&#10;        )&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(12.dp),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.Default.AccessTime,&#10;                    contentDescription = null,&#10;                    tint = MaterialTheme.colorScheme.onSurfaceVariant&#10;                )&#10;                Column {&#10;                    Text(&#10;                        text = stringResource(R.string.reminder_time),&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        fontWeight = FontWeight.Medium&#10;                    )&#10;                    Text(&#10;                        text = stringResource(R.string.minutes_before_class, classReminderTimeMinutes),&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                }&#10;            }&#10;        }&#10;&#10;        DropdownMenu(&#10;            expanded = showDropdown,&#10;            onDismissRequest = { showDropdown = false }&#10;        ) {&#10;            timeOptions.forEach { minutes -&gt;&#10;                DropdownMenuItem(&#10;                    text = {&#10;                        Text(&#10;                            text = if (minutes == 1) stringResource(R.string.one_minute) else stringResource(R.string.x_minutes, minutes),&#10;                            color = if (minutes == classReminderTimeMinutes)&#10;                                MaterialTheme.colorScheme.primary&#10;                            else MaterialTheme.colorScheme.onSurface&#10;                        )&#10;                    },&#10;                    onClick = {&#10;                        scope.launch {&#10;                            notificationPreferencesManager.setClassReminderTimeMinutes(minutes)&#10;                            notificationScheduler.scheduleClassReminders() // Reschedule with new time&#10;                        }&#10;                        showDropdown = false&#10;                    }&#10;                )&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/de/fampopprol/dhbwhorb/ui/screen/settingsScreen/classReminderSection/ClassReminderToggle.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/de/fampopprol/dhbwhorb/ui/screen/settingsScreen/classReminderSection/ClassReminderToggle.kt" />
              <option name="updatedContent" value="/*&#10; * SPDX-FileCopyrightText: 2024 Joinside &lt;suitor-fall-life@duck.com&gt;&#10; *&#10; * SPDX-License-Identifier: AGPL-3.0-or-later&#10; */&#10;&#10;package de.fampopprol.dhbwhorb.ui.screen.settingsScreen.classReminderSection&#10;&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Switch&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.rememberCoroutineScope&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import de.fampopprol.dhbwhorb.R&#10;import de.fampopprol.dhbwhorb.data.notification.NotificationPreferencesManager&#10;import de.fampopprol.dhbwhorb.data.notification.NotificationScheduler&#10;import kotlinx.coroutines.launch&#10;&#10;@Composable&#10;fun ClassReminderToggle(&#10;    notificationPreferencesManager: NotificationPreferencesManager,&#10;    notificationScheduler: NotificationScheduler,&#10;    classReminderNotificationsEnabled: Boolean,&#10;    notificationsEnabled: Boolean,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    val scope = rememberCoroutineScope()&#10;&#10;    Row(&#10;        modifier = modifier.fillMaxWidth(),&#10;        horizontalArrangement = Arrangement.SpaceBetween,&#10;        verticalAlignment = Alignment.CenterVertically&#10;    ) {&#10;        Column(modifier = Modifier.weight(1f)) {&#10;            Text(&#10;                text = stringResource(R.string.class_reminders),&#10;                style = MaterialTheme.typography.titleMedium,&#10;                fontWeight = FontWeight.Medium&#10;            )&#10;            Text(&#10;                text = stringResource(R.string.class_reminders_description),&#10;                style = MaterialTheme.typography.bodyMedium,&#10;                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;            )&#10;        }&#10;        Switch(&#10;            checked = classReminderNotificationsEnabled,&#10;            enabled = notificationsEnabled,&#10;            onCheckedChange = { enabled -&gt;&#10;                scope.launch {&#10;                    notificationPreferencesManager.setClassReminderNotificationsEnabled(enabled)&#10;                    if (enabled) {&#10;                        notificationScheduler.scheduleClassReminders()&#10;                    } else {&#10;                        notificationScheduler.cancelClassReminders()&#10;                    }&#10;                }&#10;            }&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/de/fampopprol/dhbwhorb/ui/screen/settingsScreen/generalSettingsSection/GeneralSettingsHeader.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/de/fampopprol/dhbwhorb/ui/screen/settingsScreen/generalSettingsSection/GeneralSettingsHeader.kt" />
              <option name="updatedContent" value="/*&#10; * SPDX-FileCopyrightText: 2024 Joinside &lt;suitor-fall-life@duck.com&gt;&#10; *&#10; * SPDX-License-Identifier: AGPL-3.0-or-later&#10; */&#10;&#10;package de.fampopprol.dhbwhorb.ui.screen.settingsScreen.generalSettingsSection&#10;&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Settings&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import de.fampopprol.dhbwhorb.R&#10;&#10;@Composable&#10;fun GeneralSettingsHeader(&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Row(&#10;        modifier = modifier,&#10;        verticalAlignment = Alignment.CenterVertically,&#10;        horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;    ) {&#10;        Icon(&#10;            imageVector = Icons.Default.Settings,&#10;            contentDescription = null,&#10;            tint = MaterialTheme.colorScheme.primary&#10;        )&#10;        Text(&#10;            text = stringResource(R.string.general_settings),&#10;            style = MaterialTheme.typography.headlineMedium,&#10;            fontWeight = FontWeight.Bold&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/de/fampopprol/dhbwhorb/ui/screen/settingsScreen/generalSettingsSection/MaterialYouToggle.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/de/fampopprol/dhbwhorb/ui/screen/settingsScreen/generalSettingsSection/MaterialYouToggle.kt" />
              <option name="updatedContent" value="/*&#10; * SPDX-FileCopyrightText: 2024 Joinside &lt;suitor-fall-life@duck.com&gt;&#10; *&#10; * SPDX-License-Identifier: AGPL-3.0-or-later&#10; */&#10;&#10;package de.fampopprol.dhbwhorb.ui.screen.settingsScreen.generalSettingsSection&#10;&#10;import android.os.Build&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Switch&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.rememberCoroutineScope&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import de.fampopprol.dhbwhorb.R&#10;import de.fampopprol.dhbwhorb.data.theme.ThemePreferencesManager&#10;import kotlinx.coroutines.launch&#10;&#10;@Composable&#10;fun MaterialYouToggle(&#10;    themePreferencesManager: ThemePreferencesManager,&#10;    materialYouEnabled: Boolean,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    val scope = rememberCoroutineScope()&#10;&#10;    // Only show on Android 12+&#10;    if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.S) {&#10;        Card(&#10;            modifier = modifier.fillMaxWidth(),&#10;            elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;        ) {&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(16.dp),&#10;                verticalArrangement = Arrangement.spacedBy(8.dp)&#10;            ) {&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.SpaceBetween,&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Column(modifier = Modifier.weight(1f)) {&#10;                        Text(&#10;                            text = stringResource(R.string.material_you_theming),&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            fontWeight = FontWeight.SemiBold&#10;                        )&#10;                        Text(&#10;                            text = stringResource(R.string.material_you_description),&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                        )&#10;                    }&#10;                    Switch(&#10;                        checked = materialYouEnabled,&#10;                        onCheckedChange = { enabled -&gt;&#10;                            scope.launch {&#10;                                themePreferencesManager.setMaterialYouEnabled(enabled)&#10;                            }&#10;                        }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/de/fampopprol/dhbwhorb/ui/screen/settingsScreen/generalSettingsSection/ThemeModeButton.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/de/fampopprol/dhbwhorb/ui/screen/settingsScreen/generalSettingsSection/ThemeModeButton.kt" />
              <option name="updatedContent" value="/*&#10; * SPDX-FileCopyrightText: 2024 Joinside &lt;suitor-fall-life@duck.com&gt;&#10; *&#10; * SPDX-License-Identifier: AGPL-3.0-or-later&#10; */&#10;&#10;package de.fampopprol.dhbwhorb.ui.screen.settingsScreen.generalSettingsSection&#10;&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.DarkMode&#10;import androidx.compose.material.icons.filled.LightMode&#10;import androidx.compose.material.icons.filled.Palette&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import de.fampopprol.dhbwhorb.R&#10;import de.fampopprol.dhbwhorb.ui.theme.ThemeMode&#10;&#10;@Composable&#10;fun ThemeModeButton(&#10;    themeMode: ThemeMode,&#10;    isSelected: Boolean,&#10;    onClick: () -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Card(&#10;        modifier = modifier&#10;            .fillMaxWidth()&#10;            .clickable { onClick() },&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = if (isSelected)&#10;                MaterialTheme.colorScheme.primaryContainer&#10;            else&#10;                MaterialTheme.colorScheme.surfaceVariant&#10;        )&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(12.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally,&#10;            verticalArrangement = Arrangement.spacedBy(4.dp)&#10;        ) {&#10;            Icon(&#10;                imageVector = when (themeMode) {&#10;                    ThemeMode.LIGHT -&gt; Icons.Default.LightMode&#10;                    ThemeMode.DARK -&gt; Icons.Default.DarkMode&#10;                    ThemeMode.SYSTEM -&gt; Icons.Default.Palette&#10;                },&#10;                contentDescription = null,&#10;                tint = if (isSelected)&#10;                    MaterialTheme.colorScheme.onPrimaryContainer&#10;                else&#10;                    MaterialTheme.colorScheme.onSurfaceVariant&#10;            )&#10;            Text(&#10;                text = stringResource(&#10;                    when (themeMode) {&#10;                        ThemeMode.LIGHT -&gt; R.string.theme_light&#10;                        ThemeMode.DARK -&gt; R.string.theme_dark&#10;                        ThemeMode.SYSTEM -&gt; R.string.theme_system&#10;                    }&#10;                ),&#10;                style = MaterialTheme.typography.bodySmall,&#10;                fontWeight = if (isSelected) FontWeight.SemiBold else FontWeight.Normal,&#10;                color = if (isSelected)&#10;                    MaterialTheme.colorScheme.onPrimaryContainer&#10;                else&#10;                    MaterialTheme.colorScheme.onSurfaceVariant&#10;            )&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/de/fampopprol/dhbwhorb/ui/screen/settingsScreen/generalSettingsSection/ThemeModeButtonRow.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/de/fampopprol/dhbwhorb/ui/screen/settingsScreen/generalSettingsSection/ThemeModeButtonRow.kt" />
              <option name="updatedContent" value="/*&#10; * SPDX-FileCopyrightText: 2024 Joinside &lt;suitor-fall-life@duck.com&gt;&#10; *&#10; * SPDX-License-Identifier: AGPL-3.0-or-later&#10; */&#10;&#10;package de.fampopprol.dhbwhorb.ui.screen.settingsScreen.generalSettingsSection&#10;&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.rememberCoroutineScope&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;import de.fampopprol.dhbwhorb.data.theme.ThemePreferencesManager&#10;import de.fampopprol.dhbwhorb.ui.theme.ThemeMode&#10;import kotlinx.coroutines.launch&#10;&#10;@Composable&#10;fun ThemeModeButtonRow(&#10;    themePreferencesManager: ThemePreferencesManager,&#10;    currentThemeMode: ThemeMode,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    val scope = rememberCoroutineScope()&#10;&#10;    Row(&#10;        modifier = modifier.fillMaxWidth(),&#10;        horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;    ) {&#10;        ThemeMode.entries.forEach { mode -&gt;&#10;            ThemeModeButton(&#10;                themeMode = mode,&#10;                isSelected = currentThemeMode == mode,&#10;                onClick = {&#10;                    scope.launch {&#10;                        themePreferencesManager.setThemeMode(mode)&#10;                    }&#10;                },&#10;                modifier = Modifier.weight(1f)&#10;            )&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/de/fampopprol/dhbwhorb/ui/screen/settingsScreen/generalSettingsSection/ThemeModeHeader.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/de/fampopprol/dhbwhorb/ui/screen/settingsScreen/generalSettingsSection/ThemeModeHeader.kt" />
              <option name="updatedContent" value="/*&#10; * SPDX-FileCopyrightText: 2024 Joinside &lt;suitor-fall-life@duck.com&gt;&#10; *&#10; * SPDX-License-Identifier: AGPL-3.0-or-later&#10; */&#10;&#10;package de.fampopprol.dhbwhorb.ui.screen.settingsScreen.generalSettingsSection&#10;&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.DarkMode&#10;import androidx.compose.material.icons.filled.LightMode&#10;import androidx.compose.material.icons.filled.Palette&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import de.fampopprol.dhbwhorb.R&#10;import de.fampopprol.dhbwhorb.ui.theme.ThemeMode&#10;&#10;@Composable&#10;fun ThemeModeHeader(&#10;    currentThemeMode: ThemeMode,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Row(&#10;        modifier = modifier,&#10;        verticalAlignment = Alignment.CenterVertically,&#10;        horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;    ) {&#10;        Icon(&#10;            imageVector = when (currentThemeMode) {&#10;                ThemeMode.LIGHT -&gt; Icons.Default.LightMode&#10;                ThemeMode.DARK -&gt; Icons.Default.DarkMode&#10;                ThemeMode.SYSTEM -&gt; Icons.Default.Palette&#10;            },&#10;            contentDescription = null,&#10;            tint = MaterialTheme.colorScheme.primary&#10;        )&#10;        Column(modifier = Modifier.weight(1f)) {&#10;            Text(&#10;                text = stringResource(R.string.theme_mode),&#10;                style = MaterialTheme.typography.titleMedium,&#10;                fontWeight = FontWeight.SemiBold&#10;            )&#10;            Text(&#10;                text = stringResource(R.string.theme_mode_description),&#10;                style = MaterialTheme.typography.bodyMedium,&#10;                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;            )&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/fastlane/metadata/android/de-DE/changelogs/10.txt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/fastlane/metadata/android/de-DE/changelogs/10.txt" />
              <option name="updatedContent" value="• Präzise Benachrichtigungsplanung für bessere Zuverlässigkeit behoben&#10;• Dualis-Notendienst mit dynamischem Semesterabruf und verbesserter Fehlerbehandlung erweitert&#10;• Verbesserte Anmeldeerfahrung mit automatischem Fokuswechsel zwischen Feldern und passenden Tastaturtypen&#10;• Benutzerdefinierte Benachrichtigungssymbole für bessere visuelle Identifizierung hinzugefügt&#10;• Erweiterte Klassendatenerfassung um vollständige Details von einzelnen Veranstaltungsseiten&#10;• Umfangreiche Code-Refaktorierung für verbesserte Wartbarkeit und Leistung&#10;• Bessere Fehlerbehandlung und Fallback-Mechanismen in der gesamten App" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/fastlane/metadata/android/en-US/changelogs/10.txt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/fastlane/metadata/android/en-US/changelogs/10.txt" />
              <option name="updatedContent" value="• Fixed precise notification scheduling for better reliability&#10;• Enhanced Dualis grades service with dynamic semester fetching and better error handling&#10;• Improved login experience with automatic focus movement between fields and appropriate keyboard types&#10;• Added custom notification icons for better visual identification&#10;• Expanded class data fetching to include full details from individual event pages&#10;• Major code refactoring for improved maintainability and performance&#10;• Better error handling and fallback mechanisms throughout the app" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/gradle/libs.versions.toml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/gradle/libs.versions.toml" />
              <option name="originalContent" value="[versions]&#10;agp = &quot;8.11.1&quot;&#10;datastorePreferencesCore = &quot;1.1.7&quot;&#10;edgeToEdge = &quot;1.1.0&quot;&#10;gson = &quot;2.13.1&quot;&#10;kotlin = &quot;2.2.0&quot;&#10;coreKtx = &quot;1.16.0&quot;&#10;junit = &quot;4.13.2&quot;&#10;junitVersion = &quot;1.2.1&quot;&#10;espressoCore = &quot;3.6.1&quot;&#10;lifecycleRuntimeKtx = &quot;2.9.2&quot;&#10;activityCompose = &quot;1.10.1&quot;&#10;composeBom = &quot;2025.07.00&quot;&#10;navigationCompose = &quot;2.9.2&quot;&#10;okhttp = &quot;5.1.0&quot;&#10;jsoup = &quot;1.21.1&quot;&#10;securityCrypto = &quot;1.1.0-beta01&quot;&#10;workManager = &quot;2.10.2&quot;&#10;&#10;[libraries]&#10;androidx-core-ktx = { group = &quot;androidx.core&quot;, name = &quot;core-ktx&quot;, version.ref = &quot;coreKtx&quot; }&#10;androidx-datastore-preferences = { module = &quot;androidx.datastore:datastore-preferences&quot;, version.ref = &quot;datastorePreferencesCore&quot; }&#10;androidx-navigation-compose = { module = &quot;androidx.navigation:navigation-compose&quot;, version.ref = &quot;navigationCompose&quot; }&#10;androidx-security-crypto = { module = &quot;androidx.security:security-crypto&quot;, version.ref = &quot;securityCrypto&quot; }&#10;gson = { module = &quot;com.google.code.gson:gson&quot;, version.ref = &quot;gson&quot; }&#10;junit = { group = &quot;junit&quot;, name = &quot;junit&quot;, version.ref = &quot;junit&quot; }&#10;androidx-junit = { group = &quot;androidx.test.ext&quot;, name = &quot;junit&quot;, version.ref = &quot;junitVersion&quot; }&#10;androidx-espresso-core = { group = &quot;androidx.test.espresso&quot;, name = &quot;espresso-core&quot;, version.ref = &quot;espressoCore&quot; }&#10;androidx-lifecycle-runtime-ktx = { group = &quot;androidx.lifecycle&quot;, name = &quot;lifecycle-runtime-ktx&quot;, version.ref = &quot;lifecycleRuntimeKtx&quot; }&#10;androidx-activity-compose = { group = &quot;androidx.activity&quot;, name = &quot;activity-compose&quot;, version.ref = &quot;activityCompose&quot; }&#10;androidx-compose-bom = { group = &quot;androidx.compose&quot;, name = &quot;compose-bom&quot;, version.ref = &quot;composeBom&quot; }&#10;androidx-ui = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui&quot; }&#10;androidx-ui-graphics = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-graphics&quot; }&#10;androidx-ui-tooling = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-tooling&quot; }&#10;androidx-ui-tooling-preview = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-tooling-preview&quot; }&#10;androidx-ui-test-manifest = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-test-manifest&quot; }&#10;androidx-ui-test-junit4 = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-test-junit4&quot; }&#10;androidx-material3 = { group = &quot;androidx.compose.material3&quot;, name = &quot;material3&quot; }&#10;androidx-material-icons-extended = { group = &quot;androidx.compose.material&quot;, name = &quot;material-icons-extended&quot; }&#10;okhttp = { group = &quot;com.squareup.okhttp3&quot;, name = &quot;okhttp&quot;, version.ref = &quot;okhttp&quot; }&#10;okhttp-logging-interceptor = { group = &quot;com.squareup.okhttp3&quot;, name = &quot;logging-interceptor&quot;, version.ref = &quot;okhttp&quot; }&#10;okhttp-urlconnection = { group = &quot;com.squareup.okhttp3&quot;, name = &quot;okhttp-urlconnection&quot;, version.ref = &quot;okhttp&quot; }&#10;jsoup = { group = &quot;org.jsoup&quot;, name = &quot;jsoup&quot;, version.ref = &quot;jsoup&quot; }&#10;androidx-work-runtime-ktx = { module = &quot;androidx.work:work-runtime-ktx&quot;, version.ref = &quot;workManager&quot; }&#10;androidx-activity-ktx = { group = &quot;androidx.activity&quot;, name = &quot;activity-ktx&quot;, version.ref = &quot;activityCompose&quot; }&#10;&#10;[plugins]&#10;android-application = { id = &quot;com.android.application&quot;, version.ref = &quot;agp&quot; }&#10;kotlin-android = { id = &quot;org.jetbrains.kotlin.android&quot;, version.ref = &quot;kotlin&quot; }&#10;kotlin-compose = { id = &quot;org.jetbrains.kotlin.plugin.compose&quot;, version.ref = &quot;kotlin&quot; }&#10;" />
              <option name="updatedContent" value="[versions]&#10;agp = &quot;8.11.1&quot;&#10;datastorePreferencesCore = &quot;1.1.7&quot;&#10;gson = &quot;2.13.1&quot;&#10;kotlin = &quot;2.2.0&quot;&#10;coreKtx = &quot;1.16.0&quot;&#10;junit = &quot;4.13.2&quot;&#10;junitVersion = &quot;1.2.1&quot;&#10;espressoCore = &quot;3.6.1&quot;&#10;lifecycleRuntimeKtx = &quot;2.9.2&quot;&#10;activityCompose = &quot;1.10.1&quot;&#10;composeBom = &quot;2025.07.00&quot;&#10;navigationCompose = &quot;2.9.2&quot;&#10;okhttp = &quot;5.1.0&quot;&#10;jsoup = &quot;1.21.1&quot;&#10;securityCrypto = &quot;1.1.0-beta01&quot;&#10;workManager = &quot;2.10.2&quot;&#10;&#10;[libraries]&#10;androidx-core-ktx = { group = &quot;androidx.core&quot;, name = &quot;core-ktx&quot;, version.ref = &quot;coreKtx&quot; }&#10;androidx-datastore-preferences = { module = &quot;androidx.datastore:datastore-preferences&quot;, version.ref = &quot;datastorePreferencesCore&quot; }&#10;androidx-navigation-compose = { module = &quot;androidx.navigation:navigation-compose&quot;, version.ref = &quot;navigationCompose&quot; }&#10;androidx-security-crypto = { module = &quot;androidx.security:security-crypto&quot;, version.ref = &quot;securityCrypto&quot; }&#10;gson = { module = &quot;com.google.code.gson:gson&quot;, version.ref = &quot;gson&quot; }&#10;junit = { group = &quot;junit&quot;, name = &quot;junit&quot;, version.ref = &quot;junit&quot; }&#10;androidx-junit = { group = &quot;androidx.test.ext&quot;, name = &quot;junit&quot;, version.ref = &quot;junitVersion&quot; }&#10;androidx-espresso-core = { group = &quot;androidx.test.espresso&quot;, name = &quot;espresso-core&quot;, version.ref = &quot;espressoCore&quot; }&#10;androidx-lifecycle-runtime-ktx = { group = &quot;androidx.lifecycle&quot;, name = &quot;lifecycle-runtime-ktx&quot;, version.ref = &quot;lifecycleRuntimeKtx&quot; }&#10;androidx-activity-compose = { group = &quot;androidx.activity&quot;, name = &quot;activity-compose&quot;, version.ref = &quot;activityCompose&quot; }&#10;androidx-compose-bom = { group = &quot;androidx.compose&quot;, name = &quot;compose-bom&quot;, version.ref = &quot;composeBom&quot; }&#10;androidx-ui = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui&quot; }&#10;androidx-ui-graphics = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-graphics&quot; }&#10;androidx-ui-tooling = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-tooling&quot; }&#10;androidx-ui-tooling-preview = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-tooling-preview&quot; }&#10;androidx-ui-test-manifest = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-test-manifest&quot; }&#10;androidx-ui-test-junit4 = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-test-junit4&quot; }&#10;androidx-material3 = { group = &quot;androidx.compose.material3&quot;, name = &quot;material3&quot; }&#10;androidx-material-icons-extended = { group = &quot;androidx.compose.material&quot;, name = &quot;material-icons-extended&quot; }&#10;okhttp = { group = &quot;com.squareup.okhttp3&quot;, name = &quot;okhttp&quot;, version.ref = &quot;okhttp&quot; }&#10;okhttp-logging-interceptor = { group = &quot;com.squareup.okhttp3&quot;, name = &quot;logging-interceptor&quot;, version.ref = &quot;okhttp&quot; }&#10;okhttp-urlconnection = { group = &quot;com.squareup.okhttp3&quot;, name = &quot;okhttp-urlconnection&quot;, version.ref = &quot;okhttp&quot; }&#10;jsoup = { group = &quot;org.jsoup&quot;, name = &quot;jsoup&quot;, version.ref = &quot;jsoup&quot; }&#10;androidx-work-runtime-ktx = { module = &quot;androidx.work:work-runtime-ktx&quot;, version.ref = &quot;workManager&quot; }&#10;androidx-activity-ktx = { group = &quot;androidx.activity&quot;, name = &quot;activity-ktx&quot;, version.ref = &quot;activityCompose&quot; }&#10;&#10;[plugins]&#10;android-application = { id = &quot;com.android.application&quot;, version.ref = &quot;agp&quot; }&#10;kotlin-android = { id = &quot;org.jetbrains.kotlin.android&quot;, version.ref = &quot;kotlin&quot; }&#10;kotlin-compose = { id = &quot;org.jetbrains.kotlin.plugin.compose&quot;, version.ref = &quot;kotlin&quot; }" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>